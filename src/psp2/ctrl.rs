/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::ctrl::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

extern "C" {
    pub fn sceCtrlSetSamplingMode(mode: SceCtrlPadInputMode::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlSetSamplingModeExt(mode: SceCtrlPadInputMode::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlGetSamplingMode(pMode: *mut SceCtrlPadInputMode::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferPositive(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferPositive2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferPositiveExt(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferPositiveExt2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferNegative(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferNegative2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferPositive(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferPositive2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferPositiveExt(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferPositiveExt2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferNegative(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferNegative2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlSetRapidFire(
        port: crate::ctypes::c_int,
        idx: crate::ctypes::c_int,
        pRule: *const SceCtrlRapidFireRule,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlClearRapidFire(
        port: crate::ctypes::c_int,
        idx: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlSetActuator(
        port: crate::ctypes::c_int,
        pState: *const SceCtrlActuator,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlSetLightBar(
        port: crate::ctypes::c_int,
        r: SceUInt8,
        g: SceUInt8,
        b: SceUInt8,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlGetControllerPortInfo(info: *mut SceCtrlPortInfo) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlGetBatteryInfo(
        port: crate::ctypes::c_int,
        batt: *mut SceUInt8,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlSetButtonIntercept(intercept: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlGetButtonIntercept(intercept: *mut crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlIsMultiControllerSupported() -> crate::ctypes::c_int;
}
