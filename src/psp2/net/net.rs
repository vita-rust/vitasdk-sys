/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2common::net::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_NET_EPOLL_ABORT_FLAG_PRESERVATION: u32 = 1;
pub const SCE_NET_RESOLVER_PORT: u32 = 53;
pub const SCE_NET_RESOLVER_HOSTNAME_LEN_MAX: u32 = 255;
pub mod SceNetResolverErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_RESOLVER_EINTERNAL: Type = 220;
    pub const SCE_NET_RESOLVER_EBUSY: Type = 221;
    pub const SCE_NET_RESOLVER_ENOSPACE: Type = 222;
    pub const SCE_NET_RESOLVER_EPACKET: Type = 223;
    pub const SCE_NET_RESOLVER_ERESERVED224: Type = 224;
    pub const SCE_NET_RESOLVER_ENODNS: Type = 225;
    pub const SCE_NET_RESOLVER_ETIMEDOUT: Type = 226;
    pub const SCE_NET_RESOLVER_ENOSUPPORT: Type = 227;
    pub const SCE_NET_RESOLVER_EFORMAT: Type = 228;
    pub const SCE_NET_RESOLVER_ESERVERFAILURE: Type = 229;
    pub const SCE_NET_RESOLVER_ENOHOST: Type = 230;
    pub const SCE_NET_RESOLVER_ENOTIMPLEMENTED: Type = 231;
    pub const SCE_NET_RESOLVER_ESERVERREFUSED: Type = 232;
    pub const SCE_NET_RESOLVER_ENORECORD: Type = 233;
    pub const SCE_NET_RESOLVER_EALIGNMENT: Type = 234;
}
pub mod SceNetDumpType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_DUMP_PEEK: Type = 16;
    pub const SCE_NET_DUMP_DONTWAIT: Type = 32;
    pub const SCE_NET_DUMP_OVERFLOW: Type = 64;
    pub const SCE_NET_DUMP_ABORT_FLAG_PRESERVATION: Type = 1;
}
pub mod SceNetEpollEventType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_EPOLLIN: Type = 1;
    pub const SCE_NET_EPOLLOUT: Type = 2;
    pub const SCE_NET_EPOLLERR: Type = 8;
    pub const SCE_NET_EPOLLHUP: Type = 16;
    pub const SCE_NET_EPOLLDESCID: Type = 65536;
}
pub mod SceNetEpollControlFlag {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_EPOLL_CTL_ADD: Type = 1;
    pub const SCE_NET_EPOLL_CTL_MOD: Type = 2;
    pub const SCE_NET_EPOLL_CTL_DEL: Type = 3;
}
pub mod SceNetEmulationFlag {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_EMULATION_FLAG_ETH0: Type = 1;
    pub const SCE_NET_EMULATION_FLAG_WLAN0: Type = 2;
}
pub mod SceNetResolverFlag {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_RESOLVER_ASYNC: Type = 1;
    pub const SCE_NET_RESOLVER_START_NTOA_DISABLE_IPADDRESS: Type = 65536;
}
pub mod SceNetResolverAbortFlag {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_RESOLVER_ABORT_FLAG_NTOA_PRESERVATION: Type = 1;
    pub const SCE_NET_RESOLVER_ABORT_FLAG_ATON_PRESERVATION: Type = 2;
}
pub mod SceNetSocketAbortFlag {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_SOCKET_ABORT_FLAG_RCV_PRESERVATION: Type = 1;
    pub const SCE_NET_SOCKET_ABORT_FLAG_SND_PRESERVATION: Type = 2;
}
pub mod SceNetShutdownFlag {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_SHUT_RD: Type = 0;
    pub const SCE_NET_SHUT_WR: Type = 1;
    pub const SCE_NET_SHUT_RDWR: Type = 2;
}
pub type SceNetResolverFunctionAllocate = ::core::option::Option<
    unsafe extern "C" fn(
        size: crate::ctypes::c_uint,
        rid: crate::ctypes::c_int,
        name: *const crate::ctypes::c_char,
        user: *mut crate::ctypes::c_void,
    ) -> *mut crate::ctypes::c_void,
>;
pub type SceNetResolverFunctionFree = ::core::option::Option<
    unsafe extern "C" fn(
        ptr: *mut crate::ctypes::c_void,
        rid: crate::ctypes::c_int,
        name: *const crate::ctypes::c_char,
        user: *mut crate::ctypes::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceNetInitParam {
    pub memory: *mut crate::ctypes::c_void,
    pub size: crate::ctypes::c_int,
    pub flags: crate::ctypes::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceNetEmulationData {
    pub drop_rate: crate::ctypes::c_ushort,
    pub drop_duration: crate::ctypes::c_ushort,
    pub pass_duration: crate::ctypes::c_ushort,
    pub delay_time: crate::ctypes::c_ushort,
    pub delay_jitter: crate::ctypes::c_ushort,
    pub order_rate: crate::ctypes::c_ushort,
    pub order_delay_time: crate::ctypes::c_ushort,
    pub duplication_rate: crate::ctypes::c_ushort,
    pub bps_limit: crate::ctypes::c_uint,
    pub lower_size_limit: crate::ctypes::c_ushort,
    pub upper_size_limit: crate::ctypes::c_ushort,
    pub system_policy_pattern: crate::ctypes::c_uint,
    pub game_policy_pattern: crate::ctypes::c_uint,
    pub policy_flags: [crate::ctypes::c_ushort; 64usize],
    pub reserved: [crate::ctypes::c_uchar; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceNetEmulationParam {
    pub version: crate::ctypes::c_ushort,
    pub option_number: crate::ctypes::c_ushort,
    pub current_version: crate::ctypes::c_ushort,
    pub result: crate::ctypes::c_ushort,
    pub flags: crate::ctypes::c_uint,
    pub reserved1: crate::ctypes::c_uint,
    pub send: SceNetEmulationData,
    pub recv: SceNetEmulationData,
    pub seed: crate::ctypes::c_uint,
    pub reserved: [crate::ctypes::c_uchar; 44usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceNetEpollDataExt {
    pub id: crate::ctypes::c_int,
    pub u32_: crate::ctypes::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SceNetEpollData {
    pub ptr: *mut crate::ctypes::c_void,
    pub fd: crate::ctypes::c_int,
    pub u32_: crate::ctypes::c_uint,
    pub u64_: crate::ctypes::c_ulonglong,
    pub ext: SceNetEpollDataExt,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceNetEpollSystemData {
    pub system: [crate::ctypes::c_uint; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetEpollEvent {
    pub events: crate::ctypes::c_uint,
    pub reserved: crate::ctypes::c_uint,
    pub system: SceNetEpollSystemData,
    pub data: SceNetEpollData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceNetResolverParam {
    pub allocate: SceNetResolverFunctionAllocate,
    pub free: SceNetResolverFunctionFree,
    pub user: *mut crate::ctypes::c_void,
}
extern "C" {
    pub fn sceNetInit(param: *mut SceNetInitParam) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetTerm() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetShowIfconfig(
        p: *mut crate::ctypes::c_void,
        b: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetShowRoute() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetShowNetstat() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetEmulationSet(
        param: *mut SceNetEmulationParam,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetEmulationGet(
        param: *mut SceNetEmulationParam,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetResolverCreate(
        name: *const crate::ctypes::c_char,
        param: *mut SceNetResolverParam,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetResolverStartNtoa(
        rid: crate::ctypes::c_int,
        hostname: *const crate::ctypes::c_char,
        addr: *mut SceNetInAddr,
        timeout: crate::ctypes::c_int,
        retry: crate::ctypes::c_int,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetResolverStartAton(
        rid: crate::ctypes::c_int,
        addr: *const SceNetInAddr,
        hostname: *mut crate::ctypes::c_char,
        len: crate::ctypes::c_int,
        timeout: crate::ctypes::c_int,
        retry: crate::ctypes::c_int,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetResolverGetError(
        rid: crate::ctypes::c_int,
        result: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetResolverDestroy(rid: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetResolverAbort(
        rid: crate::ctypes::c_int,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetDumpCreate(
        name: *const crate::ctypes::c_char,
        len: crate::ctypes::c_int,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetDumpRead(
        id: crate::ctypes::c_int,
        buf: *mut crate::ctypes::c_void,
        len: crate::ctypes::c_int,
        pflags: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetDumpDestroy(id: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetDumpAbort(
        id: crate::ctypes::c_int,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetEpollCreate(
        name: *const crate::ctypes::c_char,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetEpollControl(
        eid: crate::ctypes::c_int,
        op: crate::ctypes::c_int,
        id: crate::ctypes::c_int,
        event: *mut SceNetEpollEvent,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetEpollWait(
        eid: crate::ctypes::c_int,
        events: *mut SceNetEpollEvent,
        maxevents: crate::ctypes::c_int,
        timeout: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetEpollWaitCB(
        eid: crate::ctypes::c_int,
        events: *mut SceNetEpollEvent,
        maxevents: crate::ctypes::c_int,
        timeout: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetEpollDestroy(eid: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetEpollAbort(
        eid: crate::ctypes::c_int,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetEtherStrton(
        str_: *const crate::ctypes::c_char,
        n: *mut SceNetEtherAddr,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetEtherNtostr(
        n: *const SceNetEtherAddr,
        str_: *mut crate::ctypes::c_char,
        len: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetGetMacAddress(
        addr: *mut SceNetEtherAddr,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetSocket(
        name: *const crate::ctypes::c_char,
        domain: crate::ctypes::c_int,
        type_: crate::ctypes::c_int,
        protocol: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAccept(
        s: crate::ctypes::c_int,
        addr: *mut SceNetSockaddr,
        addrlen: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetBind(
        s: crate::ctypes::c_int,
        addr: *const SceNetSockaddr,
        addrlen: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetConnect(
        s: crate::ctypes::c_int,
        name: *const SceNetSockaddr,
        namelen: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetGetpeername(
        s: crate::ctypes::c_int,
        name: *mut SceNetSockaddr,
        namelen: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetGetsockname(
        s: crate::ctypes::c_int,
        name: *mut SceNetSockaddr,
        namelen: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetGetsockopt(
        s: crate::ctypes::c_int,
        level: crate::ctypes::c_int,
        optname: crate::ctypes::c_int,
        optval: *mut crate::ctypes::c_void,
        optlen: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetListen(
        s: crate::ctypes::c_int,
        backlog: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetRecv(
        s: crate::ctypes::c_int,
        buf: *mut crate::ctypes::c_void,
        len: crate::ctypes::c_uint,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetRecvfrom(
        s: crate::ctypes::c_int,
        buf: *mut crate::ctypes::c_void,
        len: crate::ctypes::c_uint,
        flags: crate::ctypes::c_int,
        from: *mut SceNetSockaddr,
        fromlen: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetRecvmsg(
        s: crate::ctypes::c_int,
        msg: *mut SceNetMsghdr,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetSend(
        s: crate::ctypes::c_int,
        msg: *const crate::ctypes::c_void,
        len: crate::ctypes::c_uint,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetSendto(
        s: crate::ctypes::c_int,
        msg: *const crate::ctypes::c_void,
        len: crate::ctypes::c_uint,
        flags: crate::ctypes::c_int,
        to: *const SceNetSockaddr,
        tolen: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetSendmsg(
        s: crate::ctypes::c_int,
        msg: *const SceNetMsghdr,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetSetsockopt(
        s: crate::ctypes::c_int,
        level: crate::ctypes::c_int,
        optname: crate::ctypes::c_int,
        optval: *const crate::ctypes::c_void,
        optlen: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetShutdown(
        s: crate::ctypes::c_int,
        how: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetSocketClose(s: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetSocketAbort(
        s: crate::ctypes::c_int,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetGetSockInfo(
        s: crate::ctypes::c_int,
        info: *mut SceNetSockInfo,
        n: crate::ctypes::c_int,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetGetSockIdInfo(
        fds: *mut SceNetFdSet,
        sockinfoflags: crate::ctypes::c_int,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetGetStatisticsInfo(
        info: *mut SceNetStatisticsInfo,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetSetDnsInfo(
        info: *mut SceNetDnsInfo,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetClearDnsCache(flags: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetInetNtop(
        af: crate::ctypes::c_int,
        src: *const crate::ctypes::c_void,
        dst: *mut crate::ctypes::c_char,
        size: crate::ctypes::c_uint,
    ) -> *const crate::ctypes::c_char;
}
extern "C" {
    pub fn sceNetInetPton(
        af: crate::ctypes::c_int,
        src: *const crate::ctypes::c_char,
        dst: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetHtonll(host64: crate::ctypes::c_ulonglong) -> crate::ctypes::c_ulonglong;
}
extern "C" {
    pub fn sceNetHtonl(host32: crate::ctypes::c_uint) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceNetHtons(host16: crate::ctypes::c_ushort) -> crate::ctypes::c_ushort;
}
extern "C" {
    pub fn sceNetNtohll(net64: crate::ctypes::c_ulonglong) -> crate::ctypes::c_ulonglong;
}
extern "C" {
    pub fn sceNetNtohl(net32: crate::ctypes::c_uint) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceNetNtohs(net16: crate::ctypes::c_ushort) -> crate::ctypes::c_ushort;
}
extern "C" {
    pub fn sceNetErrnoLoc() -> *mut crate::ctypes::c_int;
}
