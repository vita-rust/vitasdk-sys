/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_HTTP_DEFAULT_RESOLVER_TIMEOUT: u32 = 1000000;
pub const SCE_HTTP_DEFAULT_RESOLVER_RETRY: u32 = 5;
pub const SCE_HTTP_DEFAULT_CONNECT_TIMEOUT: u32 = 30000000;
pub const SCE_HTTP_DEFAULT_SEND_TIMEOUT: u32 = 120000000;
pub const SCE_HTTP_DEFAULT_RECV_TIMEOUT: u32 = 120000000;
pub const SCE_HTTP_DEFAULT_RECV_BLOCK_SIZE: u32 = 1500;
pub const SCE_HTTP_DEFAULT_RESPONSE_HEADER_MAX: u32 = 5000;
pub const SCE_HTTP_DEFAULT_REDIRECT_MAX: u32 = 6;
pub const SCE_HTTP_DEFAULT_TRY_AUTH_MAX: u32 = 6;
pub const SCE_HTTP_INVALID_ID: u32 = 0;
pub const SCE_HTTP_ENABLE: u32 = 1;
pub const SCE_HTTP_DISABLE: u32 = 0;
pub const SCE_HTTP_USERNAME_MAX_SIZE: u32 = 256;
pub const SCE_HTTP_PASSWORD_MAX_SIZE: u32 = 256;
pub mod SceHttpErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTP_ERROR_BEFORE_INIT: Type = 2151878657;
    pub const SCE_HTTP_ERROR_ALREADY_INITED: Type = 2151878688;
    pub const SCE_HTTP_ERROR_BUSY: Type = 2151878689;
    pub const SCE_HTTP_ERROR_OUT_OF_MEMORY: Type = 2151878690;
    pub const SCE_HTTP_ERROR_NOT_FOUND: Type = 2151878693;
    pub const SCE_HTTP_ERROR_INVALID_VERSION: Type = 2151878762;
    pub const SCE_HTTP_ERROR_INVALID_ID: Type = 2151878912;
    pub const SCE_HTTP_ERROR_OUT_OF_SIZE: Type = 2151878916;
    pub const SCE_HTTP_ERROR_INVALID_VALUE: Type = 2151879166;
    pub const SCE_HTTP_ERROR_INVALID_URL: Type = 2151886944;
    pub const SCE_HTTP_ERROR_UNKNOWN_SCHEME: Type = 2151878753;
    pub const SCE_HTTP_ERROR_NETWORK: Type = 2151878755;
    pub const SCE_HTTP_ERROR_BAD_RESPONSE: Type = 2151878756;
    pub const SCE_HTTP_ERROR_BEFORE_SEND: Type = 2151878757;
    pub const SCE_HTTP_ERROR_AFTER_SEND: Type = 2151878758;
    pub const SCE_HTTP_ERROR_TIMEOUT: Type = 2151878760;
    pub const SCE_HTTP_ERROR_UNKOWN_AUTH_TYPE: Type = 2151878761;
    pub const SCE_HTTP_ERROR_UNKNOWN_METHOD: Type = 2151878763;
    pub const SCE_HTTP_ERROR_READ_BY_HEAD_METHOD: Type = 2151878767;
    pub const SCE_HTTP_ERROR_NOT_IN_COM: Type = 2151878768;
    pub const SCE_HTTP_ERROR_NO_CONTENT_LENGTH: Type = 2151878769;
    pub const SCE_HTTP_ERROR_CHUNK_ENC: Type = 2151878770;
    pub const SCE_HTTP_ERROR_TOO_LARGE_RESPONSE_HEADER: Type = 2151878771;
    pub const SCE_HTTP_ERROR_SSL: Type = 2151878773;
    pub const SCE_HTTP_ERROR_ABORTED: Type = 2151878784;
    pub const SCE_HTTP_ERROR_UNKNOWN: Type = 2151878785;
    pub const SCE_HTTP_ERROR_PARSE_HTTP_NOT_FOUND: Type = 2151882789;
    pub const SCE_HTTP_ERROR_PARSE_HTTP_INVALID_RESPONSE: Type = 2151882848;
    pub const SCE_HTTP_ERROR_PARSE_HTTP_INVALID_VALUE: Type = 2151883262;
    pub const SCE_HTTP_ERROR_RESOLVER_EPACKET: Type = 2151899137;
    pub const SCE_HTTP_ERROR_RESOLVER_ENODNS: Type = 2151899138;
    pub const SCE_HTTP_ERROR_RESOLVER_ETIMEDOUT: Type = 2151899139;
    pub const SCE_HTTP_ERROR_RESOLVER_ENOSUPPORT: Type = 2151899140;
    pub const SCE_HTTP_ERROR_RESOLVER_EFORMAT: Type = 2151899141;
    pub const SCE_HTTP_ERROR_RESOLVER_ESERVERFAILURE: Type = 2151899142;
    pub const SCE_HTTP_ERROR_RESOLVER_ENOHOST: Type = 2151899143;
    pub const SCE_HTTP_ERROR_RESOLVER_ENOTIMPLEMENTED: Type = 2151899144;
    pub const SCE_HTTP_ERROR_RESOLVER_ESERVERREFUSED: Type = 2151899145;
    pub const SCE_HTTP_ERROR_RESOLVER_ENORECORD: Type = 2151899146;
}
pub mod SceHttpsErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTPS_ERROR_CERT: Type = 2151895136;
    pub const SCE_HTTPS_ERROR_HANDSHAKE: Type = 2151895137;
    pub const SCE_HTTPS_ERROR_IO: Type = 2151895138;
    pub const SCE_HTTPS_ERROR_INTERNAL: Type = 2151895139;
    pub const SCE_HTTPS_ERROR_PROXY: Type = 2151895140;
}
pub mod SceHttpsSslErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTPS_ERROR_SSL_INTERNAL: Type = 1;
    pub const SCE_HTTPS_ERROR_SSL_INVALID_CERT: Type = 2;
    pub const SCE_HTTPS_ERROR_SSL_CN_CHECK: Type = 4;
    pub const SCE_HTTPS_ERROR_SSL_NOT_AFTER_CHECK: Type = 8;
    pub const SCE_HTTPS_ERROR_SSL_NOT_BEFORE_CHECK: Type = 16;
    pub const SCE_HTTPS_ERROR_SSL_UNKNOWN_CA: Type = 32;
}
pub mod SceHttpStatusCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTP_STATUS_CODE_CONTINUE: Type = 100;
    pub const SCE_HTTP_STATUS_CODE_SWITCHING_PROTOCOLS: Type = 101;
    pub const SCE_HTTP_STATUS_CODE_PROCESSING: Type = 102;
    pub const SCE_HTTP_STATUS_CODE_OK: Type = 200;
    pub const SCE_HTTP_STATUS_CODE_CREATED: Type = 201;
    pub const SCE_HTTP_STATUS_CODE_ACCEPTED: Type = 202;
    pub const SCE_HTTP_STATUS_CODE_NON_AUTHORITATIVE_INFORMATION: Type = 203;
    pub const SCE_HTTP_STATUS_CODE_NO_CONTENT: Type = 204;
    pub const SCE_HTTP_STATUS_CODE_RESET_CONTENT: Type = 205;
    pub const SCE_HTTP_STATUS_CODE_PARTIAL_CONTENT: Type = 206;
    pub const SCE_HTTP_STATUS_CODE_MULTI_STATUS: Type = 207;
    pub const SCE_HTTP_STATUS_CODE_MULTIPLE_CHOICES: Type = 300;
    pub const SCE_HTTP_STATUS_CODE_MOVED_PERMANENTLY: Type = 301;
    pub const SCE_HTTP_STATUS_CODE_FOUND: Type = 302;
    pub const SCE_HTTP_STATUS_CODE_SEE_OTHER: Type = 303;
    pub const SCE_HTTP_STATUS_CODE_NOT_MODIFIED: Type = 304;
    pub const SCE_HTTP_STATUS_CODE_USE_PROXY: Type = 305;
    pub const SCE_HTTP_STATUS_CODE_TEMPORARY_REDIRECT: Type = 307;
    pub const SCE_HTTP_STATUS_CODE_BAD_REQUEST: Type = 400;
    pub const SCE_HTTP_STATUS_CODE_UNAUTHORIZED: Type = 401;
    pub const SCE_HTTP_STATUS_CODE_PAYMENT_REQUIRED: Type = 402;
    pub const SCE_HTTP_STATUS_CODE_FORBIDDDEN: Type = 403;
    pub const SCE_HTTP_STATUS_CODE_NOT_FOUND: Type = 404;
    pub const SCE_HTTP_STATUS_CODE_METHOD_NOT_ALLOWED: Type = 405;
    pub const SCE_HTTP_STATUS_CODE_NOT_ACCEPTABLE: Type = 406;
    pub const SCE_HTTP_STATUS_CODE_PROXY_AUTHENTICATION_REQUIRED: Type = 407;
    pub const SCE_HTTP_STATUS_CODE_REQUEST_TIME_OUT: Type = 408;
    pub const SCE_HTTP_STATUS_CODE_CONFLICT: Type = 409;
    pub const SCE_HTTP_STATUS_CODE_GONE: Type = 410;
    pub const SCE_HTTP_STATUS_CODE_LENGTH_REQUIRED: Type = 411;
    pub const SCE_HTTP_STATUS_CODE_PRECONDITION_FAILED: Type = 412;
    pub const SCE_HTTP_STATUS_CODE_REQUEST_ENTITY_TOO_LARGE: Type = 413;
    pub const SCE_HTTP_STATUS_CODE_REQUEST_URI_TOO_LARGE: Type = 414;
    pub const SCE_HTTP_STATUS_CODE_UNSUPPORTED_MEDIA_TYPE: Type = 415;
    pub const SCE_HTTP_STATUS_CODE_REQUEST_RANGE_NOT_SATISFIBLE: Type = 416;
    pub const SCE_HTTP_STATUS_CODE_EXPECTATION_FAILED: Type = 417;
    pub const SCE_HTTP_STATUS_CODE_UNPROCESSABLE_ENTITY: Type = 422;
    pub const SCE_HTTP_STATUS_CODE_LOCKED: Type = 423;
    pub const SCE_HTTP_STATUS_CODE_FAILED_DEPENDENCY: Type = 424;
    pub const SCE_HTTP_STATUS_CODE_UPGRADE_REQUIRED: Type = 426;
    pub const SCE_HTTP_STATUS_CODE_INTERNAL_SERVER_ERROR: Type = 500;
    pub const SCE_HTTP_STATUS_CODE_NOT_IMPLEMENTED: Type = 501;
    pub const SCE_HTTP_STATUS_CODE_BAD_GATEWAY: Type = 502;
    pub const SCE_HTTP_STATUS_CODE_SERVICE_UNAVAILABLE: Type = 503;
    pub const SCE_HTTP_STATUS_CODE_GATEWAY_TIME_OUT: Type = 504;
    pub const SCE_HTTP_STATUS_CODE_HTTP_VERSION_NOT_SUPPORTED: Type = 505;
    pub const SCE_HTTP_STATUS_CODE_INSUFFICIENT_STORAGE: Type = 507;
}
pub use self::SceHttpStatusCode::Type as SceHttpStatuscode;
pub mod SceHttpUriBuildType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTP_URI_BUILD_WITH_SCHEME: Type = 1;
    pub const SCE_HTTP_URI_BUILD_WITH_HOSTNAME: Type = 2;
    pub const SCE_HTTP_URI_BUILD_WITH_PORT: Type = 4;
    pub const SCE_HTTP_URI_BUILD_WITH_PATH: Type = 8;
    pub const SCE_HTTP_URI_BUILD_WITH_USERNAME: Type = 16;
    pub const SCE_HTTP_URI_BUILD_WITH_PASSWORD: Type = 32;
    pub const SCE_HTTP_URI_BUILD_WITH_QUERY: Type = 64;
    pub const SCE_HTTP_URI_BUILD_WITH_FRAGMENT: Type = 128;
    pub const SCE_HTTP_URI_BUILD_WITH_ALL: Type = 65535;
}
pub mod SceHttpsFlag {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTPS_FLAG_SERVER_VERIFY: Type = 1;
    pub const SCE_HTTPS_FLAG_CLIENT_VERIFY: Type = 2;
    pub const SCE_HTTPS_FLAG_CN_CHECK: Type = 4;
    pub const SCE_HTTPS_FLAG_NOT_AFTER_CHECK: Type = 8;
    pub const SCE_HTTPS_FLAG_NOT_BEFORE_CHECK: Type = 16;
    pub const SCE_HTTPS_FLAG_KNOWN_CA_CHECK: Type = 32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceHttpMemoryPoolStats {
    pub poolSize: crate::ctypes::c_uint,
    pub maxInuseSize: crate::ctypes::c_uint,
    pub currentInuseSize: crate::ctypes::c_uint,
    pub reserved: crate::ctypes::c_int,
}
pub mod SceHttpMethods {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTP_METHOD_GET: Type = 0;
    pub const SCE_HTTP_METHOD_POST: Type = 1;
    pub const SCE_HTTP_METHOD_HEAD: Type = 2;
    pub const SCE_HTTP_METHOD_OPTIONS: Type = 3;
    pub const SCE_HTTP_METHOD_PUT: Type = 4;
    pub const SCE_HTTP_METHOD_DELETE: Type = 5;
    pub const SCE_HTTP_METHOD_TRACE: Type = 6;
    pub const SCE_HTTP_METHOD_CONNECT: Type = 7;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceHttpUriElement {
    pub opaque: crate::ctypes::c_int,
    pub scheme: *mut crate::ctypes::c_char,
    pub username: *mut crate::ctypes::c_char,
    pub password: *mut crate::ctypes::c_char,
    pub hostname: *mut crate::ctypes::c_char,
    pub path: *mut crate::ctypes::c_char,
    pub query: *mut crate::ctypes::c_char,
    pub fragment: *mut crate::ctypes::c_char,
    pub port: crate::ctypes::c_ushort,
    pub reserved: [crate::ctypes::c_uchar; 10usize],
}
pub mod SceHttpVersion {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTP_VERSION_1_0: Type = 1;
    pub const SCE_HTTP_VERSION_1_1: Type = 2;
}
pub use self::SceHttpVersion::Type as SceHttpHttpVersion;
pub mod SceHttpProxyMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTP_PROXY_AUTO: Type = 0;
    pub const SCE_HTTP_PROXY_MANUAL: Type = 1;
}
pub mod SceHttpAddHeaderMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTP_HEADER_OVERWRITE: Type = 0;
    pub const SCE_HTTP_HEADER_ADD: Type = 1;
}
pub mod SceHttpAuthType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTP_AUTH_BASIC: Type = 0;
    pub const SCE_HTTP_AUTH_DIGEST: Type = 1;
    pub const SCE_HTTP_AUTH_RESERVED0: Type = 2;
    pub const SCE_HTTP_AUTH_RESERVED1: Type = 3;
    pub const SCE_HTTP_AUTH_RESERVED2: Type = 4;
}
pub mod SceHttpSslVersion {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_HTTPS_SSLV23: Type = 0;
    pub const SCE_HTTPS_SSLV2: Type = 1;
    pub const SCE_HTTPS_SSLV3: Type = 2;
    pub const SCE_HTTPS_TLSV1: Type = 3;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceHttpsData {
    pub ptr: *mut crate::ctypes::c_char,
    pub size: crate::ctypes::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceHttpsCaList {
    pub caCerts: *mut *mut crate::ctypes::c_void,
    pub caNum: crate::ctypes::c_int,
}
pub type SceHttpAuthInfoCallback = ::core::option::Option<
    unsafe extern "C" fn(
        request: crate::ctypes::c_int,
        authType: SceHttpAuthType::Type,
        realm: *const crate::ctypes::c_char,
        username: *mut crate::ctypes::c_char,
        password: *mut crate::ctypes::c_char,
        needEntity: crate::ctypes::c_int,
        entityBody: *mut *mut crate::ctypes::c_uchar,
        entitySize: *mut crate::ctypes::c_uint,
        save: *mut crate::ctypes::c_int,
        userArg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int,
>;
pub type SceHttpRedirectCallback = ::core::option::Option<
    unsafe extern "C" fn(
        request: crate::ctypes::c_int,
        statusCode: crate::ctypes::c_int,
        method: *mut crate::ctypes::c_int,
        location: *const crate::ctypes::c_char,
        userArg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int,
>;
pub type SceHttpsCallback = ::core::option::Option<
    unsafe extern "C" fn(
        verifyEsrr: crate::ctypes::c_uint,
        sslCert: *const *mut crate::ctypes::c_void,
        certNum: crate::ctypes::c_int,
        userArg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int,
>;
pub type SceHttpCookieRecvCallback = ::core::option::Option<
    unsafe extern "C" fn(
        request: crate::ctypes::c_int,
        url: *const crate::ctypes::c_char,
        cookieHeader: *const crate::ctypes::c_char,
        headerLen: crate::ctypes::c_uint,
        userArg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int,
>;
pub type SceHttpCookieSendCallback = ::core::option::Option<
    unsafe extern "C" fn(
        request: crate::ctypes::c_int,
        url: *const crate::ctypes::c_char,
        cookieHeader: *const crate::ctypes::c_char,
        userArg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int,
>;
extern "C" {
    pub fn sceHttpInit(poolSize: crate::ctypes::c_uint) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpTerm() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpGetMemoryPoolStats(
        currentStat: *mut SceHttpMemoryPoolStats,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetAuthInfoCallback(
        id: crate::ctypes::c_int,
        cbfunc: SceHttpAuthInfoCallback,
        userArg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetAuthEnabled(
        id: crate::ctypes::c_int,
        enable: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpGetAuthEnabled(
        id: crate::ctypes::c_int,
        enable: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetRedirectCallback(
        id: crate::ctypes::c_int,
        cbfunc: SceHttpRedirectCallback,
        userArg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetAutoRedirect(
        id: crate::ctypes::c_int,
        enable: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpGetAutoRedirect(
        id: crate::ctypes::c_int,
        enable: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetResolveTimeOut(
        id: crate::ctypes::c_int,
        usec: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetResolveRetry(
        id: crate::ctypes::c_int,
        retry: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetConnectTimeOut(
        id: crate::ctypes::c_int,
        usec: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetSendTimeOut(
        id: crate::ctypes::c_int,
        usec: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetRecvTimeOut(
        id: crate::ctypes::c_int,
        usec: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSendRequest(
        reqId: crate::ctypes::c_int,
        postData: *const crate::ctypes::c_void,
        size: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpAbortRequest(reqId: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpGetResponseContentLength(
        reqId: crate::ctypes::c_int,
        contentLength: *mut crate::ctypes::c_ulonglong,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpGetStatusCode(
        reqId: crate::ctypes::c_int,
        statusCode: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpGetAllResponseHeaders(
        reqId: crate::ctypes::c_int,
        header: *mut *mut crate::ctypes::c_char,
        headerSize: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpReadData(
        reqId: crate::ctypes::c_int,
        data: *mut crate::ctypes::c_void,
        size: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpAddRequestHeader(
        id: crate::ctypes::c_int,
        name: *const crate::ctypes::c_char,
        value: *const crate::ctypes::c_char,
        mode: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpRemoveRequestHeader(
        id: crate::ctypes::c_int,
        name: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpParseResponseHeader(
        header: *const crate::ctypes::c_char,
        headerLen: crate::ctypes::c_uint,
        fieldStr: *const crate::ctypes::c_char,
        fieldValue: *mut *const crate::ctypes::c_char,
        valueLen: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpParseStatusLine(
        statusLine: *const crate::ctypes::c_char,
        lineLen: crate::ctypes::c_uint,
        httpMajorVer: *mut crate::ctypes::c_int,
        httpMinorVer: *mut crate::ctypes::c_int,
        responseCode: *mut crate::ctypes::c_int,
        reasonPhrase: *mut *const crate::ctypes::c_char,
        phraseLen: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpCreateTemplate(
        userAgent: *const crate::ctypes::c_char,
        httpVer: crate::ctypes::c_int,
        autoProxyConf: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpDeleteTemplate(tmplId: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpCreateConnection(
        tmplId: crate::ctypes::c_int,
        serverName: *const crate::ctypes::c_char,
        scheme: *const crate::ctypes::c_char,
        port: crate::ctypes::c_ushort,
        enableKeepalive: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpCreateConnectionWithURL(
        tmplId: crate::ctypes::c_int,
        url: *const crate::ctypes::c_char,
        enableKeepalive: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpDeleteConnection(connId: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpCreateRequest(
        connId: crate::ctypes::c_int,
        method: crate::ctypes::c_int,
        path: *const crate::ctypes::c_char,
        contentLength: crate::ctypes::c_ulonglong,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpCreateRequestWithURL(
        connId: crate::ctypes::c_int,
        method: crate::ctypes::c_int,
        url: *const crate::ctypes::c_char,
        contentLength: crate::ctypes::c_ulonglong,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpDeleteRequest(reqId: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetResponseHeaderMaxSize(
        id: crate::ctypes::c_int,
        headerSize: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetRequestContentLength(
        id: crate::ctypes::c_int,
        contentLength: crate::ctypes::c_ulonglong,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpUriEscape(
        out: *mut crate::ctypes::c_char,
        require: *mut crate::ctypes::c_uint,
        prepare: crate::ctypes::c_uint,
        in_: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpUriUnescape(
        out: *mut crate::ctypes::c_char,
        require: *mut crate::ctypes::c_uint,
        prepare: crate::ctypes::c_uint,
        in_: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpUriParse(
        out: *mut SceHttpUriElement,
        srcUrl: *const crate::ctypes::c_char,
        pool: *mut crate::ctypes::c_void,
        require: *mut crate::ctypes::c_uint,
        prepare: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpUriBuild(
        out: *mut crate::ctypes::c_char,
        require: *mut crate::ctypes::c_uint,
        prepare: crate::ctypes::c_uint,
        srcElement: *const SceHttpUriElement,
        option: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpUriMerge(
        mergedUrl: *mut crate::ctypes::c_char,
        url: *const crate::ctypes::c_char,
        relativeUrl: *const crate::ctypes::c_char,
        require: *mut crate::ctypes::c_uint,
        prepare: crate::ctypes::c_uint,
        option: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpUriSweepPath(
        dst: *mut crate::ctypes::c_char,
        src: *const crate::ctypes::c_char,
        srcSize: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpsLoadCert(
        caCertNum: crate::ctypes::c_int,
        caList: *mut *const SceHttpsData,
        cert: *const SceHttpsData,
        privKey: *const SceHttpsData,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpsUnloadCert() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpsEnableOption(sslFlags: crate::ctypes::c_uint) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpsDisableOption(sslFlags: crate::ctypes::c_uint) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpsGetSslError(
        id: crate::ctypes::c_int,
        errNum: *mut crate::ctypes::c_int,
        detail: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpsSetSslCallback(
        id: crate::ctypes::c_int,
        cbfunc: SceHttpsCallback,
        userArg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpsGetCaList(caList: *mut SceHttpsCaList) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpsFreeCaList(caList: *mut SceHttpsCaList) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetCookieEnabled(
        id: crate::ctypes::c_int,
        enable: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpGetCookieEnabled(
        id: crate::ctypes::c_int,
        enable: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpGetCookie(
        url: *const crate::ctypes::c_char,
        cookie: *mut crate::ctypes::c_char,
        cookieLength: *mut crate::ctypes::c_uint,
        prepare: crate::ctypes::c_uint,
        secure: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpAddCookie(
        url: *const crate::ctypes::c_char,
        cookie: *const crate::ctypes::c_char,
        cookieLength: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetCookieRecvCallback(
        id: crate::ctypes::c_int,
        cbfunc: SceHttpCookieRecvCallback,
        userArg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceHttpSetCookieSendCallback(
        id: crate::ctypes::c_int,
        cbfunc: SceHttpCookieSendCallback,
        userArg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
