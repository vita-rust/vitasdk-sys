/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::rtc::*;
#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGpsDeviceInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGpsSatelliteData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGpsPositionData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGpsStatus {
    _unused: [u8; 0],
}
extern "C" {
    pub fn _sceGpsClose() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceGpsGetData(
        pos: *mut SceGpsPositionData,
        sat: *mut SceGpsSatelliteData,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceGpsGetDeviceInfo(dev_info: *mut SceGpsDeviceInfo) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceGpsGetState(state: *mut SceGpsStatus) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceGpsIoctl(
        ioctl_command: SceUInt32,
        arg: *mut SceVoid,
        arg_size: SceSize,
        a4: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceGpsIsDevice() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceGpsOpen(cbid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceGpsResumeCallback() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceGpsSelectDevice(device_type: SceUInt32) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceGpsStart(mode: crate::ctypes::c_uint) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceGpsStop() -> crate::ctypes::c_int;
}
