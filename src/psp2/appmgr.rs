/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2::apputil::*;
#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_APPMGR_MAX_APP_NAME_LENGTH: u32 = 31;
pub mod SceAppMgrErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_APPMGR_ERROR_BUSY: Type = 2155880448;
    pub const SCE_APPMGR_ERROR_STATE: Type = 2155880467;
    pub const SCE_APPMGR_ERROR_NULL_POINTER: Type = 2155880470;
    pub const SCE_APPMGR_ERROR_INVALID: Type = 2155880474;
    pub const SCE_APPMGR_ERROR_TOO_LONG_ARGV: Type = 2155880477;
    pub const SCE_APPMGR_ERROR_INVALID_SELF_PATH: Type = 2155880478;
    pub const SCE_APPMGR_ERROR_NOEXEC: Type = 2155880479;
    pub const SCE_APPMGR_ERROR_BGM_PORT_BUSY: Type = 2155884544;
}
pub mod SceAppMgrSystemEventType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_APPMGR_SYSTEMEVENT_ON_RESUME: Type = 268435459;
    pub const SCE_APPMGR_SYSTEMEVENT_ON_STORE_PURCHASE: Type = 268435460;
    pub const SCE_APPMGR_SYSTEMEVENT_ON_NP_MESSAGE_ARRIVED: Type = 268435461;
    pub const SCE_APPMGR_SYSTEMEVENT_ON_STORE_REDEMPTION: Type = 268435462;
}
pub mod SceAppMgrInfoBarVisibility {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_APPMGR_INFOBAR_VISIBILITY_INVISIBLE: Type = 0;
    pub const SCE_APPMGR_INFOBAR_VISIBILITY_VISIBLE: Type = 1;
}
pub mod SceAppMgrInfoBarColor {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_APPMGR_INFOBAR_COLOR_BLACK: Type = 0;
    pub const SCE_APPMGR_INFOBAR_COLOR_WHITE: Type = 1;
}
pub mod SceAppMgrInfoBarTransparency {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_APPMGR_INFOBAR_TRANSPARENCY_OPAQUE: Type = 0;
    pub const SCE_APPMGR_INFOBAR_TRANSPARENCY_TRANSLUCENT: Type = 1;
}
pub mod SceAppMgrApplicationMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_APPMGR_APPLICATION_MODE_A: Type = 2;
    pub const SCE_APPMGR_APPLICATION_MODE_B: Type = 3;
    pub const SCE_APPMGR_APPLICATION_MODE_C: Type = 4;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAppMgrSystemEvent {
    pub systemEvent: crate::ctypes::c_int,
    pub reserved: [u8; 60usize],
}
#[repr(C)]
pub struct SceAppMgrSaveDataData {
    pub size: crate::ctypes::c_int,
    pub slotId: crate::ctypes::c_uint,
    pub slotParam: *mut SceAppUtilSaveDataSlotParam,
    pub reserved: [u8; 32usize],
    pub files: *mut SceAppUtilSaveDataFile,
    pub fileNum: crate::ctypes::c_int,
    pub mountPoint: SceAppUtilSaveDataMountPoint,
    pub requiredSizeKB: *mut crate::ctypes::c_uint,
    pub unk_0x48: crate::ctypes::c_int,
}
#[repr(C)]
pub struct SceAppMgrSaveDataDataDelete {
    pub size: crate::ctypes::c_int,
    pub slotId: crate::ctypes::c_uint,
    pub slotParam: *mut SceAppUtilSaveDataSlotParam,
    pub reserved: [u8; 32usize],
    pub files: *mut SceAppUtilSaveDataFile,
    pub fileNum: crate::ctypes::c_int,
    pub mountPoint: SceAppUtilSaveDataMountPoint,
}
#[repr(C)]
pub struct SceAppMgrSaveDataSlot {
    pub size: crate::ctypes::c_int,
    pub slotId: crate::ctypes::c_uint,
    pub slotParam: SceAppUtilSaveDataSlotParam,
    pub reserved: [u8; 116usize],
    pub mountPoint: SceAppUtilSaveDataMountPoint,
    pub reserved2: [u8; 64usize],
}
#[repr(C)]
pub struct SceAppMgrSaveDataSlotDelete {
    pub size: crate::ctypes::c_int,
    pub slotId: crate::ctypes::c_uint,
    pub mountPoint: SceAppUtilSaveDataMountPoint,
}
#[repr(C)]
pub struct SceAppMgrAppState {
    pub systemEventNum: SceUInt32,
    pub appEventNum: SceUInt32,
    pub isSystemUiOverlaid: SceBool,
    pub reserved: [SceUInt8; 116usize],
}
#[repr(C)]
pub struct SceAppMgrBudgetInfo {
    pub size: crate::ctypes::c_int,
    pub app_mode: crate::ctypes::c_int,
    pub unk0: crate::ctypes::c_int,
    pub total_user_rw_mem: crate::ctypes::c_uint,
    pub free_user_rw: crate::ctypes::c_uint,
    pub extra_mem_allowed: SceBool,
    pub unk1: crate::ctypes::c_int,
    pub total_extra_mem: crate::ctypes::c_uint,
    pub free_extra_mem: crate::ctypes::c_uint,
    pub unk2: [crate::ctypes::c_int; 2usize],
    pub total_phycont_mem: crate::ctypes::c_uint,
    pub free_phycont_mem: crate::ctypes::c_uint,
    pub unk3: [crate::ctypes::c_int; 10usize],
    pub total_cdram_mem: crate::ctypes::c_uint,
    pub free_cdram_mem: crate::ctypes::c_uint,
    pub reserved: [crate::ctypes::c_int; 9usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAppMgrExecOptParam {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAppMgrLaunchAppOptParam {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAppMgrLoadExecOptParam {
    pub reserved: [crate::ctypes::c_int; 64usize],
}
extern "C" {
    pub fn sceAppMgrSaveDataDataSave(data: *mut SceAppMgrSaveDataData) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrSaveDataDataRemove(
        data: *mut SceAppMgrSaveDataDataDelete,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrSaveDataSlotCreate(data: *mut SceAppMgrSaveDataSlot) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrSaveDataSlotGetParam(data: *mut SceAppMgrSaveDataSlot) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrSaveDataSlotSetParam(data: *mut SceAppMgrSaveDataSlot) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrSaveDataSlotDelete(
        data: *mut SceAppMgrSaveDataSlotDelete,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrGetIdByName(
        pid: *mut SceUID,
        name: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrGetNameById(
        pid: SceUID,
        name: *mut crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrDestroyOtherApp() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrDestroyAppByName(name: *const crate::ctypes::c_char) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrDestroyAppByAppId(appId: SceInt32) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrGetProcessIdByAppIdForShell(appId: SceInt32) -> SceUID;
}
extern "C" {
    pub fn sceAppMgrGetRunningAppIdListForShell(
        appIds: *mut SceInt32,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceAppMgrGetAppState(
        appState: *mut SceAppMgrAppState,
        len: SceSize,
        version: u32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrReceiveSystemEvent(
        systemEvent: *mut SceAppMgrSystemEvent,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrGetAppParam(param: *mut crate::ctypes::c_char) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrAcquireBgmPort() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrReleaseBgmPort() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrSetInfobarState(
        visibility: SceAppMgrInfoBarVisibility::Type,
        color: SceAppMgrInfoBarColor::Type,
        transparency: SceAppMgrInfoBarTransparency::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrLoadExec(
        appPath: *const crate::ctypes::c_char,
        argv: *const *mut crate::ctypes::c_char,
        optParam: *const SceAppMgrExecOptParam,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrLaunchAppByUri(
        flags: crate::ctypes::c_int,
        uri: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrLaunchAppByName2(
        name: *const crate::ctypes::c_char,
        param: *const crate::ctypes::c_char,
        optParam: *mut SceAppMgrLaunchAppOptParam,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrLaunchAppByName(
        flags: crate::ctypes::c_int,
        name: *const crate::ctypes::c_char,
        param: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrLaunchAppByName2ForShell(
        name: *const crate::ctypes::c_char,
        param: *const crate::ctypes::c_char,
        optParam: *mut SceAppMgrLaunchAppOptParam,
    ) -> SceUID;
}
extern "C" {
    pub fn sceAppMgrGameDataMount(
        app_path: *const crate::ctypes::c_char,
        patch_path: *const crate::ctypes::c_char,
        rif_path: *const crate::ctypes::c_char,
        mount_point: *mut crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrAppDataMount(
        id: crate::ctypes::c_int,
        mount_point: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrAppDataMountById(
        id: crate::ctypes::c_int,
        titleid: *const crate::ctypes::c_char,
        mount_point: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrAppParamGetString(
        pid: crate::ctypes::c_int,
        param: crate::ctypes::c_int,
        string: *mut crate::ctypes::c_char,
        length: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrGetDevInfo(
        dev: *const crate::ctypes::c_char,
        max_size: *mut u64,
        free_size: *mut u64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrMmsMount(
        id: crate::ctypes::c_int,
        mount_point: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrPspSaveDataRootMount(
        mount_point: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrWorkDirMount(
        id: crate::ctypes::c_int,
        mount_point: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrWorkDirMountById(
        id: crate::ctypes::c_int,
        titleid: *const crate::ctypes::c_char,
        mount_point: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrUmount(mount_point: *const crate::ctypes::c_char) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrConvertVs0UserDrivePath(
        path: *mut crate::ctypes::c_char,
        mount_point: *mut crate::ctypes::c_char,
        unk: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrGetRawPath(
        path: *mut crate::ctypes::c_char,
        resolved_path: *mut crate::ctypes::c_char,
        resolved_path_size: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrGetRawPathOfApp0ByAppIdForShell(
        appId: crate::ctypes::c_int,
        resolved_path: *mut crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAppMgrGetBudgetInfo(info: *mut SceAppMgrBudgetInfo) -> crate::ctypes::c_int;
}
#[repr(C)]
pub struct SceAppMgrCoredumpState {
    pub pid: SceUID,
    pub process_state: crate::ctypes::c_int,
    pub progress: crate::ctypes::c_int,
    pub is_coredump_completed: crate::ctypes::c_int,
    pub data_0x10: crate::ctypes::c_int,
    pub path_len: SceSize,
    pub path: [crate::ctypes::c_char; 1024usize],
    pub data_0x418: crate::ctypes::c_int,
    pub data_0x41C: crate::ctypes::c_int,
    pub data_0x420: crate::ctypes::c_int,
    pub data_0x424: crate::ctypes::c_int,
}
extern "C" {
    pub fn sceAppMgrGetCoredumpStateForShell(
        state: *mut SceAppMgrCoredumpState,
    ) -> crate::ctypes::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAppMgrDrmOpenParam {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAppMgrAppInfo {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sceAppMgrDrmOpen(param: *const SceAppMgrDrmOpenParam) -> SceInt32;
}
extern "C" {
    pub fn sceAppMgrGetAppInfo(
        unk: *const crate::ctypes::c_char,
        state: *mut SceAppMgrAppState,
    ) -> SceInt32;
}
