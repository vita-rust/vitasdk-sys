/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;

pub const SCE_AUDIO_MIN_LEN: u32 = 64;
pub const SCE_AUDIO_MAX_LEN: u32 = 65472;
pub const SCE_AUDIO_OUT_MAX_VOL: u32 = 32768;
pub const SCE_AUDIO_VOLUME_0DB: u32 = 32768;
pub mod SceAudioOutErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_AUDIO_OUT_ERROR_NOT_OPENED: Type = 2149974017;
    pub const SCE_AUDIO_OUT_ERROR_BUSY: Type = 2149974018;
    pub const SCE_AUDIO_OUT_ERROR_INVALID_PORT: Type = 2149974019;
    pub const SCE_AUDIO_OUT_ERROR_INVALID_POINTER: Type = 2149974020;
    pub const SCE_AUDIO_OUT_ERROR_PORT_FULL: Type = 2149974021;
    pub const SCE_AUDIO_OUT_ERROR_INVALID_SIZE: Type = 2149974022;
    pub const SCE_AUDIO_OUT_ERROR_INVALID_FORMAT: Type = 2149974023;
    pub const SCE_AUDIO_OUT_ERROR_INVALID_SAMPLE_FREQ: Type = 2149974024;
    pub const SCE_AUDIO_OUT_ERROR_INVALID_VOLUME: Type = 2149974025;
    pub const SCE_AUDIO_OUT_ERROR_INVALID_PORT_TYPE: Type = 2149974026;
    pub const SCE_AUDIO_OUT_ERROR_INVALID_FX_TYPE: Type = 2149974027;
    pub const SCE_AUDIO_OUT_ERROR_INVALID_CONF_TYPE: Type = 2149974028;
    pub const SCE_AUDIO_OUT_ERROR_OUT_OF_MEMORY: Type = 2149974029;
}
pub mod SceAudioOutParam {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_AUDIO_OUT_PARAM_FORMAT_S16_MONO: Type = 0;
    pub const SCE_AUDIO_OUT_PARAM_FORMAT_S16_STEREO: Type = 1;
}
pub mod SceAudioOutPortType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_AUDIO_OUT_PORT_TYPE_MAIN: Type = 0;
    pub const SCE_AUDIO_OUT_PORT_TYPE_BGM: Type = 1;
    pub const SCE_AUDIO_OUT_PORT_TYPE_VOICE: Type = 2;
}
pub mod SceAudioOutMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_AUDIO_OUT_MODE_MONO: Type = 0;
    pub const SCE_AUDIO_OUT_MODE_STEREO: Type = 1;
}
pub mod SceAudioOutChannelFlag {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_AUDIO_VOLUME_FLAG_L_CH: Type = 1;
    pub const SCE_AUDIO_VOLUME_FLAG_R_CH: Type = 2;
}
pub mod SceAudioOutConfigType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_AUDIO_OUT_CONFIG_TYPE_LEN: Type = 0;
    pub const SCE_AUDIO_OUT_CONFIG_TYPE_FREQ: Type = 1;
    pub const SCE_AUDIO_OUT_CONFIG_TYPE_MODE: Type = 2;
}
pub mod SceAudioOutAlcMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_AUDIO_ALC_OFF: Type = 0;
    pub const SCE_AUDIO_ALC_MODE1: Type = 1;
    pub const SCE_AUDIO_ALC_MODE_MAX: Type = 2;
}
extern "C" {
    pub fn sceAudioOutOpenPort(
        type_: SceAudioOutPortType::Type,
        len: crate::ctypes::c_int,
        freq: crate::ctypes::c_int,
        mode: SceAudioOutMode::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAudioOutReleasePort(port: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAudioOutOutput(
        port: crate::ctypes::c_int,
        buf: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAudioOutSetVolume(
        port: crate::ctypes::c_int,
        ch: SceAudioOutChannelFlag::Type,
        vol: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAudioOutSetConfig(
        port: crate::ctypes::c_int,
        len: SceSize,
        freq: crate::ctypes::c_int,
        mode: SceAudioOutMode::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAudioOutGetConfig(
        port: crate::ctypes::c_int,
        type_: SceAudioOutConfigType::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAudioOutSetAlcMode(mode: SceAudioOutAlcMode::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAudioOutGetRestSample(port: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAudioOutGetAdopt(type_: SceAudioOutPortType::Type) -> crate::ctypes::c_int;
}
