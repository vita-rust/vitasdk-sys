/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::kernel::rtc::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub type time_t = crate::ctypes::c_long;
extern "C" {
    pub fn sceRtcGetTickResolution() -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceRtcGetCurrentTick(tick: *mut SceRtcTick) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetCurrentClock(
        time: *mut SceDateTime,
        time_zone: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetCurrentClockLocalTime(time: *mut SceDateTime) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetCurrentNetworkTick(tick: *mut SceRtcTick) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcConvertUtcToLocalTime(
        utc: *const SceRtcTick,
        local_time: *mut SceRtcTick,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcConvertLocalTimeToUtc(
        local_time: *const SceRtcTick,
        utc: *mut SceRtcTick,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcIsLeapYear(year: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcCheckValid(time: *const SceDateTime) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetDaysInMonth(
        year: crate::ctypes::c_int,
        month: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetDayOfWeek(
        year: crate::ctypes::c_int,
        month: crate::ctypes::c_int,
        day: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcSetTime_t(time: *mut SceDateTime, iTime: time_t) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcSetTime64_t(time: *mut SceDateTime, ullTime: SceUInt64) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetTime_t(time: *const SceDateTime, piTime: *mut time_t) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetTime64_t(
        time: *const SceDateTime,
        pullTime: *mut SceUInt64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcSetDosTime(
        time: *mut SceDateTime,
        uiDosTime: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetDosTime(
        time: *const SceDateTime,
        puiDosTime: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcSetWin32FileTime(
        time: *mut SceDateTime,
        ulWin32Time: SceUInt64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetWin32FileTime(
        time: *const SceDateTime,
        ulWin32Time: *mut SceUInt64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcSetTick(time: *mut SceDateTime, tick: *const SceRtcTick) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetTick(time: *const SceDateTime, tick: *mut SceRtcTick) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcCompareTick(
        pTick1: *const SceRtcTick,
        pTick2: *const SceRtcTick,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcTickAddTicks(
        pTick0: *mut SceRtcTick,
        pTick1: *const SceRtcTick,
        lAdd: SceLong64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcTickAddMicroseconds(
        pTick0: *mut SceRtcTick,
        pTick1: *const SceRtcTick,
        lAdd: SceLong64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcTickAddSeconds(
        pTick0: *mut SceRtcTick,
        pTick1: *const SceRtcTick,
        lAdd: SceLong64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcTickAddMinutes(
        pTick0: *mut SceRtcTick,
        pTick1: *const SceRtcTick,
        lAdd: SceLong64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcTickAddHours(
        pTick0: *mut SceRtcTick,
        pTick1: *const SceRtcTick,
        lAdd: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcTickAddDays(
        pTick0: *mut SceRtcTick,
        pTick1: *const SceRtcTick,
        lAdd: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcTickAddWeeks(
        pTick0: *mut SceRtcTick,
        pTick1: *const SceRtcTick,
        lAdd: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcTickAddMonths(
        pTick0: *mut SceRtcTick,
        pTick1: *const SceRtcTick,
        lAdd: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcTickAddYears(
        pTick0: *mut SceRtcTick,
        pTick1: *const SceRtcTick,
        lAdd: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcFormatRFC2822(
        pszDateTime: *mut crate::ctypes::c_char,
        utc: *const SceRtcTick,
        iTimeZoneMinutes: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcFormatRFC2822LocalTime(
        pszDateTime: *mut crate::ctypes::c_char,
        utc: *const SceRtcTick,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcFormatRFC3339(
        pszDateTime: *mut crate::ctypes::c_char,
        utc: *const SceRtcTick,
        iTimeZoneMinutes: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcFormatRFC3339LocalTime(
        pszDateTime: *mut crate::ctypes::c_char,
        utc: *const SceRtcTick,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcParseDateTime(
        utc: *mut SceRtcTick,
        pszDateTime: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcParseRFC3339(
        utc: *mut SceRtcTick,
        pszDateTime: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceRtcConvertLocalTimeToUtc(
        localtime: *const SceRtcTick,
        utc: *mut SceRtcTick,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceRtcConvertUtcToLocalTime(
        utc: *const SceRtcTick,
        localtime: *mut SceRtcTick,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceRtcFormatRFC2822(
        datetime: *mut crate::ctypes::c_char,
        utc: *const SceRtcTick,
        offset: crate::ctypes::c_int,
        a4: *mut SceUInt64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceRtcFormatRFC2822LocalTime(
        datetime: *mut crate::ctypes::c_char,
        utc: *const SceRtcTick,
        a3: *mut SceUInt64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceRtcFormatRFC3339(
        datetime: *mut crate::ctypes::c_char,
        utc: *const SceRtcTick,
        offset: crate::ctypes::c_int,
        a4: *mut SceUInt64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceRtcFormatRFC3339LocalTime(
        datetime: *mut crate::ctypes::c_char,
        utc: *const SceRtcTick,
        a3: *mut SceUInt64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetCurrentAdNetworkTick(tick: *mut SceRtcTick) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetCurrentDebugNetworkTick(tick: *mut SceRtcTick) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetCurrentGpsTick(tick: *mut SceRtcTick) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetCurrentRetainedNetworkTick(tick: *mut SceRtcTick) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetLastAdjustedTick(tick: *mut SceRtcTick) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetLastReincarnatedTick(tick: *mut SceRtcTick) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceRtcGetAccumulativeTime() -> SceULong64;
}
