/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::audiodec::*;
#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_ATRAC_ALIGNMENT_SIZE: u32 = 256;
pub const SCE_ATRAC_TYPE_AT9: u32 = 8195;
pub const SCE_ATRAC_AT9_MAX_TOTAL_CH: u32 = 16;
pub const SCE_ATRAC_WORD_LENGTH_16BITS: u32 = 16;
pub const SCE_ATRAC_AT9_MAX_CH_IN_DECODER: u32 = 2;
pub const SCE_ATRAC_AT9_MAX_FRAME_SAMPLES: u32 = 256;
pub const SCE_ATRAC_MAX_OUTPUT_SAMPLES: u32 = 2048;
pub const SCE_ATRAC_AT9_MAX_OUTPUT_FRAMES: u32 = 8;
pub const SCE_ATRAC_AT9_MIN_LOOP_SAMPLES: u32 = 3072;
pub const SCE_ATRAC_INFINITE_LOOP_NUM: i32 = -1;
pub const SCE_ATRAC_INFINITE_SAMPLES: i32 = -1;
pub mod SceAtracErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_ATRAC_ERROR_INVALID_POINTER: Type = 2153971712;
    pub const SCE_ATRAC_ERROR_INVALID_SIZE: Type = 2153971713;
    pub const SCE_ATRAC_ERROR_INVALID_WORD_LENGTH: Type = 2153971714;
    pub const SCE_ATRAC_ERROR_INVALID_TYPE: Type = 2153971715;
    pub const SCE_ATRAC_ERROR_INVALID_TOTAL_CH: Type = 2153971716;
    pub const SCE_ATRAC_ERROR_INVALID_ALIGNMENT: Type = 2153971717;
    pub const SCE_ATRAC_ERROR_ALREADY_CREATED: Type = 2153971718;
    pub const SCE_ATRAC_ERROR_NOT_CREATED: Type = 2153971719;
    pub const SCE_ATRAC_ERROR_SHORTAGE_OF_CH: Type = 2153971720;
    pub const SCE_ATRAC_ERROR_UNSUPPORTED_DATA: Type = 2153971721;
    pub const SCE_ATRAC_ERROR_INVALID_DATA: Type = 2153971722;
    pub const SCE_ATRAC_ERROR_READ_SIZE_IS_TOO_SMALL: Type = 2153971723;
    pub const SCE_ATRAC_ERROR_INVALID_HANDLE: Type = 2153971724;
    pub const SCE_ATRAC_ERROR_READ_SIZE_OVER_BUFFER: Type = 2153971725;
    pub const SCE_ATRAC_ERROR_MAIN_BUFFER_SIZE_IS_TOO_SMALL: Type = 2153971726;
    pub const SCE_ATRAC_ERROR_SUB_BUFFER_SIZE_IS_TOO_SMALL: Type = 2153971727;
    pub const SCE_ATRAC_ERROR_DATA_SHORTAGE_IN_BUFFER: Type = 2153971728;
    pub const SCE_ATRAC_ERROR_ALL_DATA_WAS_DECODED: Type = 2153971729;
    pub const SCE_ATRAC_ERROR_INVALID_MAX_OUTPUT_SAMPLES: Type = 2153971730;
    pub const SCE_ATRAC_ERROR_ADDED_DATA_IS_TOO_BIG: Type = 2153971731;
    pub const SCE_ATRAC_ERROR_NEED_SUB_BUFFER: Type = 2153971732;
    pub const SCE_ATRAC_ERROR_INVALID_SAMPLE: Type = 2153971733;
    pub const SCE_ATRAC_ERROR_NO_NEED_SUB_BUFFER: Type = 2153971734;
    pub const SCE_ATRAC_ERROR_INVALID_LOOP_STATUS: Type = 2153971735;
    pub const SCE_ATRAC_ERROR_REMAIN_VALID_HANDLE: Type = 2153971736;
    pub const SCE_ATRAC_ERROR_INVALID_LOOP_NUM: Type = 2153971760;
}
pub mod SceAtracDecoderStatus {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_ATRAC_DECODER_STATUS_ALL_DATA_WAS_DECODED: Type = 1;
    pub const SCE_ATRAC_DECODER_STATUS_ALL_DATA_IS_ON_MEMORY: Type = 2;
    pub const SCE_ATRAC_DECODER_STATUS_NONLOOP_PART_IS_ON_MEMORY: Type = 4;
    pub const SCE_ATRAC_DECODER_STATUS_LOOP_PART_IS_ON_MEMORY: Type = 8;
}
pub mod SceAtracLoopStatus {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_ATRAC_LOOP_STATUS_NON_RESETABLE_PART: Type = 0;
    pub const SCE_ATRAC_LOOP_STATUS_RESETABLE_PART: Type = 1;
}
#[repr(C)]
pub struct SceAtracDecoderGroup {
    pub size: SceUInt32,
    pub wordLength: SceUInt32,
    pub totalCh: SceUInt32,
}
#[repr(C)]
pub struct SceAtracContentInfo {
    pub size: SceUInt32,
    pub atracType: SceUInt32,
    pub channel: SceUInt32,
    pub samplingRate: SceUInt32,
    pub endSample: SceInt32,
    pub loopStartSample: SceInt32,
    pub loopEndSample: SceInt32,
    pub bitRate: SceUInt32,
    pub fixedEncBlockSize: SceUInt32,
    pub fixedEncBlockSample: SceUInt32,
    pub frameSample: SceUInt32,
    pub loopBlockOffset: SceUInt32,
    pub loopBlockSize: SceUInt32,
}
#[repr(C)]
pub struct SceAtracStreamInfo {
    pub size: SceUInt32,
    pub pWritePosition: *mut SceUChar8,
    pub readPosition: SceUInt32,
    pub writableSize: SceUInt32,
}
extern "C" {
    pub fn sceAtracQueryDecoderGroupMemSize(
        atracType: SceUInt32,
        pDecoderGroup: *const SceAtracDecoderGroup,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracCreateDecoderGroup(
        atracType: SceUInt32,
        pDecoderGroup: *const SceAtracDecoderGroup,
        pvWorkMem: *mut crate::ctypes::c_void,
        initAudiodecFlag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracDeleteDecoderGroup(
        atracType: SceUInt32,
        termAudiodecFlag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetDecoderGroupInfo(
        atracType: SceUInt32,
        pCreatedDecoder: *mut SceAtracDecoderGroup,
        pAvailableDecoder: *mut SceAtracDecoderGroup,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracSetDataAndAcquireHandle(
        pucBuffer: *mut SceUChar8,
        uiReadSize: SceUInt32,
        uiBufferSize: SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracReleaseHandle(atracHandle: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracDecode(
        atracHandle: crate::ctypes::c_int,
        pOutputBuffer: *mut crate::ctypes::c_void,
        pOutputSamples: *mut SceUInt32,
        pDecoderStatus: *mut SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetStreamInfo(
        atracHandle: crate::ctypes::c_int,
        pStreamInfo: *mut SceAtracStreamInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracAddStreamData(
        atracHandle: crate::ctypes::c_int,
        addSize: SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracIsSubBufferNeeded(atracHandle: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetSubBufferInfo(
        atracHandle: crate::ctypes::c_int,
        pReadPosition: *mut SceUInt32,
        pMinSubBufferSize: *mut SceUInt32,
        pDataSize: *mut SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracSetSubBuffer(
        atracHandle: crate::ctypes::c_int,
        pSubBuffer: *mut SceUChar8,
        subBufferSize: SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracSetLoopNum(
        atracHandle: crate::ctypes::c_int,
        loopNum: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracSetOutputSamples(
        atracHandle: crate::ctypes::c_int,
        outputSamples: SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracResetNextOutputPosition(
        atracHandle: crate::ctypes::c_int,
        resetSample: SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetContentInfo(
        atracHandle: crate::ctypes::c_int,
        pContentInfo: *mut SceAtracContentInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetLoopInfo(
        atracHandle: crate::ctypes::c_int,
        pLoopNum: *mut crate::ctypes::c_int,
        pLoopStatus: *mut SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetOutputSamples(
        atracHandle: crate::ctypes::c_int,
        pOutputSamples: *mut SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetNextOutputPosition(
        atracHandle: crate::ctypes::c_int,
        pNextOutputSample: *mut SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetRemainSamples(
        atracHandle: crate::ctypes::c_int,
        pRemainSamples: *mut SceLong64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetOutputableSamples(
        atracHandle: crate::ctypes::c_int,
        pOutputableSamples: *mut SceLong64,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetDecoderStatus(
        atracHandle: crate::ctypes::c_int,
        pDecoderStatus: *mut SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetVacantSize(
        atracHandle: crate::ctypes::c_int,
        pVacantSize: *mut SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAtracGetInternalError(
        atracHandle: crate::ctypes::c_int,
        pInternalError: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
