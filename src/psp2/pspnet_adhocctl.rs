/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::net::net::*;
#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_NET_ADHOCCTL_ADHOCID_LEN: u32 = 9;
pub const SCE_NET_ADHOCCTL_GROUPNAME_LEN: u32 = 8;
pub const SCE_NET_ADHOCCTL_NICKNAME_LEN: u32 = 128;
pub const SCE_NET_ADHOCCTL_BSSID_LEN: u32 = 6;
pub mod ScePspnetAdhocctlErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_ERROR_NET_ADHOCCTL_INVALID_ARG: Type = 2151746308;
    pub const SCE_ERROR_NET_ADHOCCTL_ALREADY_INITIALIZED: Type = 2151746311;
    pub const SCE_ERROR_NET_ADHOCCTL_NOT_INITIALIZED: Type = 2151746312;
}
pub mod ScePspnetAdhocctlAdhocType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_ADHOCCTL_ADHOCTYPE_PRODUCT_ID: Type = 0;
    pub const SCE_NET_ADHOCCTL_ADHOCTYPE_RESERVED: Type = 1;
    pub const SCE_NET_ADHOCCTL_ADHOCTYPE_SYSTEM: Type = 2;
}
#[repr(C)]
pub struct SceNetAdhocctlAdhocId {
    pub type_: crate::ctypes::c_int,
    pub data: [SceChar8; 9usize],
    pub padding: [SceUChar8; 3usize],
}
#[repr(C)]
pub struct SceNetAdhocctlGroupName {
    pub data: [SceChar8; 8usize],
}
#[repr(C)]
pub struct SceNetAdhocctlNickname {
    pub data: [SceChar8; 128usize],
}
#[repr(C)]
pub struct SceNetAdhocctlPeerInfo {
    pub next: *mut SceNetAdhocctlPeerInfo,
    pub nickname: SceNetAdhocctlNickname,
    pub macAddr: SceNetEtherAddr,
    pub padding: [SceUChar8; 6usize],
    pub lastRecv: SceUInt64,
}
#[repr(C)]
pub struct SceNetAdhocctlBSSId {
    pub data: [SceUChar8; 6usize],
    pub padding: [SceUChar8; 2usize],
}
#[repr(C)]
pub struct SceNetAdhocctlParameter {
    pub channel: crate::ctypes::c_int,
    pub groupName: SceNetAdhocctlGroupName,
    pub nickname: SceNetAdhocctlNickname,
    pub bssid: SceNetAdhocctlBSSId,
}
extern "C" {
    pub fn sceNetAdhocctlInit(adhocId: *const SceNetAdhocctlAdhocId) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocctlTerm() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocctlGetAdhocId(adhocId: *mut SceNetAdhocctlAdhocId) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocctlGetPeerList(
        buflen: *mut crate::ctypes::c_int,
        buf: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocctlGetPeerInfo(
        addr: *const SceNetEtherAddr,
        size: crate::ctypes::c_int,
        peerInfo: *mut SceNetAdhocctlPeerInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocctlGetAddrByName(
        nickname: *const SceNetAdhocctlNickname,
        buflen: *mut crate::ctypes::c_int,
        buf: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocctlGetNameByAddr(
        addr: *const SceNetEtherAddr,
        nickname: *mut SceNetAdhocctlNickname,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocctlGetParameter(
        parameter: *mut SceNetAdhocctlParameter,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocctlGetEtherAddr(addr: *mut SceNetEtherAddr) -> crate::ctypes::c_int;
}
