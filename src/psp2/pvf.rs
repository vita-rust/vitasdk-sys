/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_PVF_MAX_OPEN: u32 = 18;
pub const SCE_PVF_FONTNAME_LENGTH: u32 = 64;
pub const SCE_PVF_STYLENAME_LENGTH: u32 = 64;
pub const SCE_PVF_FONTFILENAME_LENGTH: u32 = 64;
pub const SCE_PVF_MIN_EMBOLDEN_RATE: f64 = -20.0;
pub const SCE_PVF_MAX_EMBOLDEN_RATE: f64 = 40.0;
pub const SCE_PVF_MIN_SKEW_VALUE: f64 = -30.0;
pub const SCE_PVF_MAX_SKEW_VALUE: f64 = 30.0;
pub mod ScePvfErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_PVF_ERROR_NOMEMORY: Type = 2152071169;
    pub const SCE_PVF_ERROR_LIBID: Type = 2152071170;
    pub const SCE_PVF_ERROR_ARG: Type = 2152071171;
    pub const SCE_PVF_ERROR_NOFILE: Type = 2152071172;
    pub const SCE_PVF_ERROR_FILEOPEN: Type = 2152071173;
    pub const SCE_PVF_ERROR_FILECLOSE: Type = 2152071174;
    pub const SCE_PVF_ERROR_FILEREAD: Type = 2152071175;
    pub const SCE_PVF_ERROR_FILESEEK: Type = 2152071176;
    pub const SCE_PVF_ERROR_TOOMANYOPENED: Type = 2152071177;
    pub const SCE_PVF_ERROR_ILLEGALVERSION: Type = 2152071178;
    pub const SCE_PVF_ERROR_DATAINCONSISTENT: Type = 2152071179;
    pub const SCE_PVF_ERROR_EXPIRED: Type = 2152071180;
    pub const SCE_PVF_ERROR_NOSUPPORT: Type = 2152071182;
    pub const SCE_PVF_ERROR_NOGLYPH: Type = 2152071183;
    pub const SCE_PVF_ERROR_UNKNOWN: Type = 2152136703;
}
pub mod ScePvfFamilyCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_PVF_DEFAULT_FAMILY_CODE: Type = 0;
    pub const SCE_PVF_FAMILY_SANSERIF: Type = 1;
    pub const SCE_PVF_FAMILY_SERIF: Type = 2;
    pub const SCE_PVF_FAMILY_ROUNDED: Type = 3;
}
pub mod ScePvfStyleCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_PVF_DEFAULT_STYLE_CODE: Type = 0;
    pub const SCE_PVF_STYLE_REGULAR: Type = 1;
    pub const SCE_PVF_STYLE_OBLIQUE: Type = 2;
    pub const SCE_PVF_STYLE_NARROW: Type = 3;
    pub const SCE_PVF_STYLE_NARROW_OBLIQUE: Type = 4;
    pub const SCE_PVF_STYLE_BOLD: Type = 5;
    pub const SCE_PVF_STYLE_BOLD_OBLIQUE: Type = 6;
    pub const SCE_PVF_STYLE_BLACK: Type = 7;
    pub const SCE_PVF_STYLE_BLACK_OBLIQUE: Type = 8;
    pub const SCE_PVF_STYLE_L: Type = 101;
    pub const SCE_PVF_STYLE_M: Type = 102;
    pub const SCE_PVF_STYLE_DB: Type = 103;
    pub const SCE_PVF_STYLE_B: Type = 104;
    pub const SCE_PVF_STYLE_EB: Type = 105;
    pub const SCE_PVF_STYLE_UB: Type = 106;
}
pub mod ScePvfImageByfferPixelFormatType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_PVF_USERIMAGE_DIRECT4_L: Type = 0;
    pub const SCE_PVF_USERIMAGE_DIRECT8: Type = 2;
}
pub mod ScePvfLanguageCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_PVF_DEFAULT_LANGUAGE_CODE: Type = 0;
    pub const SCE_PVF_LANGUAGE_J: Type = 1;
    pub const SCE_PVF_LANGUAGE_LATIN: Type = 2;
    pub const SCE_PVF_LANGUAGE_K: Type = 3;
    pub const SCE_PVF_LANGUAGE_C: Type = 4;
    pub const SCE_PVF_LANGUAGE_CJK: Type = 5;
}
pub mod ScePvfRegionCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_PVF_GENERIC_REGION_CODE: Type = 0;
    pub const SCE_PVF_REGION_001: Type = 1;
    pub const SCE_PVF_REGION_002: Type = 2;
    pub const SCE_PVF_REGION_003: Type = 3;
    pub const SCE_PVF_REGION_004: Type = 4;
    pub const SCE_PVF_REGION_005: Type = 5;
    pub const SCE_PVF_REGION_006: Type = 6;
    pub const SCE_PVF_REGION_007: Type = 7;
}
pub mod ScePvfFontVendorCountryCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_PVF_GENERIC_COUNTRY_CODE: Type = 0;
    pub const SCE_PVF_COUNTRY_JAPAN: Type = 1;
    pub const SCE_PVF_COUNTRY_USA: Type = 2;
    pub const SCE_PVF_COUNTRY_KOREA: Type = 3;
}
pub mod ScePvfBoolValue {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_PVF_FALSE: Type = 0;
    pub const SCE_PVF_TRUE: Type = 1;
}
pub mod ScePvfSubstyle {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_PVF_SUBSTYLE_VERTICALLAYOUT: Type = 1;
    pub const SCE_PVF_SUBSTYLE_PSEUDO_BOLD: Type = 2;
    pub const SCE_PVF_SUBSTYLE_PSEUDO_SLANT: Type = 4;
}
pub mod ScePvfDataAccessMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_PVF_FILEBASEDSTREAM: Type = 0;
    pub const SCE_PVF_MEMORYBASEDSTREAM: Type = 1;
}
pub type ScePvfU32 = crate::ctypes::c_uint;
pub type ScePvfS32 = crate::ctypes::c_int;
pub type ScePvfU16 = crate::ctypes::c_ushort;
pub type ScePvfU8 = crate::ctypes::c_uchar;
pub type ScePvfFloat32 = f32;
pub type ScePvfBool = ScePvfU32;
pub type ScePvfLibId = *mut crate::ctypes::c_void;
pub type ScePvfFontId = *mut crate::ctypes::c_void;
pub type ScePvfPointer = *mut crate::ctypes::c_void;
pub type ScePvfHandle = *mut crate::ctypes::c_void;
pub type ScePvfError = ScePvfS32;
pub type ScePvfInt = ScePvfS32;
pub type ScePvfCharCode = ScePvfU16;
pub type ScePvfFontIndex = ScePvfS32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfIrect {
    pub width: ScePvfU16,
    pub height: ScePvfU16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfRect {
    pub width: ScePvfU32,
    pub height: ScePvfU32,
}
pub type ScePvfFontCacheLockFunc =
    ::core::option::Option<unsafe extern "C" fn(cacheInstance: ScePvfPointer) -> ScePvfS32>;
pub type ScePvfFontChcheUnlockFunc =
    ::core::option::Option<unsafe extern "C" fn(cacheInstance: ScePvfPointer) -> ScePvfS32>;
pub type ScePvfFontChcheFindFunc = ::core::option::Option<
    unsafe extern "C" fn(
        chcheInstance: ScePvfPointer,
        hashValue: ScePvfU32,
        key: ScePvfPointer,
        result: *mut ScePvfBool,
    ) -> ScePvfPointer,
>;
pub type ScePvfFontChcheWriteKeyValueToCacheFunc = ::core::option::Option<
    unsafe extern "C" fn(
        cacheInstance: ScePvfPointer,
        chcheSlot: ScePvfPointer,
        key: ScePvfPointer,
    ) -> ScePvfS32,
>;
pub type ScePvfFontChcheWriteToCacheFunc = ::core::option::Option<
    unsafe extern "C" fn(
        cacheInstance: ScePvfPointer,
        cacheSlot: ScePvfPointer,
        data0: ScePvfPointer,
        size: ScePvfInt,
    ) -> ScePvfS32,
>;
pub type ScePvfFontChcheReadFromCacheFunc = ::core::option::Option<
    unsafe extern "C" fn(
        cacheInstance: ScePvfPointer,
        cacheSlot: ScePvfPointer,
        data0: ScePvfPointer,
    ) -> ScePvfS32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfCacheSystemInterface {
    pub cacheInstance: *mut ScePvfPointer,
    pub lockFunc: ScePvfFontCacheLockFunc,
    pub unlockFunc: ScePvfFontChcheUnlockFunc,
    pub findFunc: ScePvfFontChcheFindFunc,
    pub writeKeyValueToCacheFunc: ScePvfFontChcheWriteKeyValueToCacheFunc,
    pub write0ToCacheFunc: ScePvfFontChcheWriteToCacheFunc,
    pub write1ToCacheFunc: ScePvfFontChcheWriteToCacheFunc,
    pub read0FromCacheFunc: ScePvfFontChcheReadFromCacheFunc,
    pub read1FromCacheFunc: ScePvfFontChcheReadFromCacheFunc,
}
pub type ScePvfAllocFunc = ::core::option::Option<
    unsafe extern "C" fn(userData: ScePvfPointer, size: ScePvfU32) -> ScePvfPointer,
>;
pub type ScePvfReallocFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userData: ScePvfPointer,
        old_ptr: ScePvfPointer,
        size: ScePvfU32,
    ) -> ScePvfPointer,
>;
pub type ScePvfFreeFunc =
    ::core::option::Option<unsafe extern "C" fn(userData: ScePvfPointer, ptr: ScePvfPointer)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfInitRec {
    pub userData: ScePvfPointer,
    pub maxNumFonts: ScePvfU32,
    pub cache: *mut ScePvfCacheSystemInterface,
    pub reserved: ScePvfPointer,
    pub allocFunc: ScePvfAllocFunc,
    pub reallocFunc: ScePvfReallocFunc,
    pub freeFunc: ScePvfFreeFunc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfFontStyleInfo {
    pub weight: ScePvfFloat32,
    pub familyCode: ScePvfU16,
    pub style: ScePvfU16,
    pub subStyle: ScePvfU16,
    pub languageCode: ScePvfU16,
    pub regionCode: ScePvfU16,
    pub countryCode: ScePvfU16,
    pub fontName: [ScePvfU8; 64usize],
    pub styleName: [ScePvfU8; 64usize],
    pub fileName: [ScePvfU8; 64usize],
    pub extraAttributes: ScePvfU32,
    pub expireDate: ScePvfU32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfUserImageBufferRec {
    pub pixelFormat: ScePvfU32,
    pub xPos64: ScePvfS32,
    pub yPos64: ScePvfS32,
    pub rect: ScePvfIrect,
    pub bytesPerLine: ScePvfU16,
    pub reserved: ScePvfU16,
    pub buffer: *mut ScePvfU8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfIGlyphMetricsInfo {
    pub width64: ScePvfU32,
    pub height64: ScePvfU32,
    pub ascender64: ScePvfS32,
    pub descender64: ScePvfS32,
    pub horizontalBearingX64: ScePvfS32,
    pub horizontalBearingY64: ScePvfS32,
    pub verticalBearingX64: ScePvfS32,
    pub verticalBearingY64: ScePvfS32,
    pub horizontalAdvance64: ScePvfS32,
    pub verticalAdvance64: ScePvfS32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfCharInfo {
    pub bitmapWidth: ScePvfU32,
    pub bitmapHeight: ScePvfU32,
    pub bitmapPitch: ScePvfU32,
    pub bitmapLeft: ScePvfS32,
    pub bitmapTop: ScePvfS32,
    pub glyphMetrics: ScePvfIGlyphMetricsInfo,
    pub reserved0: [ScePvfU8; 2usize],
    pub reserved1: ScePvfU16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfFGlyphMetricsInfo {
    pub width: ScePvfFloat32,
    pub height: ScePvfFloat32,
    pub ascender: ScePvfFloat32,
    pub descender: ScePvfFloat32,
    pub horizontalBearingX: ScePvfFloat32,
    pub horizontalBearingY: ScePvfFloat32,
    pub verticalBearingX: ScePvfFloat32,
    pub verticalBearingY: ScePvfFloat32,
    pub horizontalAdvance: ScePvfFloat32,
    pub verticalAdvance: ScePvfFloat32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfFontInfo {
    pub maxIGlyphMetrics: ScePvfIGlyphMetricsInfo,
    pub maxFGlyphMetrics: ScePvfFGlyphMetricsInfo,
    pub numChars: ScePvfU32,
    pub fontStyleInfo: ScePvfFontStyleInfo,
    pub reserved: [ScePvfU8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfIKerningInfo {
    pub xOffset64: ScePvfS32,
    pub yOffset64: ScePvfS32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfFKerningInfo {
    pub xOffset: ScePvfFloat32,
    pub yOffset: ScePvfFloat32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfKerningInfo {
    pub iKerningInfo: ScePvfIKerningInfo,
    pub fKerningInfo: ScePvfFKerningInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePvfCacheKey {
    pub keyValue0: crate::ctypes::c_int,
    pub keyValue1: crate::ctypes::c_int,
    pub keyValue2: f32,
    pub keyValue3: f32,
    pub keyValue4: f32,
    pub keyValue5: f32,
    pub keyValue6: f32,
    pub keyValue7: f32,
    pub keyValue8: f32,
}
extern "C" {
    pub fn scePvfNewLib(initParam: *mut ScePvfInitRec, errorCode: *mut ScePvfError) -> ScePvfLibId;
}
extern "C" {
    pub fn scePvfDoneLib(libID: ScePvfLibId) -> ScePvfError;
}
extern "C" {
    pub fn scePvfSetEM(libID: ScePvfLibId, emValue: ScePvfFloat32) -> ScePvfError;
}
extern "C" {
    pub fn scePvfSetResolution(
        libID: ScePvfLibId,
        hResolution: ScePvfFloat32,
        vResolution: ScePvfFloat32,
    ) -> ScePvfError;
}
extern "C" {
    pub fn scePvfGetNumFontList(libID: ScePvfLibId, errorCode: *mut ScePvfError) -> ScePvfInt;
}
extern "C" {
    pub fn scePvfGetFontList(
        libID: ScePvfLibId,
        fontStyleInfo: *mut ScePvfFontStyleInfo,
        arraySize: ScePvfInt,
    ) -> ScePvfError;
}
extern "C" {
    pub fn scePvfFindOptimumFont(
        libID: ScePvfLibId,
        fontStyleInfo: *mut ScePvfFontStyleInfo,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFontIndex;
}
extern "C" {
    pub fn scePvfFindFont(
        libID: ScePvfLibId,
        fontStyleInfo: *mut ScePvfFontStyleInfo,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFontIndex;
}
extern "C" {
    pub fn scePvfGetFontInfoByIndexNumber(
        libID: ScePvfLibId,
        fontStyleInfo: *mut ScePvfFontStyleInfo,
        fontIndex: ScePvfFontIndex,
    ) -> ScePvfError;
}
extern "C" {
    pub fn scePvfOpen(
        libID: ScePvfLibId,
        fontIndex: ScePvfFontIndex,
        mode: ScePvfU32,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFontId;
}
extern "C" {
    pub fn scePvfOpenUserFile(
        libID: ScePvfLibId,
        filename: ScePvfPointer,
        mode: ScePvfU32,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFontId;
}
extern "C" {
    pub fn scePvfOpenUserFileWithSubfontIndex(
        libID: ScePvfLibId,
        filename: ScePvfPointer,
        mode: ScePvfU32,
        subFontIndex: ScePvfU32,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFontId;
}
extern "C" {
    pub fn scePvfOpenUserMemory(
        libID: ScePvfLibId,
        addr: ScePvfPointer,
        size: ScePvfU32,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFontId;
}
extern "C" {
    pub fn scePvfOpenUserMemoryWithSubfontIndex(
        libID: ScePvfLibId,
        addr: ScePvfPointer,
        size: ScePvfU32,
        subFontIndex: ScePvfU32,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFontId;
}
extern "C" {
    pub fn scePvfOpenDefaultJapaneseFontOnSharedMemory(
        libID: ScePvfLibId,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFontId;
}
extern "C" {
    pub fn scePvfOpenDefaultLatinFontOnSharedMemory(
        libID: ScePvfLibId,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFontId;
}
extern "C" {
    pub fn scePvfClose(fontID: ScePvfFontId) -> ScePvfError;
}
extern "C" {
    pub fn scePvfFlush(fontID: ScePvfFontId) -> ScePvfError;
}
extern "C" {
    pub fn scePvfSetCharSize(
        fontID: ScePvfFontId,
        hSize: ScePvfFloat32,
        vSize: ScePvfFloat32,
    ) -> ScePvfError;
}
extern "C" {
    pub fn scePvfSetEmboldenRate(fontID: ScePvfFontId, emboldenRate: ScePvfFloat32) -> ScePvfError;
}
extern "C" {
    pub fn scePvfSetSkewValue(
        fontID: ScePvfFontId,
        angleX: ScePvfFloat32,
        angleY: ScePvfFloat32,
    ) -> ScePvfError;
}
extern "C" {
    pub fn scePvfIsElement(fontID: ScePvfFontId, charCode: ScePvfCharCode) -> ScePvfBool;
}
extern "C" {
    pub fn scePvfGetFontInfo(fontID: ScePvfFontId, fontInfo: *mut ScePvfFontInfo) -> ScePvfError;
}
extern "C" {
    pub fn scePvfGetCharInfo(
        fontID: ScePvfFontId,
        charCode: ScePvfCharCode,
        charInfo: *mut ScePvfCharInfo,
    ) -> ScePvfError;
}
extern "C" {
    pub fn scePvfGetKerningInfo(
        fontID: ScePvfFontId,
        leftCharCode: ScePvfCharCode,
        rightCharCode: ScePvfCharCode,
        pKerningInfo: *mut ScePvfKerningInfo,
    ) -> ScePvfError;
}
extern "C" {
    pub fn scePvfGetCharImageRect(
        fontID: ScePvfFontId,
        charCode: ScePvfCharCode,
        rect: *mut ScePvfIrect,
    ) -> ScePvfError;
}
extern "C" {
    pub fn scePvfGetCharGlyphImage(
        fontID: ScePvfFontId,
        charCode: ScePvfCharCode,
        imageBuffer: *mut ScePvfUserImageBufferRec,
    ) -> ScePvfError;
}
extern "C" {
    pub fn scePvfGetCharGlyphImage_Clip(
        fontID: ScePvfFontId,
        charCode: ScePvfCharCode,
        imageBuffer: *mut ScePvfUserImageBufferRec,
        clipX: ScePvfS32,
        clipY: ScePvfS32,
        clipWidth: ScePvfU32,
        clipHeight: ScePvfU32,
    ) -> ScePvfError;
}
extern "C" {
    pub fn scePvfPixelToPointH(
        libID: ScePvfLibId,
        pixel: ScePvfFloat32,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFloat32;
}
extern "C" {
    pub fn scePvfPixelToPointV(
        libID: ScePvfLibId,
        pixel: ScePvfFloat32,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFloat32;
}
extern "C" {
    pub fn scePvfPointToPixelH(
        libID: ScePvfLibId,
        point: ScePvfFloat32,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFloat32;
}
extern "C" {
    pub fn scePvfPointToPixelV(
        libID: ScePvfLibId,
        point: ScePvfFloat32,
        errorCode: *mut ScePvfError,
    ) -> ScePvfFloat32;
}
extern "C" {
    pub fn scePvfSetAltCharacterCode(libID: ScePvfLibId, charCode: ScePvfCharCode) -> ScePvfError;
}
