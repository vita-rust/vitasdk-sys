/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub mod SceVideodecErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_VIDEODEC_ERROR_INVALID_TYPE: Type = 2153908225;
    pub const SCE_VIDEODEC_ERROR_INVALID_PARAM: Type = 2153908226;
    pub const SCE_VIDEODEC_ERROR_OUT_OF_MEMORY: Type = 2153908227;
    pub const SCE_VIDEODEC_ERROR_INVALID_STATE: Type = 2153908228;
    pub const SCE_VIDEODEC_ERROR_UNSUPPORT_IMAGE_SIZE: Type = 2153908229;
    pub const SCE_VIDEODEC_ERROR_INVALID_COLOR_FORMAT: Type = 2153908230;
    pub const SCE_VIDEODEC_ERROR_NOT_PHY_CONTINUOUS_MEMORY: Type = 2153908231;
    pub const SCE_VIDEODEC_ERROR_ALREADY_USED: Type = 2153908232;
    pub const SCE_VIDEODEC_ERROR_INVALID_POINTER: Type = 2153908233;
    pub const SCE_VIDEODEC_ERROR_ES_BUFFER_FULL: Type = 2153908234;
    pub const SCE_VIDEODEC_ERROR_INITIALIZE: Type = 2153908235;
    pub const SCE_VIDEODEC_ERROR_NOT_INITIALIZE: Type = 2153908236;
    pub const SCE_VIDEODEC_ERROR_INVALID_STREAM: Type = 2153908237;
    pub const SCE_VIDEODEC_ERROR_INVALID_ARGUMENT_SIZE: Type = 2153908238;
}
pub mod SceVideodecType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_VIDEODEC_TYPE_HW_AVCDEC: Type = 4097;
}
pub mod SceAvcdecErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_AVCDEC_ERROR_INVALID_TYPE: Type = 2153906177;
    pub const SCE_AVCDEC_ERROR_INVALID_PARAM: Type = 2153906178;
    pub const SCE_AVCDEC_ERROR_OUT_OF_MEMORY: Type = 2153906179;
    pub const SCE_AVCDEC_ERROR_INVALID_STATE: Type = 2153906180;
    pub const SCE_AVCDEC_ERROR_UNSUPPORT_IMAGE_SIZE: Type = 2153906181;
    pub const SCE_AVCDEC_ERROR_INVALID_COLOR_FORMAT: Type = 2153906182;
    pub const SCE_AVCDEC_ERROR_NOT_PHY_CONTINUOUS_MEMORY: Type = 2153906183;
    pub const SCE_AVCDEC_ERROR_ALREADY_USED: Type = 2153906184;
    pub const SCE_AVCDEC_ERROR_INVALID_POINTER: Type = 2153906185;
    pub const SCE_AVCDEC_ERROR_ES_BUFFER_FULL: Type = 2153906186;
    pub const SCE_AVCDEC_ERROR_INITIALIZE: Type = 2153906187;
    pub const SCE_AVCDEC_ERROR_NOT_INITIALIZE: Type = 2153906188;
    pub const SCE_AVCDEC_ERROR_INVALID_STREAM: Type = 2153906189;
    pub const SCE_AVCDEC_ERROR_INVALID_ARGUMENT_SIZE: Type = 2153906190;
}
pub mod SceAvcdecPixelFormat {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_AVCDEC_PIXELFORMAT_RGBA8888: Type = 0;
    pub const SCE_AVCDEC_PIXELFORMAT_RGBA565: Type = 1;
    pub const SCE_AVCDEC_PIXELFORMAT_RGBA5551: Type = 2;
    pub const SCE_AVCDEC_PIXELFORMAT_YUV420_RASTER: Type = 16;
    pub const SCE_AVCDEC_PIXELFORMAT_YUV420_PACKED_RASTER: Type = 32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceVideodecQueryInitInfoHwAvcdec {
    pub size: u32,
    pub horizontal: u32,
    pub vertical: u32,
    pub numOfRefFrames: u32,
    pub numOfStreams: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SceVideodecQueryInitInfo {
    pub reserved: [u8; 32usize],
    pub hwAvc: SceVideodecQueryInitInfoHwAvcdec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceVideodecTimeStamp {
    pub upper: u32,
    pub lower: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAvcdecQueryDecoderInfo {
    pub horizontal: u32,
    pub vertical: u32,
    pub numOfRefFrames: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAvcdecDecoderInfo {
    pub frameMemSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAvcdecBuf {
    pub pBuf: *mut crate::ctypes::c_void,
    pub size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAvcdecCtrl {
    pub handle: u32,
    pub frameBuf: SceAvcdecBuf,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAvcdecAu {
    pub pts: SceVideodecTimeStamp,
    pub dts: SceVideodecTimeStamp,
    pub es: SceAvcdecBuf,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAvcdecInfo {
    pub numUnitsInTick: u32,
    pub timeScale: u32,
    pub fixedFrameRateFlag: u8,
    pub aspectRatioIdc: u8,
    pub sarWidth: u16,
    pub sarHeight: u16,
    pub colourPrimaries: u8,
    pub transferCharacteristics: u8,
    pub matrixCoefficients: u8,
    pub videoFullRangeFlag: u8,
    pub picStruct: [u8; 2usize],
    pub ctType: u8,
    pub pts: SceVideodecTimeStamp,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAvcdecFrameOptionRGBA {
    pub alpha: u8,
    pub cscCoefficient: u8,
    pub reserved: [u8; 14usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SceAvcdecFrameOption {
    pub reserved: [u8; 16usize],
    pub rgba: SceAvcdecFrameOptionRGBA,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAvcdecFrame {
    pub pixelType: u32,
    pub framePitch: u32,
    pub frameWidth: u32,
    pub frameHeight: u32,
    pub horizontalSize: u32,
    pub verticalSize: u32,
    pub frameCropLeftOffset: u32,
    pub frameCropRightOffset: u32,
    pub frameCropTopOffset: u32,
    pub frameCropBottomOffset: u32,
    pub opt: SceAvcdecFrameOption,
    pub pPicture: [*mut crate::ctypes::c_void; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAvcdecPicture {
    pub size: u32,
    pub frame: SceAvcdecFrame,
    pub info: SceAvcdecInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAvcdecArrayPicture {
    pub numOfOutput: u32,
    pub numOfElm: u32,
    pub pPicture: *mut *mut SceAvcdecPicture,
}
extern "C" {
    pub fn sceVideodecInitLibrary(
        codec: SceVideodecType::Type,
        initInfo: *const SceVideodecQueryInitInfoHwAvcdec,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceVideodecTermLibrary(codec: SceVideodecType::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAvcdecQueryDecoderMemSize(
        codec: SceVideodecType::Type,
        query: *const SceAvcdecQueryDecoderInfo,
        decoderInfo: *mut SceAvcdecDecoderInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAvcdecCreateDecoder(
        codec: SceVideodecType::Type,
        decoder: *mut SceAvcdecCtrl,
        query: *const SceAvcdecQueryDecoderInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAvcdecDeleteDecoder(decoder: *mut SceAvcdecCtrl) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceAvcdecDecode(
        decoder: *const SceAvcdecCtrl,
        au: *const SceAvcdecAu,
        array_picture: *mut SceAvcdecArrayPicture,
    ) -> crate::ctypes::c_int;
}
