/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2common::usbd::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const USB_DESCRIPTOR_DEVICE: u32 = 1;
pub const USB_DESCRIPTOR_CONFIGURATION: u32 = 2;
pub const USB_DESCRIPTOR_STRING: u32 = 3;
pub const USB_DESCRIPTOR_INTERFACE: u32 = 4;
pub const USB_DESCRIPTOR_ENDPOINT: u32 = 5;
pub const USB_DESCRIPTOR_DEVICE_QUALIFIER: u32 = 6;
pub const USB_DESCRIPTOR_OTHER_SPEED: u32 = 7;
pub const USB_DESCRIPTOR_INTERFACE_POWER: u32 = 8;
pub const USB_DESCRIPTOR_OTG: u32 = 9;
pub const SCE_USBD_DEVICE_SPEED_LS: u32 = 0;
pub const SCE_USBD_DEVICE_SPEED_FS: u32 = 1;
pub const SCE_USBD_DEVICE_SPEED_HS: u32 = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdDeviceInfo {
    pub port: crate::ctypes::c_uint,
    pub device_num: crate::ctypes::c_uint,
    pub unk3: crate::ctypes::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdTransferData {
    pub pipe: crate::ctypes::c_uint,
    pub data: *const crate::ctypes::c_void,
    pub data_size: crate::ctypes::c_uint,
    pub transferred: *mut crate::ctypes::c_void,
    pub timeout: crate::ctypes::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdReceiveEvent {
    pub unk0: crate::ctypes::c_uint,
    pub unk1: crate::ctypes::c_uint,
    pub unk2: crate::ctypes::c_uint,
    pub unk3: crate::ctypes::c_uint,
    pub unk4: crate::ctypes::c_uint,
    pub unk5: crate::ctypes::c_uint,
    pub transfer_id: crate::ctypes::c_uint,
}
extern "C" {
    pub fn sceUsbdInit(uid: *mut SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdEnd(uid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdGetDeviceList(
        uid: SceUID,
        num: SceSize,
        info: *mut SceUsbdDeviceInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdGetDescriptorSize(
        uid: SceUID,
        device_id: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdGetDescriptor(
        uid: SceUID,
        device_id: SceUID,
        descriptor: *mut crate::ctypes::c_uchar,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdGetDeviceSpeed(
        uid: SceUID,
        device_id: SceUID,
        speed: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdRegisterCallback(
        cbid: SceUID,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdUnregisterCallback(cbid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdResetDevice(uid: SceUID, device_id: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdAttach(
        uid: SceUID,
        driver_id: SceUID,
        bus: SceUInt,
        device: SceUInt,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdGetDeviceAddress(
        uid: SceUID,
        device_id: SceUID,
        addr: *mut SceUsbdDeviceAddress,
    ) -> crate::ctypes::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdTransferStatus {
    pub unk0: u32,
    pub unk1: u32,
    pub unk2: u32,
    pub unk3: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdIsochTransferStatus {
    pub unk0: u32,
    pub unk1: u32,
    pub unk2: *mut usize,
    pub unk3: u32,
}
extern "C" {
    pub fn sceUsbdGetTransferStatus(
        transfer_id: SceUID,
        status: *mut SceUsbdTransferStatus,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdGetIsochTransferStatus(
        transfer_id: SceUID,
        status: *mut SceUsbdIsochTransferStatus,
    ) -> crate::ctypes::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdDevicePipe {
    pub device_id: crate::ctypes::c_uint,
    pub unk1: crate::ctypes::c_uint,
    pub unk2: crate::ctypes::c_uint,
    pub unk3: crate::ctypes::c_uint,
    pub unk4: crate::ctypes::c_uint,
    pub unk5: crate::ctypes::c_uint,
}
extern "C" {
    pub fn sceUsbdOpenPipe(uid: SceUID, pipe: *mut SceUsbdDevicePipe) -> SceUID;
}
extern "C" {
    pub fn sceUsbdOpenDefaultPipe(uid: SceUID, device_id: SceUID) -> SceUID;
}
extern "C" {
    pub fn sceUsbdClosePipe(uid: SceUID, pipe_id: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdTransferData(uid: SceUID, data: *mut SceUsbdTransferData) -> SceUID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdIsochTransfer {
    pub unk0: crate::ctypes::c_uint,
    pub unk1: crate::ctypes::c_uint,
    pub unk2: crate::ctypes::c_uint,
    pub unk3: crate::ctypes::c_uint,
    pub unk4: crate::ctypes::c_uint,
    pub unk5: crate::ctypes::c_uint,
    pub unk6: crate::ctypes::c_uint,
    pub unk7: crate::ctypes::c_uint,
    pub unk8: crate::ctypes::c_uint,
    pub unk9: crate::ctypes::c_uint,
}
extern "C" {
    pub fn sceUsbdIsochTransferData(
        uid: SceUID,
        pipe_id: SceUID,
        transfer: *mut SceUsbdIsochTransfer,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdReceiveEvent(
        uid: SceUID,
        event: *mut SceUsbdReceiveEvent,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUsbdRegisterLdd(uid: SceUID, name: *mut crate::ctypes::c_char) -> SceUID;
}
extern "C" {
    pub fn sceUsbdRegisterCompositeLdd(uid: SceUID, name: *mut crate::ctypes::c_char) -> SceUID;
}
extern "C" {
    pub fn sceUsbdUnregisterLdd(
        uid: SceUID,
        name: *mut crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdAttachCompositeParam {
    pub driver_id: u32,
    pub bus: u32,
    pub device: u32,
    pub unk3: u32,
    pub unk4: u32,
}
extern "C" {
    pub fn sceUsbdAttachCompositeLdd(
        uid: SceUID,
        param: *mut SceUsbdAttachCompositeParam,
    ) -> crate::ctypes::c_int;
}
