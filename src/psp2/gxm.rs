/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const SCE_GXM_MINIMUM_CONTEXT_HOST_MEM_SIZE: u32 = 2048;
pub const SCE_GXM_DEFAULT_PARAMETER_BUFFER_SIZE: u32 = 16777216;
pub const SCE_GXM_DEFAULT_VDM_RING_BUFFER_SIZE: u32 = 131072;
pub const SCE_GXM_DEFAULT_VERTEX_RING_BUFFER_SIZE: u32 = 2097152;
pub const SCE_GXM_DEFAULT_FRAGMENT_RING_BUFFER_SIZE: u32 = 524288;
pub const SCE_GXM_DEFAULT_FRAGMENT_USSE_RING_BUFFER_SIZE: u32 = 16384;
pub const SCE_GXM_MAX_VERTEX_ATTRIBUTES: u32 = 16;
pub const SCE_GXM_MAX_VERTEX_STREAMS: u32 = 16;
pub const SCE_GXM_MAX_TEXTURE_UNITS: u32 = 16;
pub const SCE_GXM_MAX_UNIFORM_BUFFERS: u32 = 14;
pub const SCE_GXM_MAX_AUXILIARY_SURFACES: u32 = 3;
pub const SCE_GXM_TILE_SHIFTX: u32 = 5;
pub const SCE_GXM_TILE_SHIFTY: u32 = 5;
pub const SCE_GXM_TILE_SIZEX: u32 = 32;
pub const SCE_GXM_TILE_SIZEY: u32 = 32;
pub const SCE_GXM_COLOR_SURFACE_ALIGNMENT: u32 = 4;
pub const SCE_GXM_TEXTURE_ALIGNMENT: u32 = 16;
pub const SCE_GXM_DEPTHSTENCIL_SURFACE_ALIGNMENT: u32 = 16;
pub const SCE_GXM_PALETTE_ALIGNMENT: u32 = 64;
pub mod SceGxmErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_ERROR_UNINITIALIZED: Type = 2153447424;
    pub const SCE_GXM_ERROR_ALREADY_INITIALIZED: Type = 2153447425;
    pub const SCE_GXM_ERROR_OUT_OF_MEMORY: Type = 2153447426;
    pub const SCE_GXM_ERROR_INVALID_VALUE: Type = 2153447427;
    pub const SCE_GXM_ERROR_INVALID_POINTER: Type = 2153447428;
    pub const SCE_GXM_ERROR_INVALID_ALIGNMENT: Type = 2153447429;
    pub const SCE_GXM_ERROR_NOT_WITHIN_SCENE: Type = 2153447430;
    pub const SCE_GXM_ERROR_WITHIN_SCENE: Type = 2153447431;
    pub const SCE_GXM_ERROR_NULL_PROGRAM: Type = 2153447432;
    pub const SCE_GXM_ERROR_UNSUPPORTED: Type = 2153447433;
    pub const SCE_GXM_ERROR_PATCHER_INTERNAL: Type = 2153447434;
    pub const SCE_GXM_ERROR_RESERVE_FAILED: Type = 2153447435;
    pub const SCE_GXM_ERROR_PROGRAM_IN_USE: Type = 2153447436;
    pub const SCE_GXM_ERROR_INVALID_INDEX_COUNT: Type = 2153447437;
    pub const SCE_GXM_ERROR_INVALID_POLYGON_MODE: Type = 2153447438;
    pub const SCE_GXM_ERROR_INVALID_SAMPLER_RESULT_TYPE_PRECISION: Type = 2153447439;
    pub const SCE_GXM_ERROR_INVALID_SAMPLER_RESULT_TYPE_COMPONENT_COUNT: Type = 2153447440;
    pub const SCE_GXM_ERROR_UNIFORM_BUFFER_NOT_RESERVED: Type = 2153447441;
    pub const SCE_GXM_ERROR_INVALID_AUXILIARY_SURFACE: Type = 2153447443;
    pub const SCE_GXM_ERROR_INVALID_PRECOMPUTED_DRAW: Type = 2153447444;
    pub const SCE_GXM_ERROR_INVALID_PRECOMPUTED_VERTEX_STATE: Type = 2153447445;
    pub const SCE_GXM_ERROR_INVALID_PRECOMPUTED_FRAGMENT_STATE: Type = 2153447446;
    pub const SCE_GXM_ERROR_DRIVER: Type = 2153447447;
    pub const SCE_GXM_ERROR_INVALID_TEXTURE: Type = 2153447448;
    pub const SCE_GXM_ERROR_INVALID_TEXTURE_DATA_POINTER: Type = 2153447449;
    pub const SCE_GXM_ERROR_INVALID_TEXTURE_PALETTE_POINTER: Type = 2153447450;
}
pub type SceGxmDisplayQueueCallback =
    ::core::option::Option<unsafe extern "C" fn(callbackData: *const crate::ctypes::c_void)>;
#[repr(C)]
pub struct SceGxmInitializeParams {
    pub flags: crate::ctypes::c_uint,
    pub displayQueueMaxPendingCount: crate::ctypes::c_uint,
    pub displayQueueCallback: SceGxmDisplayQueueCallback,
    pub displayQueueCallbackDataSize: crate::ctypes::c_uint,
    pub parameterBufferSize: SceSize,
}
pub mod SceGxmMemoryAttribFlags {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_MEMORY_ATTRIB_READ: Type = 1;
    pub const SCE_GXM_MEMORY_ATTRIB_WRITE: Type = 2;
    pub const SCE_GXM_MEMORY_ATTRIB_RW: Type = 3;
}
pub mod SceGxmAttributeFormat {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_U8: Type = 0;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_S8: Type = 1;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_U16: Type = 2;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_S16: Type = 3;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_U8N: Type = 4;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_S8N: Type = 5;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_U16N: Type = 6;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_S16N: Type = 7;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_F16: Type = 8;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_F32: Type = 9;
    pub const SCE_GXM_ATTRIBUTE_FORMAT_UNTYPED: Type = 10;
}
pub mod SceGxmDepthStencilFormat {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_DEPTH_STENCIL_FORMAT_DF32: Type = 278528;
    pub const SCE_GXM_DEPTH_STENCIL_FORMAT_S8: Type = 139264;
    pub const SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_S8: Type = 417792;
    pub const SCE_GXM_DEPTH_STENCIL_FORMAT_DF32M: Type = 835584;
    pub const SCE_GXM_DEPTH_STENCIL_FORMAT_DF32M_S8: Type = 974848;
    pub const SCE_GXM_DEPTH_STENCIL_FORMAT_S8D24: Type = 19292160;
    pub const SCE_GXM_DEPTH_STENCIL_FORMAT_D16: Type = 38027264;
}
pub mod SceGxmPrimitiveType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_PRIMITIVE_TRIANGLES: Type = 0;
    pub const SCE_GXM_PRIMITIVE_LINES: Type = 67108864;
    pub const SCE_GXM_PRIMITIVE_POINTS: Type = 134217728;
    pub const SCE_GXM_PRIMITIVE_TRIANGLE_STRIP: Type = 201326592;
    pub const SCE_GXM_PRIMITIVE_TRIANGLE_FAN: Type = 268435456;
    pub const SCE_GXM_PRIMITIVE_TRIANGLE_EDGES: Type = 335544320;
}
pub mod SceGxmEdgeEnableFlags {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_EDGE_ENABLE_01: Type = 256;
    pub const SCE_GXM_EDGE_ENABLE_12: Type = 512;
    pub const SCE_GXM_EDGE_ENABLE_20: Type = 1024;
}
pub mod SceGxmRegionClipMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_REGION_CLIP_NONE: Type = 0;
    pub const SCE_GXM_REGION_CLIP_ALL: Type = 1073741824;
    pub const SCE_GXM_REGION_CLIP_OUTSIDE: Type = 2147483648;
    pub const SCE_GXM_REGION_CLIP_INSIDE: Type = 3221225472;
}
pub mod SceGxmDepthFunc {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_DEPTH_FUNC_NEVER: Type = 0;
    pub const SCE_GXM_DEPTH_FUNC_LESS: Type = 4194304;
    pub const SCE_GXM_DEPTH_FUNC_EQUAL: Type = 8388608;
    pub const SCE_GXM_DEPTH_FUNC_LESS_EQUAL: Type = 12582912;
    pub const SCE_GXM_DEPTH_FUNC_GREATER: Type = 16777216;
    pub const SCE_GXM_DEPTH_FUNC_NOT_EQUAL: Type = 20971520;
    pub const SCE_GXM_DEPTH_FUNC_GREATER_EQUAL: Type = 25165824;
    pub const SCE_GXM_DEPTH_FUNC_ALWAYS: Type = 29360128;
}
pub mod SceGxmStencilFunc {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_STENCIL_FUNC_NEVER: Type = 0;
    pub const SCE_GXM_STENCIL_FUNC_LESS: Type = 33554432;
    pub const SCE_GXM_STENCIL_FUNC_EQUAL: Type = 67108864;
    pub const SCE_GXM_STENCIL_FUNC_LESS_EQUAL: Type = 100663296;
    pub const SCE_GXM_STENCIL_FUNC_GREATER: Type = 134217728;
    pub const SCE_GXM_STENCIL_FUNC_NOT_EQUAL: Type = 167772160;
    pub const SCE_GXM_STENCIL_FUNC_GREATER_EQUAL: Type = 201326592;
    pub const SCE_GXM_STENCIL_FUNC_ALWAYS: Type = 234881024;
}
pub mod SceGxmStencilOp {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_STENCIL_OP_KEEP: Type = 0;
    pub const SCE_GXM_STENCIL_OP_ZERO: Type = 1;
    pub const SCE_GXM_STENCIL_OP_REPLACE: Type = 2;
    pub const SCE_GXM_STENCIL_OP_INCR: Type = 3;
    pub const SCE_GXM_STENCIL_OP_DECR: Type = 4;
    pub const SCE_GXM_STENCIL_OP_INVERT: Type = 5;
    pub const SCE_GXM_STENCIL_OP_INCR_WRAP: Type = 6;
    pub const SCE_GXM_STENCIL_OP_DECR_WRAP: Type = 7;
}
pub mod SceGxmCullMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_CULL_NONE: Type = 0;
    pub const SCE_GXM_CULL_CW: Type = 1;
    pub const SCE_GXM_CULL_CCW: Type = 2;
}
pub mod SceGxmPassType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_PASS_TYPE_OPAQUE: Type = 0;
    pub const SCE_GXM_PASS_TYPE_TRANSLUCENT: Type = 33554432;
    pub const SCE_GXM_PASS_TYPE_DISCARD: Type = 67108864;
    pub const SCE_GXM_PASS_TYPE_MASK_UPDATE: Type = 100663296;
    pub const SCE_GXM_PASS_TYPE_DEPTH_REPLACE: Type = 167772160;
}
pub mod SceGxmPolygonMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_POLYGON_MODE_TRIANGLE_FILL: Type = 0;
    pub const SCE_GXM_POLYGON_MODE_LINE: Type = 32768;
    pub const SCE_GXM_POLYGON_MODE_POINT_10UV: Type = 65536;
    pub const SCE_GXM_POLYGON_MODE_POINT: Type = 98304;
    pub const SCE_GXM_POLYGON_MODE_POINT_01UV: Type = 131072;
    pub const SCE_GXM_POLYGON_MODE_TRIANGLE_LINE: Type = 163840;
    pub const SCE_GXM_POLYGON_MODE_TRIANGLE_POINT: Type = 196608;
}
pub mod SceGxmColorSwizzle4Mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_SWIZZLE4_ABGR: Type = 0;
    pub const SCE_GXM_COLOR_SWIZZLE4_ARGB: Type = 1048576;
    pub const SCE_GXM_COLOR_SWIZZLE4_RGBA: Type = 2097152;
    pub const SCE_GXM_COLOR_SWIZZLE4_BGRA: Type = 3145728;
}
pub mod SceGxmColorSwizzle3Mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_SWIZZLE3_BGR: Type = 0;
    pub const SCE_GXM_COLOR_SWIZZLE3_RGB: Type = 1048576;
}
pub mod SceGxmColorSwizzle2Mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_SWIZZLE2_GR: Type = 0;
    pub const SCE_GXM_COLOR_SWIZZLE2_RG: Type = 1048576;
    pub const SCE_GXM_COLOR_SWIZZLE2_RA: Type = 2097152;
    pub const SCE_GXM_COLOR_SWIZZLE2_AR: Type = 3145728;
}
pub mod SceGxmColorSwizzle1Mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_SWIZZLE1_R: Type = 0;
    pub const SCE_GXM_COLOR_SWIZZLE1_G: Type = 1048576;
    pub const SCE_GXM_COLOR_SWIZZLE1_A: Type = 1048576;
}
pub mod SceGxmColorBaseFormat {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8: Type = 0;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U8U8U8: Type = 268435456;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U5U6U5: Type = 805306368;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5: Type = 1073741824;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4: Type = 1342177280;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U8U3U3U2: Type = 1610612736;
    pub const SCE_GXM_COLOR_BASE_FORMAT_F16: Type = 4026531840;
    pub const SCE_GXM_COLOR_BASE_FORMAT_F16F16: Type = 8388608;
    pub const SCE_GXM_COLOR_BASE_FORMAT_F32: Type = 276824064;
    pub const SCE_GXM_COLOR_BASE_FORMAT_S16: Type = 545259520;
    pub const SCE_GXM_COLOR_BASE_FORMAT_S16S16: Type = 813694976;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U16: Type = 1082130432;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U16U16: Type = 1350565888;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10: Type = 1619001344;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U8: Type = 2155872256;
    pub const SCE_GXM_COLOR_BASE_FORMAT_S8: Type = 2424307712;
    pub const SCE_GXM_COLOR_BASE_FORMAT_S5S5U6: Type = 2692743168;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U8U8: Type = 2961178624;
    pub const SCE_GXM_COLOR_BASE_FORMAT_S8S8: Type = 3229614080;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8: Type = 3498049536;
    pub const SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8: Type = 3766484992;
    pub const SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16: Type = 16777216;
    pub const SCE_GXM_COLOR_BASE_FORMAT_F32F32: Type = 285212672;
    pub const SCE_GXM_COLOR_BASE_FORMAT_F11F11F10: Type = 553648128;
    pub const SCE_GXM_COLOR_BASE_FORMAT_SE5M9M9M9: Type = 822083584;
    pub const SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10: Type = 1090519040;
}
pub mod SceGxmColorFormat {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_FORMAT_U8U8U8U8_ABGR: Type = 0;
    pub const SCE_GXM_COLOR_FORMAT_U8U8U8U8_ARGB: Type = 1048576;
    pub const SCE_GXM_COLOR_FORMAT_U8U8U8U8_RGBA: Type = 2097152;
    pub const SCE_GXM_COLOR_FORMAT_U8U8U8U8_BGRA: Type = 3145728;
    pub const SCE_GXM_COLOR_FORMAT_U8U8U8_BGR: Type = 268435456;
    pub const SCE_GXM_COLOR_FORMAT_U8U8U8_RGB: Type = 269484032;
    pub const SCE_GXM_COLOR_FORMAT_U5U6U5_BGR: Type = 805306368;
    pub const SCE_GXM_COLOR_FORMAT_U5U6U5_RGB: Type = 806354944;
    pub const SCE_GXM_COLOR_FORMAT_U1U5U5U5_ABGR: Type = 1073741824;
    pub const SCE_GXM_COLOR_FORMAT_U1U5U5U5_ARGB: Type = 1074790400;
    pub const SCE_GXM_COLOR_FORMAT_U5U5U5U1_RGBA: Type = 1075838976;
    pub const SCE_GXM_COLOR_FORMAT_U5U5U5U1_BGRA: Type = 1076887552;
    pub const SCE_GXM_COLOR_FORMAT_U4U4U4U4_ABGR: Type = 1342177280;
    pub const SCE_GXM_COLOR_FORMAT_U4U4U4U4_ARGB: Type = 1343225856;
    pub const SCE_GXM_COLOR_FORMAT_U4U4U4U4_RGBA: Type = 1344274432;
    pub const SCE_GXM_COLOR_FORMAT_U4U4U4U4_BGRA: Type = 1345323008;
    pub const SCE_GXM_COLOR_FORMAT_U8U3U3U2_ARGB: Type = 1610612736;
    pub const SCE_GXM_COLOR_FORMAT_F16_R: Type = 4026531840;
    pub const SCE_GXM_COLOR_FORMAT_F16_G: Type = 4027580416;
    pub const SCE_GXM_COLOR_FORMAT_F16F16_GR: Type = 8388608;
    pub const SCE_GXM_COLOR_FORMAT_F16F16_RG: Type = 9437184;
    pub const SCE_GXM_COLOR_FORMAT_F32_R: Type = 276824064;
    pub const SCE_GXM_COLOR_FORMAT_S16_R: Type = 545259520;
    pub const SCE_GXM_COLOR_FORMAT_S16_G: Type = 546308096;
    pub const SCE_GXM_COLOR_FORMAT_S16S16_GR: Type = 813694976;
    pub const SCE_GXM_COLOR_FORMAT_S16S16_RG: Type = 814743552;
    pub const SCE_GXM_COLOR_FORMAT_U16_R: Type = 1082130432;
    pub const SCE_GXM_COLOR_FORMAT_U16_G: Type = 1083179008;
    pub const SCE_GXM_COLOR_FORMAT_U16U16_GR: Type = 1350565888;
    pub const SCE_GXM_COLOR_FORMAT_U16U16_RG: Type = 1351614464;
    pub const SCE_GXM_COLOR_FORMAT_U2U10U10U10_ABGR: Type = 1619001344;
    pub const SCE_GXM_COLOR_FORMAT_U2U10U10U10_ARGB: Type = 1620049920;
    pub const SCE_GXM_COLOR_FORMAT_U10U10U10U2_RGBA: Type = 1621098496;
    pub const SCE_GXM_COLOR_FORMAT_U10U10U10U2_BGRA: Type = 1622147072;
    pub const SCE_GXM_COLOR_FORMAT_U8_R: Type = 2155872256;
    pub const SCE_GXM_COLOR_FORMAT_U8_A: Type = 2156920832;
    pub const SCE_GXM_COLOR_FORMAT_S8_R: Type = 2424307712;
    pub const SCE_GXM_COLOR_FORMAT_S8_A: Type = 2425356288;
    pub const SCE_GXM_COLOR_FORMAT_U6S5S5_BGR: Type = 2692743168;
    pub const SCE_GXM_COLOR_FORMAT_S5S5U6_RGB: Type = 2693791744;
    pub const SCE_GXM_COLOR_FORMAT_U8U8_GR: Type = 2961178624;
    pub const SCE_GXM_COLOR_FORMAT_U8U8_RG: Type = 2962227200;
    pub const SCE_GXM_COLOR_FORMAT_U8U8_RA: Type = 2963275776;
    pub const SCE_GXM_COLOR_FORMAT_U8U8_AR: Type = 2964324352;
    pub const SCE_GXM_COLOR_FORMAT_S8S8_GR: Type = 3229614080;
    pub const SCE_GXM_COLOR_FORMAT_S8S8_RG: Type = 3230662656;
    pub const SCE_GXM_COLOR_FORMAT_S8S8_RA: Type = 3231711232;
    pub const SCE_GXM_COLOR_FORMAT_S8S8_AR: Type = 3232759808;
    pub const SCE_GXM_COLOR_FORMAT_U8S8S8U8_ABGR: Type = 3498049536;
    pub const SCE_GXM_COLOR_FORMAT_U8U8S8S8_ARGB: Type = 3499098112;
    pub const SCE_GXM_COLOR_FORMAT_U8S8S8U8_RGBA: Type = 3500146688;
    pub const SCE_GXM_COLOR_FORMAT_S8S8U8U8_BGRA: Type = 3501195264;
    pub const SCE_GXM_COLOR_FORMAT_S8S8S8S8_ABGR: Type = 3766484992;
    pub const SCE_GXM_COLOR_FORMAT_S8S8S8S8_ARGB: Type = 3767533568;
    pub const SCE_GXM_COLOR_FORMAT_S8S8S8S8_RGBA: Type = 3768582144;
    pub const SCE_GXM_COLOR_FORMAT_S8S8S8S8_BGRA: Type = 3769630720;
    pub const SCE_GXM_COLOR_FORMAT_F16F16F16F16_ABGR: Type = 16777216;
    pub const SCE_GXM_COLOR_FORMAT_F16F16F16F16_ARGB: Type = 17825792;
    pub const SCE_GXM_COLOR_FORMAT_F16F16F16F16_RGBA: Type = 18874368;
    pub const SCE_GXM_COLOR_FORMAT_F16F16F16F16_BGRA: Type = 19922944;
    pub const SCE_GXM_COLOR_FORMAT_F32F32_GR: Type = 285212672;
    pub const SCE_GXM_COLOR_FORMAT_F32F32_RG: Type = 286261248;
    pub const SCE_GXM_COLOR_FORMAT_F10F11F11_BGR: Type = 553648128;
    pub const SCE_GXM_COLOR_FORMAT_F11F11F10_RGB: Type = 554696704;
    pub const SCE_GXM_COLOR_FORMAT_SE5M9M9M9_BGR: Type = 822083584;
    pub const SCE_GXM_COLOR_FORMAT_SE5M9M9M9_RGB: Type = 823132160;
    pub const SCE_GXM_COLOR_FORMAT_U2F10F10F10_ABGR: Type = 1090519040;
    pub const SCE_GXM_COLOR_FORMAT_U2F10F10F10_ARGB: Type = 1091567616;
    pub const SCE_GXM_COLOR_FORMAT_F10F10F10U2_RGBA: Type = 1092616192;
    pub const SCE_GXM_COLOR_FORMAT_F10F10F10U2_BGRA: Type = 1093664768;
    pub const SCE_GXM_COLOR_FORMAT_A8B8G8R8: Type = 0;
    pub const SCE_GXM_COLOR_FORMAT_A8R8G8B8: Type = 1048576;
    pub const SCE_GXM_COLOR_FORMAT_R5G6B5: Type = 806354944;
    pub const SCE_GXM_COLOR_FORMAT_A1R5G5B5: Type = 1074790400;
    pub const SCE_GXM_COLOR_FORMAT_A4R4G4B4: Type = 1343225856;
    pub const SCE_GXM_COLOR_FORMAT_A8: Type = 2156920832;
}
pub mod SceGxmColorSurfaceType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_SURFACE_LINEAR: Type = 0;
    pub const SCE_GXM_COLOR_SURFACE_TILED: Type = 67108864;
    pub const SCE_GXM_COLOR_SURFACE_SWIZZLED: Type = 134217728;
}
pub mod SceGxmColorSurfaceGammaMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_SURFACE_GAMMA_NONE: Type = 0;
    pub const SCE_GXM_COLOR_SURFACE_GAMMA_R: Type = 4096;
    pub const SCE_GXM_COLOR_SURFACE_GAMMA_GR: Type = 12288;
    pub const SCE_GXM_COLOR_SURFACE_GAMMA_BGR: Type = 4096;
}
pub mod SceGxmColorSurfaceDitherMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_SURFACE_DITHER_DISABLED: Type = 0;
    pub const SCE_GXM_COLOR_SURFACE_DITHER_ENABLED: Type = 8;
}
pub mod SceGxmDepthStencilSurfaceType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_DEPTH_STENCIL_SURFACE_LINEAR: Type = 0;
    pub const SCE_GXM_DEPTH_STENCIL_SURFACE_TILED: Type = 69632;
}
pub mod SceGxmOutputRegisterFormat {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_DECLARED: Type = 0;
    pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_UCHAR4: Type = 1;
    pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_CHAR4: Type = 2;
    pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_USHORT2: Type = 3;
    pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_SHORT2: Type = 4;
    pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_HALF4: Type = 5;
    pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_HALF2: Type = 6;
    pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_FLOAT2: Type = 7;
    pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_FLOAT: Type = 8;
}
pub mod SceGxmMultisampleMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_MULTISAMPLE_NONE: Type = 0;
    pub const SCE_GXM_MULTISAMPLE_2X: Type = 1;
    pub const SCE_GXM_MULTISAMPLE_4X: Type = 2;
}
pub mod SceGxmTextureSwizzle4Mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_SWIZZLE4_ABGR: Type = 0;
    pub const SCE_GXM_TEXTURE_SWIZZLE4_ARGB: Type = 4096;
    pub const SCE_GXM_TEXTURE_SWIZZLE4_RGBA: Type = 8192;
    pub const SCE_GXM_TEXTURE_SWIZZLE4_BGRA: Type = 12288;
    pub const SCE_GXM_TEXTURE_SWIZZLE4_1BGR: Type = 16384;
    pub const SCE_GXM_TEXTURE_SWIZZLE4_1RGB: Type = 20480;
    pub const SCE_GXM_TEXTURE_SWIZZLE4_RGB1: Type = 24576;
    pub const SCE_GXM_TEXTURE_SWIZZLE4_BGR1: Type = 28672;
}
pub mod SceGxmTextureSwizzle3Mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_SWIZZLE3_BGR: Type = 0;
    pub const SCE_GXM_TEXTURE_SWIZZLE3_RGB: Type = 4096;
}
pub mod SceGxmTextureSwizzle2Mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_SWIZZLE2_GR: Type = 0;
    pub const SCE_GXM_TEXTURE_SWIZZLE2_00GR: Type = 4096;
    pub const SCE_GXM_TEXTURE_SWIZZLE2_GRRR: Type = 8192;
    pub const SCE_GXM_TEXTURE_SWIZZLE2_RGGG: Type = 12288;
    pub const SCE_GXM_TEXTURE_SWIZZLE2_GRGR: Type = 16384;
    pub const SCE_GXM_TEXTURE_SWIZZLE2_00RG: Type = 20480;
}
pub mod SceGxmTextureSwizzle2ModeAlt {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_SWIZZLE2_SD: Type = 0;
    pub const SCE_GXM_TEXTURE_SWIZZLE2_DS: Type = 4096;
}
pub mod SceGxmTextureSwizzle1Mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_SWIZZLE1_R: Type = 0;
    pub const SCE_GXM_TEXTURE_SWIZZLE1_000R: Type = 4096;
    pub const SCE_GXM_TEXTURE_SWIZZLE1_111R: Type = 8192;
    pub const SCE_GXM_TEXTURE_SWIZZLE1_RRRR: Type = 12288;
    pub const SCE_GXM_TEXTURE_SWIZZLE1_0RRR: Type = 16384;
    pub const SCE_GXM_TEXTURE_SWIZZLE1_1RRR: Type = 20480;
    pub const SCE_GXM_TEXTURE_SWIZZLE1_R000: Type = 24576;
    pub const SCE_GXM_TEXTURE_SWIZZLE1_R111: Type = 28672;
}
pub mod SceGxmTextureSwizzleYUV422Mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC0: Type = 0;
    pub const SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC0: Type = 4096;
    pub const SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC0: Type = 8192;
    pub const SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC0: Type = 12288;
    pub const SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC1: Type = 16384;
    pub const SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC1: Type = 20480;
    pub const SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC1: Type = 24576;
    pub const SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC1: Type = 28672;
}
pub mod SceGxmTextureSwizzleYUV420Mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC0: Type = 0;
    pub const SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC0: Type = 4096;
    pub const SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC1: Type = 8192;
    pub const SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC1: Type = 12288;
}
pub mod SceGxmTextureBaseFormat {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U8: Type = 0;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_S8: Type = 16777216;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4: Type = 33554432;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U8U3U3U2: Type = 50331648;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5: Type = 67108864;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U5U6U5: Type = 83886080;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_S5S5U6: Type = 100663296;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U8U8: Type = 117440512;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_S8S8: Type = 134217728;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U16: Type = 150994944;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_S16: Type = 167772160;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_F16: Type = 184549376;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8: Type = 201326592;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8: Type = 218103808;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10: Type = 234881024;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U16U16: Type = 251658240;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_S16S16: Type = 268435456;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_F16F16: Type = 285212672;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_F32: Type = 301989888;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_F32M: Type = 318767104;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_X8S8S8U8: Type = 335544320;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_X8U24: Type = 352321536;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U32: Type = 385875968;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_S32: Type = 402653184;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_SE5M9M9M9: Type = 419430400;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_F11F11F10: Type = 436207616;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16: Type = 452984832;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16: Type = 469762048;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16: Type = 486539264;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_F32F32: Type = 503316480;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U32U32: Type = 520093696;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_PVRT2BPP: Type = 2147483648;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_PVRT4BPP: Type = 2164260864;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII2BPP: Type = 2181038080;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII4BPP: Type = 2197815296;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_UBC1: Type = 2231369728;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_UBC2: Type = 2248146944;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_UBC3: Type = 2264924160;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_UBC4: Type = 2281701376;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_SBC4: Type = 2298478592;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_UBC5: Type = 2315255808;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_SBC5: Type = 2332033024;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2: Type = 2415919104;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3: Type = 2432696320;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_YUV422: Type = 2449473536;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_P4: Type = 2483027968;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_P8: Type = 2499805184;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8: Type = 2550136832;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8: Type = 2566914048;
    pub const SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10: Type = 2583691264;
}
pub mod SceGxmTextureFormat {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_FORMAT_U8_000R: Type = 4096;
    pub const SCE_GXM_TEXTURE_FORMAT_U8_111R: Type = 8192;
    pub const SCE_GXM_TEXTURE_FORMAT_U8_RRRR: Type = 12288;
    pub const SCE_GXM_TEXTURE_FORMAT_U8_0RRR: Type = 16384;
    pub const SCE_GXM_TEXTURE_FORMAT_U8_1RRR: Type = 20480;
    pub const SCE_GXM_TEXTURE_FORMAT_U8_R000: Type = 24576;
    pub const SCE_GXM_TEXTURE_FORMAT_U8_R111: Type = 28672;
    pub const SCE_GXM_TEXTURE_FORMAT_U8_R: Type = 0;
    pub const SCE_GXM_TEXTURE_FORMAT_S8_000R: Type = 16781312;
    pub const SCE_GXM_TEXTURE_FORMAT_S8_111R: Type = 16785408;
    pub const SCE_GXM_TEXTURE_FORMAT_S8_RRRR: Type = 16789504;
    pub const SCE_GXM_TEXTURE_FORMAT_S8_0RRR: Type = 16793600;
    pub const SCE_GXM_TEXTURE_FORMAT_S8_1RRR: Type = 16797696;
    pub const SCE_GXM_TEXTURE_FORMAT_S8_R000: Type = 16801792;
    pub const SCE_GXM_TEXTURE_FORMAT_S8_R111: Type = 16805888;
    pub const SCE_GXM_TEXTURE_FORMAT_S8_R: Type = 16777216;
    pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ABGR: Type = 33554432;
    pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ARGB: Type = 33558528;
    pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_RGBA: Type = 33562624;
    pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_BGRA: Type = 33566720;
    pub const SCE_GXM_TEXTURE_FORMAT_X4U4U4U4_1BGR: Type = 33570816;
    pub const SCE_GXM_TEXTURE_FORMAT_X4U4U4U4_1RGB: Type = 33574912;
    pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4X4_RGB1: Type = 33579008;
    pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4X4_BGR1: Type = 33583104;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U3U3U2_ARGB: Type = 50331648;
    pub const SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ABGR: Type = 67108864;
    pub const SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ARGB: Type = 67112960;
    pub const SCE_GXM_TEXTURE_FORMAT_U5U5U5U1_RGBA: Type = 67117056;
    pub const SCE_GXM_TEXTURE_FORMAT_U5U5U5U1_BGRA: Type = 67121152;
    pub const SCE_GXM_TEXTURE_FORMAT_X1U5U5U5_1BGR: Type = 67125248;
    pub const SCE_GXM_TEXTURE_FORMAT_X1U5U5U5_1RGB: Type = 67129344;
    pub const SCE_GXM_TEXTURE_FORMAT_U5U5U5X1_RGB1: Type = 67133440;
    pub const SCE_GXM_TEXTURE_FORMAT_U5U5U5X1_BGR1: Type = 67137536;
    pub const SCE_GXM_TEXTURE_FORMAT_U5U6U5_BGR: Type = 83886080;
    pub const SCE_GXM_TEXTURE_FORMAT_U5U6U5_RGB: Type = 83890176;
    pub const SCE_GXM_TEXTURE_FORMAT_U6S5S5_BGR: Type = 100663296;
    pub const SCE_GXM_TEXTURE_FORMAT_S5S5U6_RGB: Type = 100667392;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8_00GR: Type = 117444608;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8_GRRR: Type = 117448704;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8_RGGG: Type = 117452800;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8_GRGR: Type = 117456896;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8_00RG: Type = 117460992;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8_GR: Type = 117440512;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8_00GR: Type = 134221824;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8_GRRR: Type = 134225920;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8_RGGG: Type = 134230016;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8_GRGR: Type = 134234112;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8_00RG: Type = 134238208;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8_GR: Type = 134217728;
    pub const SCE_GXM_TEXTURE_FORMAT_U16_000R: Type = 150999040;
    pub const SCE_GXM_TEXTURE_FORMAT_U16_111R: Type = 151003136;
    pub const SCE_GXM_TEXTURE_FORMAT_U16_RRRR: Type = 151007232;
    pub const SCE_GXM_TEXTURE_FORMAT_U16_0RRR: Type = 151011328;
    pub const SCE_GXM_TEXTURE_FORMAT_U16_1RRR: Type = 151015424;
    pub const SCE_GXM_TEXTURE_FORMAT_U16_R000: Type = 151019520;
    pub const SCE_GXM_TEXTURE_FORMAT_U16_R111: Type = 151023616;
    pub const SCE_GXM_TEXTURE_FORMAT_U16_R: Type = 150994944;
    pub const SCE_GXM_TEXTURE_FORMAT_S16_000R: Type = 167776256;
    pub const SCE_GXM_TEXTURE_FORMAT_S16_111R: Type = 167780352;
    pub const SCE_GXM_TEXTURE_FORMAT_S16_RRRR: Type = 167784448;
    pub const SCE_GXM_TEXTURE_FORMAT_S16_0RRR: Type = 167788544;
    pub const SCE_GXM_TEXTURE_FORMAT_S16_1RRR: Type = 167792640;
    pub const SCE_GXM_TEXTURE_FORMAT_S16_R000: Type = 167796736;
    pub const SCE_GXM_TEXTURE_FORMAT_S16_R111: Type = 167800832;
    pub const SCE_GXM_TEXTURE_FORMAT_S16_R: Type = 167772160;
    pub const SCE_GXM_TEXTURE_FORMAT_F16_000R: Type = 184553472;
    pub const SCE_GXM_TEXTURE_FORMAT_F16_111R: Type = 184557568;
    pub const SCE_GXM_TEXTURE_FORMAT_F16_RRRR: Type = 184561664;
    pub const SCE_GXM_TEXTURE_FORMAT_F16_0RRR: Type = 184565760;
    pub const SCE_GXM_TEXTURE_FORMAT_F16_1RRR: Type = 184569856;
    pub const SCE_GXM_TEXTURE_FORMAT_F16_R000: Type = 184573952;
    pub const SCE_GXM_TEXTURE_FORMAT_F16_R111: Type = 184578048;
    pub const SCE_GXM_TEXTURE_FORMAT_F16_R: Type = 184549376;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ABGR: Type = 201326592;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ARGB: Type = 201330688;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_RGBA: Type = 201334784;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_BGRA: Type = 201338880;
    pub const SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_1BGR: Type = 201342976;
    pub const SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_1RGB: Type = 201347072;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8X8_RGB1: Type = 201351168;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8X8_BGR1: Type = 201355264;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_ABGR: Type = 218103808;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_ARGB: Type = 218107904;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_RGBA: Type = 218112000;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_BGRA: Type = 218116096;
    pub const SCE_GXM_TEXTURE_FORMAT_X8S8S8S8_1BGR: Type = 218120192;
    pub const SCE_GXM_TEXTURE_FORMAT_X8S8S8S8_1RGB: Type = 218124288;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8X8_RGB1: Type = 218128384;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8X8_BGR1: Type = 218132480;
    pub const SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_ABGR: Type = 234881024;
    pub const SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_ARGB: Type = 234885120;
    pub const SCE_GXM_TEXTURE_FORMAT_U10U10U10U2_RGBA: Type = 234889216;
    pub const SCE_GXM_TEXTURE_FORMAT_U10U10U10U2_BGRA: Type = 234893312;
    pub const SCE_GXM_TEXTURE_FORMAT_X2U10U10U10_1BGR: Type = 234897408;
    pub const SCE_GXM_TEXTURE_FORMAT_X2U10U10U10_1RGB: Type = 234901504;
    pub const SCE_GXM_TEXTURE_FORMAT_U10U10U10X2_RGB1: Type = 234905600;
    pub const SCE_GXM_TEXTURE_FORMAT_U10U10U10X2_BGR1: Type = 234909696;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16_00GR: Type = 251662336;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16_GRRR: Type = 251666432;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16_RGGG: Type = 251670528;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16_GRGR: Type = 251674624;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16_00RG: Type = 251678720;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16_GR: Type = 251658240;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16_00GR: Type = 268439552;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16_GRRR: Type = 268443648;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16_RGGG: Type = 268447744;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16_GRGR: Type = 268451840;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16_00RG: Type = 268455936;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16_GR: Type = 268435456;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16_00GR: Type = 285216768;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16_GRRR: Type = 285220864;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16_RGGG: Type = 285224960;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16_GRGR: Type = 285229056;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16_00RG: Type = 285233152;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16_GR: Type = 285212672;
    pub const SCE_GXM_TEXTURE_FORMAT_F32_000R: Type = 301993984;
    pub const SCE_GXM_TEXTURE_FORMAT_F32_111R: Type = 301998080;
    pub const SCE_GXM_TEXTURE_FORMAT_F32_RRRR: Type = 302002176;
    pub const SCE_GXM_TEXTURE_FORMAT_F32_0RRR: Type = 302006272;
    pub const SCE_GXM_TEXTURE_FORMAT_F32_1RRR: Type = 302010368;
    pub const SCE_GXM_TEXTURE_FORMAT_F32_R000: Type = 302014464;
    pub const SCE_GXM_TEXTURE_FORMAT_F32_R111: Type = 302018560;
    pub const SCE_GXM_TEXTURE_FORMAT_F32_R: Type = 301989888;
    pub const SCE_GXM_TEXTURE_FORMAT_F32M_000R: Type = 318771200;
    pub const SCE_GXM_TEXTURE_FORMAT_F32M_111R: Type = 318775296;
    pub const SCE_GXM_TEXTURE_FORMAT_F32M_RRRR: Type = 318779392;
    pub const SCE_GXM_TEXTURE_FORMAT_F32M_0RRR: Type = 318783488;
    pub const SCE_GXM_TEXTURE_FORMAT_F32M_1RRR: Type = 318787584;
    pub const SCE_GXM_TEXTURE_FORMAT_F32M_R000: Type = 318791680;
    pub const SCE_GXM_TEXTURE_FORMAT_F32M_R111: Type = 318795776;
    pub const SCE_GXM_TEXTURE_FORMAT_F32M_R: Type = 318767104;
    pub const SCE_GXM_TEXTURE_FORMAT_X8S8S8U8_1BGR: Type = 335544320;
    pub const SCE_GXM_TEXTURE_FORMAT_X8U8S8S8_1RGB: Type = 335548416;
    pub const SCE_GXM_TEXTURE_FORMAT_X8U24_SD: Type = 352321536;
    pub const SCE_GXM_TEXTURE_FORMAT_U24X8_DS: Type = 352325632;
    pub const SCE_GXM_TEXTURE_FORMAT_U32_000R: Type = 385880064;
    pub const SCE_GXM_TEXTURE_FORMAT_U32_111R: Type = 385884160;
    pub const SCE_GXM_TEXTURE_FORMAT_U32_RRRR: Type = 385888256;
    pub const SCE_GXM_TEXTURE_FORMAT_U32_0RRR: Type = 385892352;
    pub const SCE_GXM_TEXTURE_FORMAT_U32_1RRR: Type = 385896448;
    pub const SCE_GXM_TEXTURE_FORMAT_U32_R000: Type = 385900544;
    pub const SCE_GXM_TEXTURE_FORMAT_U32_R111: Type = 385904640;
    pub const SCE_GXM_TEXTURE_FORMAT_U32_R: Type = 385875968;
    pub const SCE_GXM_TEXTURE_FORMAT_S32_000R: Type = 402657280;
    pub const SCE_GXM_TEXTURE_FORMAT_S32_111R: Type = 402661376;
    pub const SCE_GXM_TEXTURE_FORMAT_S32_RRRR: Type = 402665472;
    pub const SCE_GXM_TEXTURE_FORMAT_S32_0RRR: Type = 402669568;
    pub const SCE_GXM_TEXTURE_FORMAT_S32_1RRR: Type = 402673664;
    pub const SCE_GXM_TEXTURE_FORMAT_S32_R000: Type = 402677760;
    pub const SCE_GXM_TEXTURE_FORMAT_S32_R111: Type = 402681856;
    pub const SCE_GXM_TEXTURE_FORMAT_S32_R: Type = 402653184;
    pub const SCE_GXM_TEXTURE_FORMAT_SE5M9M9M9_BGR: Type = 419430400;
    pub const SCE_GXM_TEXTURE_FORMAT_SE5M9M9M9_RGB: Type = 419434496;
    pub const SCE_GXM_TEXTURE_FORMAT_F10F11F11_BGR: Type = 436207616;
    pub const SCE_GXM_TEXTURE_FORMAT_F11F11F10_RGB: Type = 436211712;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_ABGR: Type = 452984832;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_ARGB: Type = 452988928;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_RGBA: Type = 452993024;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_BGRA: Type = 452997120;
    pub const SCE_GXM_TEXTURE_FORMAT_X16F16F16F16_1BGR: Type = 453001216;
    pub const SCE_GXM_TEXTURE_FORMAT_X16F16F16F16_1RGB: Type = 453005312;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16X16_RGB1: Type = 453009408;
    pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16X16_BGR1: Type = 453013504;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_ABGR: Type = 469762048;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_ARGB: Type = 469766144;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_RGBA: Type = 469770240;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_BGRA: Type = 469774336;
    pub const SCE_GXM_TEXTURE_FORMAT_X16U16U16U16_1BGR: Type = 469778432;
    pub const SCE_GXM_TEXTURE_FORMAT_X16U16U16U16_1RGB: Type = 469782528;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16X16_RGB1: Type = 469786624;
    pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16X16_BGR1: Type = 469790720;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_ABGR: Type = 486539264;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_ARGB: Type = 486543360;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_RGBA: Type = 486547456;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_BGRA: Type = 486551552;
    pub const SCE_GXM_TEXTURE_FORMAT_X16S16S16S16_1BGR: Type = 486555648;
    pub const SCE_GXM_TEXTURE_FORMAT_X16S16S16S16_1RGB: Type = 486559744;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16X16_RGB1: Type = 486563840;
    pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16X16_BGR1: Type = 486567936;
    pub const SCE_GXM_TEXTURE_FORMAT_F32F32_00GR: Type = 503320576;
    pub const SCE_GXM_TEXTURE_FORMAT_F32F32_GRRR: Type = 503324672;
    pub const SCE_GXM_TEXTURE_FORMAT_F32F32_RGGG: Type = 503328768;
    pub const SCE_GXM_TEXTURE_FORMAT_F32F32_GRGR: Type = 503332864;
    pub const SCE_GXM_TEXTURE_FORMAT_F32F32_00RG: Type = 503336960;
    pub const SCE_GXM_TEXTURE_FORMAT_F32F32_GR: Type = 503316480;
    pub const SCE_GXM_TEXTURE_FORMAT_U32U32_00GR: Type = 520097792;
    pub const SCE_GXM_TEXTURE_FORMAT_U32U32_GRRR: Type = 520101888;
    pub const SCE_GXM_TEXTURE_FORMAT_U32U32_RGGG: Type = 520105984;
    pub const SCE_GXM_TEXTURE_FORMAT_U32U32_GRGR: Type = 520110080;
    pub const SCE_GXM_TEXTURE_FORMAT_U32U32_00RG: Type = 520114176;
    pub const SCE_GXM_TEXTURE_FORMAT_U32U32_GR: Type = 520093696;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_ABGR: Type = 2147483648;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_1BGR: Type = 2147500032;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_ABGR: Type = 2164260864;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_1BGR: Type = 2164277248;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_ABGR: Type = 2181038080;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_1BGR: Type = 2181054464;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_ABGR: Type = 2197815296;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_1BGR: Type = 2197831680;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC1_ABGR: Type = 2231369728;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC1_1BGR: Type = 2231386112;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC2_ABGR: Type = 2248146944;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC2_1BGR: Type = 2248163328;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC3_ABGR: Type = 2264924160;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC3_1BGR: Type = 2264940544;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC4_000R: Type = 2281705472;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC4_111R: Type = 2281709568;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC4_RRRR: Type = 2281713664;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC4_0RRR: Type = 2281717760;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC4_1RRR: Type = 2281721856;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC4_R000: Type = 2281725952;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC4_R111: Type = 2281730048;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC4_R: Type = 2281701376;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC4_000R: Type = 2298482688;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC4_111R: Type = 2298486784;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC4_RRRR: Type = 2298490880;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC4_0RRR: Type = 2298494976;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC4_1RRR: Type = 2298499072;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC4_R000: Type = 2298503168;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC4_R111: Type = 2298507264;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC4_R: Type = 2298478592;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC5_00GR: Type = 2315259904;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC5_GRRR: Type = 2315264000;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC5_RGGG: Type = 2315268096;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC5_GRGR: Type = 2315272192;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC5_00RG: Type = 2315276288;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC5_GR: Type = 2315255808;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC5_00GR: Type = 2332037120;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC5_GRRR: Type = 2332041216;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC5_RGGG: Type = 2332045312;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC5_GRGR: Type = 2332049408;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC5_00RG: Type = 2332053504;
    pub const SCE_GXM_TEXTURE_FORMAT_SBC5_GR: Type = 2332033024;
    pub const SCE_GXM_TEXTURE_FORMAT_YUV420P2_CSC0: Type = 2415919104;
    pub const SCE_GXM_TEXTURE_FORMAT_YVU420P2_CSC0: Type = 2415923200;
    pub const SCE_GXM_TEXTURE_FORMAT_YUV420P2_CSC1: Type = 2415927296;
    pub const SCE_GXM_TEXTURE_FORMAT_YVU420P2_CSC1: Type = 2415931392;
    pub const SCE_GXM_TEXTURE_FORMAT_YUV420P3_CSC0: Type = 2432696320;
    pub const SCE_GXM_TEXTURE_FORMAT_YVU420P3_CSC0: Type = 2432700416;
    pub const SCE_GXM_TEXTURE_FORMAT_YUV420P3_CSC1: Type = 2432704512;
    pub const SCE_GXM_TEXTURE_FORMAT_YVU420P3_CSC1: Type = 2432708608;
    pub const SCE_GXM_TEXTURE_FORMAT_YUYV422_CSC0: Type = 2449473536;
    pub const SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC0: Type = 2449477632;
    pub const SCE_GXM_TEXTURE_FORMAT_UYVY422_CSC0: Type = 2449481728;
    pub const SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC0: Type = 2449485824;
    pub const SCE_GXM_TEXTURE_FORMAT_YUYV422_CSC1: Type = 2449489920;
    pub const SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC1: Type = 2449494016;
    pub const SCE_GXM_TEXTURE_FORMAT_UYVY422_CSC1: Type = 2449498112;
    pub const SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC1: Type = 2449502208;
    pub const SCE_GXM_TEXTURE_FORMAT_P4_ABGR: Type = 2483027968;
    pub const SCE_GXM_TEXTURE_FORMAT_P4_ARGB: Type = 2483032064;
    pub const SCE_GXM_TEXTURE_FORMAT_P4_RGBA: Type = 2483036160;
    pub const SCE_GXM_TEXTURE_FORMAT_P4_BGRA: Type = 2483040256;
    pub const SCE_GXM_TEXTURE_FORMAT_P4_1BGR: Type = 2483044352;
    pub const SCE_GXM_TEXTURE_FORMAT_P4_1RGB: Type = 2483048448;
    pub const SCE_GXM_TEXTURE_FORMAT_P4_RGB1: Type = 2483052544;
    pub const SCE_GXM_TEXTURE_FORMAT_P4_BGR1: Type = 2483056640;
    pub const SCE_GXM_TEXTURE_FORMAT_P8_ABGR: Type = 2499805184;
    pub const SCE_GXM_TEXTURE_FORMAT_P8_ARGB: Type = 2499809280;
    pub const SCE_GXM_TEXTURE_FORMAT_P8_RGBA: Type = 2499813376;
    pub const SCE_GXM_TEXTURE_FORMAT_P8_BGRA: Type = 2499817472;
    pub const SCE_GXM_TEXTURE_FORMAT_P8_1BGR: Type = 2499821568;
    pub const SCE_GXM_TEXTURE_FORMAT_P8_1RGB: Type = 2499825664;
    pub const SCE_GXM_TEXTURE_FORMAT_P8_RGB1: Type = 2499829760;
    pub const SCE_GXM_TEXTURE_FORMAT_P8_BGR1: Type = 2499833856;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8_BGR: Type = 2550136832;
    pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8_RGB: Type = 2550140928;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8_BGR: Type = 2566914048;
    pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8_RGB: Type = 2566918144;
    pub const SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_ABGR: Type = 2583691264;
    pub const SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_ARGB: Type = 2583695360;
    pub const SCE_GXM_TEXTURE_FORMAT_F10F10F10U2_RGBA: Type = 2583699456;
    pub const SCE_GXM_TEXTURE_FORMAT_F10F10F10U2_BGRA: Type = 2583703552;
    pub const SCE_GXM_TEXTURE_FORMAT_X2F10F10F10_1BGR: Type = 2583707648;
    pub const SCE_GXM_TEXTURE_FORMAT_X2F10F10F10_1RGB: Type = 2583711744;
    pub const SCE_GXM_TEXTURE_FORMAT_F10F10F10X2_RGB1: Type = 2583715840;
    pub const SCE_GXM_TEXTURE_FORMAT_F10F10F10X2_BGR1: Type = 2583719936;
    pub const SCE_GXM_TEXTURE_FORMAT_L8: Type = 20480;
    pub const SCE_GXM_TEXTURE_FORMAT_A8: Type = 24576;
    pub const SCE_GXM_TEXTURE_FORMAT_R8: Type = 4096;
    pub const SCE_GXM_TEXTURE_FORMAT_A4R4G4B4: Type = 33558528;
    pub const SCE_GXM_TEXTURE_FORMAT_A1R5G5B5: Type = 67112960;
    pub const SCE_GXM_TEXTURE_FORMAT_R5G6B5: Type = 83890176;
    pub const SCE_GXM_TEXTURE_FORMAT_A8L8: Type = 117448704;
    pub const SCE_GXM_TEXTURE_FORMAT_L8A8: Type = 117452800;
    pub const SCE_GXM_TEXTURE_FORMAT_G8R8: Type = 117444608;
    pub const SCE_GXM_TEXTURE_FORMAT_L16: Type = 151015424;
    pub const SCE_GXM_TEXTURE_FORMAT_A16: Type = 151019520;
    pub const SCE_GXM_TEXTURE_FORMAT_R16: Type = 150999040;
    pub const SCE_GXM_TEXTURE_FORMAT_D16: Type = 150994944;
    pub const SCE_GXM_TEXTURE_FORMAT_LF16: Type = 184569856;
    pub const SCE_GXM_TEXTURE_FORMAT_AF16: Type = 184573952;
    pub const SCE_GXM_TEXTURE_FORMAT_RF16: Type = 184553472;
    pub const SCE_GXM_TEXTURE_FORMAT_A8R8G8B8: Type = 201330688;
    pub const SCE_GXM_TEXTURE_FORMAT_A8B8G8R8: Type = 201326592;
    pub const SCE_GXM_TEXTURE_FORMAT_AF16LF16: Type = 285220864;
    pub const SCE_GXM_TEXTURE_FORMAT_LF16AF16: Type = 285224960;
    pub const SCE_GXM_TEXTURE_FORMAT_GF16RF16: Type = 285216768;
    pub const SCE_GXM_TEXTURE_FORMAT_LF32M: Type = 318787584;
    pub const SCE_GXM_TEXTURE_FORMAT_AF32M: Type = 318791680;
    pub const SCE_GXM_TEXTURE_FORMAT_RF32M: Type = 318771200;
    pub const SCE_GXM_TEXTURE_FORMAT_DF32M: Type = 318767104;
    pub const SCE_GXM_TEXTURE_FORMAT_VYUY: Type = 2449485824;
    pub const SCE_GXM_TEXTURE_FORMAT_YVYU: Type = 2449477632;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC1: Type = 2231369728;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC2: Type = 2248146944;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC3: Type = 2264924160;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRT2BPP: Type = 2147483648;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRT4BPP: Type = 2164260864;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP: Type = 2181038080;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP: Type = 2197815296;
}
pub mod SceGxmTextureType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_SWIZZLED: Type = 0;
    pub const SCE_GXM_TEXTURE_CUBE: Type = 1073741824;
    pub const SCE_GXM_TEXTURE_LINEAR: Type = 1610612736;
    pub const SCE_GXM_TEXTURE_TILED: Type = 2147483648;
    pub const SCE_GXM_TEXTURE_SWIZZLED_ARBITRARY: Type = 2684354560;
    pub const SCE_GXM_TEXTURE_LINEAR_STRIDED: Type = 3221225472;
    pub const SCE_GXM_TEXTURE_CUBE_ARBITRARY: Type = 3758096384;
}
pub mod SceGxmTextureFilter {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_FILTER_POINT: Type = 0;
    pub const SCE_GXM_TEXTURE_FILTER_LINEAR: Type = 1;
    pub const SCE_GXM_TEXTURE_FILTER_MIPMAP_LINEAR: Type = 2;
    pub const SCE_GXM_TEXTURE_FILTER_MIPMAP_POINT: Type = 3;
}
pub mod SceGxmTextureMipFilter {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_MIP_FILTER_DISABLED: Type = 0;
    pub const SCE_GXM_TEXTURE_MIP_FILTER_ENABLED: Type = 512;
}
pub mod SceGxmTextureAddrMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_ADDR_REPEAT: Type = 0;
    pub const SCE_GXM_TEXTURE_ADDR_MIRROR: Type = 1;
    pub const SCE_GXM_TEXTURE_ADDR_CLAMP: Type = 2;
    pub const SCE_GXM_TEXTURE_ADDR_MIRROR_CLAMP: Type = 3;
    pub const SCE_GXM_TEXTURE_ADDR_REPEAT_IGNORE_BORDER: Type = 4;
    pub const SCE_GXM_TEXTURE_ADDR_CLAMP_FULL_BORDER: Type = 5;
    pub const SCE_GXM_TEXTURE_ADDR_CLAMP_IGNORE_BORDER: Type = 6;
    pub const SCE_GXM_TEXTURE_ADDR_CLAMP_HALF_BORDER: Type = 7;
}
pub mod SceGxmTextureGammaMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_GAMMA_NONE: Type = 0;
    pub const SCE_GXM_TEXTURE_GAMMA_R: Type = 134217728;
    pub const SCE_GXM_TEXTURE_GAMMA_GR: Type = 402653184;
    pub const SCE_GXM_TEXTURE_GAMMA_BGR: Type = 134217728;
}
pub mod SceGxmTextureNormalizeMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TEXTURE_NORMALIZE_DISABLED: Type = 0;
    pub const SCE_GXM_TEXTURE_NORMALIZE_ENABLED: Type = 2147483648;
}
pub mod SceGxmIndexFormat {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_INDEX_FORMAT_U16: Type = 0;
    pub const SCE_GXM_INDEX_FORMAT_U32: Type = 16777216;
}
pub mod SceGxmIndexSource {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_INDEX_SOURCE_INDEX_16BIT: Type = 0;
    pub const SCE_GXM_INDEX_SOURCE_INDEX_32BIT: Type = 1;
    pub const SCE_GXM_INDEX_SOURCE_INSTANCE_16BIT: Type = 2;
    pub const SCE_GXM_INDEX_SOURCE_INSTANCE_32BIT: Type = 3;
}
pub mod SceGxmFragmentProgramMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_FRAGMENT_PROGRAM_DISABLED: Type = 2097152;
    pub const SCE_GXM_FRAGMENT_PROGRAM_ENABLED: Type = 0;
}
pub mod SceGxmDepthWriteMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_DEPTH_WRITE_DISABLED: Type = 1048576;
    pub const SCE_GXM_DEPTH_WRITE_ENABLED: Type = 0;
}
pub mod SceGxmLineFillLastPixelMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_LINE_FILL_LAST_PIXEL_DISABLED: Type = 0;
    pub const SCE_GXM_LINE_FILL_LAST_PIXEL_ENABLED: Type = 524288;
}
pub mod SceGxmTwoSidedMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TWO_SIDED_DISABLED: Type = 0;
    pub const SCE_GXM_TWO_SIDED_ENABLED: Type = 2048;
}
pub mod SceGxmWClampMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_WCLAMP_MODE_DISABLED: Type = 0;
    pub const SCE_GXM_WCLAMP_MODE_ENABLED: Type = 32768;
}
pub mod SceGxmViewportMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_VIEWPORT_DISABLED: Type = 65536;
    pub const SCE_GXM_VIEWPORT_ENABLED: Type = 0;
}
pub mod SceGxmWBufferMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_WBUFFER_DISABLED: Type = 0;
    pub const SCE_GXM_WBUFFER_ENABLED: Type = 16384;
}
pub mod SceGxmDepthStencilForceLoadMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_DEPTH_STENCIL_FORCE_LOAD_DISABLED: Type = 0;
    pub const SCE_GXM_DEPTH_STENCIL_FORCE_LOAD_ENABLED: Type = 2;
}
pub mod SceGxmDepthStencilForceStoreMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_DEPTH_STENCIL_FORCE_STORE_DISABLED: Type = 0;
    pub const SCE_GXM_DEPTH_STENCIL_FORCE_STORE_ENABLED: Type = 4;
}
pub mod SceGxmSceneFlags {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_SCENE_FRAGMENT_SET_DEPENDENCY: Type = 1;
    pub const SCE_GXM_SCENE_VERTEX_WAIT_FOR_DEPENDENCY: Type = 2;
    pub const SCE_GXM_SCENE_FRAGMENT_TRANSFER_SYNC: Type = 4;
    pub const SCE_GXM_SCENE_VERTEX_TRANSFER_SYNC: Type = 8;
}
pub mod SceGxmMidSceneFlags {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_MIDSCENE_PRESERVE_DEFAULT_UNIFORM_BUFFERS: Type = 1;
}
pub mod SceGxmColorSurfaceScaleMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_SURFACE_SCALE_NONE: Type = 0;
    pub const SCE_GXM_COLOR_SURFACE_SCALE_MSAA_DOWNSCALE: Type = 1;
}
pub mod SceGxmOutputRegisterSize {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_OUTPUT_REGISTER_SIZE_32BIT: Type = 0;
    pub const SCE_GXM_OUTPUT_REGISTER_SIZE_64BIT: Type = 1;
}
pub mod SceGxmVisibilityTestMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_VISIBILITY_TEST_DISABLED: Type = 0;
    pub const SCE_GXM_VISIBILITY_TEST_ENABLED: Type = 16384;
}
pub mod SceGxmVisibilityTestOp {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_VISIBILITY_TEST_OP_INCREMENT: Type = 0;
    pub const SCE_GXM_VISIBILITY_TEST_OP_SET: Type = 262144;
}
pub mod SceGxmYuvProfile {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_YUV_PROFILE_BT601_STANDARD: Type = 0;
    pub const SCE_GXM_YUV_PROFILE_BT709_STANDARD: Type = 1;
    pub const SCE_GXM_YUV_PROFILE_BT601_FULL_RANGE: Type = 2;
    pub const SCE_GXM_YUV_PROFILE_BT709_FULL_RANGE: Type = 3;
}
pub mod SceGxmBlendFunc {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_BLEND_FUNC_NONE: Type = 0;
    pub const SCE_GXM_BLEND_FUNC_ADD: Type = 1;
    pub const SCE_GXM_BLEND_FUNC_SUBTRACT: Type = 2;
    pub const SCE_GXM_BLEND_FUNC_REVERSE_SUBTRACT: Type = 3;
    pub const SCE_GXM_BLEND_FUNC_MIN: Type = 4;
    pub const SCE_GXM_BLEND_FUNC_MAX: Type = 5;
}
pub mod SceGxmBlendFactor {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_BLEND_FACTOR_ZERO: Type = 0;
    pub const SCE_GXM_BLEND_FACTOR_ONE: Type = 1;
    pub const SCE_GXM_BLEND_FACTOR_SRC_COLOR: Type = 2;
    pub const SCE_GXM_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: Type = 3;
    pub const SCE_GXM_BLEND_FACTOR_SRC_ALPHA: Type = 4;
    pub const SCE_GXM_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: Type = 5;
    pub const SCE_GXM_BLEND_FACTOR_DST_COLOR: Type = 6;
    pub const SCE_GXM_BLEND_FACTOR_ONE_MINUS_DST_COLOR: Type = 7;
    pub const SCE_GXM_BLEND_FACTOR_DST_ALPHA: Type = 8;
    pub const SCE_GXM_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: Type = 9;
    pub const SCE_GXM_BLEND_FACTOR_SRC_ALPHA_SATURATE: Type = 10;
    pub const SCE_GXM_BLEND_FACTOR_DST_ALPHA_SATURATE: Type = 11;
}
pub mod SceGxmColorMask {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_COLOR_MASK_NONE: Type = 0;
    pub const SCE_GXM_COLOR_MASK_A: Type = 1;
    pub const SCE_GXM_COLOR_MASK_R: Type = 2;
    pub const SCE_GXM_COLOR_MASK_G: Type = 4;
    pub const SCE_GXM_COLOR_MASK_B: Type = 8;
    pub const SCE_GXM_COLOR_MASK_ALL: Type = 15;
}
pub mod SceGxmTransferFormat {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TRANSFER_FORMAT_U8_R: Type = 0;
    pub const SCE_GXM_TRANSFER_FORMAT_U4U4U4U4_ABGR: Type = 65536;
    pub const SCE_GXM_TRANSFER_FORMAT_U1U5U5U5_ABGR: Type = 131072;
    pub const SCE_GXM_TRANSFER_FORMAT_U5U6U5_BGR: Type = 196608;
    pub const SCE_GXM_TRANSFER_FORMAT_U8U8_GR: Type = 262144;
    pub const SCE_GXM_TRANSFER_FORMAT_U8U8U8_BGR: Type = 327680;
    pub const SCE_GXM_TRANSFER_FORMAT_U8U8U8U8_ABGR: Type = 393216;
    pub const SCE_GXM_TRANSFER_FORMAT_VYUY422: Type = 458752;
    pub const SCE_GXM_TRANSFER_FORMAT_YVYU422: Type = 524288;
    pub const SCE_GXM_TRANSFER_FORMAT_UYVY422: Type = 589824;
    pub const SCE_GXM_TRANSFER_FORMAT_YUYV422: Type = 655360;
    pub const SCE_GXM_TRANSFER_FORMAT_U2U10U10U10_ABGR: Type = 851968;
    pub const SCE_GXM_TRANSFER_FORMAT_RAW16: Type = 983040;
    pub const SCE_GXM_TRANSFER_FORMAT_RAW32: Type = 1114112;
    pub const SCE_GXM_TRANSFER_FORMAT_RAW64: Type = 1179648;
    pub const SCE_GXM_TRANSFER_FORMAT_RAW128: Type = 1245184;
}
pub mod SceGxmTransferFlags {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TRANSFER_FRAGMENT_SYNC: Type = 1;
    pub const SCE_GXM_TRANSFER_VERTEX_SYNC: Type = 2;
}
pub mod SceGxmTransferColorKeyMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TRANSFER_COLORKEY_NONE: Type = 0;
    pub const SCE_GXM_TRANSFER_COLORKEY_PASS: Type = 1;
    pub const SCE_GXM_TRANSFER_COLORKEY_REJECT: Type = 2;
}
pub mod SceGxmTransferType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_TRANSFER_LINEAR: Type = 0;
    pub const SCE_GXM_TRANSFER_TILED: Type = 4194304;
    pub const SCE_GXM_TRANSFER_SWIZZLED: Type = 8388608;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmBlendInfo {
    pub colorMask: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
impl SceGxmBlendInfo {
    #[inline]
    pub fn colorFunc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_colorFunc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn alphaFunc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_alphaFunc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn colorSrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_colorSrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn colorDst(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_colorDst(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn alphaSrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_alphaSrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn alphaDst(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_alphaDst(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        colorFunc: u8,
        alphaFunc: u8,
        colorSrc: u8,
        colorDst: u8,
        alphaSrc: u8,
        alphaDst: u8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let colorFunc: u8 = unsafe { ::core::mem::transmute(colorFunc) };
            colorFunc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let alphaFunc: u8 = unsafe { ::core::mem::transmute(alphaFunc) };
            alphaFunc as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let colorSrc: u8 = unsafe { ::core::mem::transmute(colorSrc) };
            colorSrc as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let colorDst: u8 = unsafe { ::core::mem::transmute(colorDst) };
            colorDst as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let alphaSrc: u8 = unsafe { ::core::mem::transmute(alphaSrc) };
            alphaSrc as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let alphaDst: u8 = unsafe { ::core::mem::transmute(alphaDst) };
            alphaDst as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmRenderTarget {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmSyncObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmVertexAttribute {
    pub streamIndex: u16,
    pub offset: u16,
    pub format: u8,
    pub componentCount: u8,
    pub regIndex: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmVertexStream {
    pub stride: u16,
    pub indexSource: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmTexture {
    pub __bindgen_anon_1: SceGxmTexture__bindgen_ty_1,
    pub __bindgen_anon_2: SceGxmTexture__bindgen_ty_2,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SceGxmTexture__bindgen_ty_1 {
    pub generic: SceGxmTexture__bindgen_ty_1__bindgen_ty_1,
    pub linear_strided: SceGxmTexture__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmTexture__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl SceGxmTexture__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn unk0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unk0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stride_ext(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_stride_ext(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn vaddr_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_vaddr_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn uaddr_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_uaddr_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mip_filter(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mip_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn min_filter(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_min_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn mag_filter(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_mag_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn unk1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_unk1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mip_count(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_mip_count(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn lod_bias(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_lod_bias(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn gamma_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_gamma_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn unk2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_unk2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn format0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_format0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        unk0: u32,
        stride_ext: u32,
        vaddr_mode: u32,
        uaddr_mode: u32,
        mip_filter: u32,
        min_filter: u32,
        mag_filter: u32,
        unk1: u32,
        mip_count: u32,
        lod_bias: u32,
        gamma_mode: u32,
        unk2: u32,
        format0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let unk0: u32 = unsafe { ::core::mem::transmute(unk0) };
            unk0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let stride_ext: u32 = unsafe { ::core::mem::transmute(stride_ext) };
            stride_ext as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let vaddr_mode: u32 = unsafe { ::core::mem::transmute(vaddr_mode) };
            vaddr_mode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let uaddr_mode: u32 = unsafe { ::core::mem::transmute(uaddr_mode) };
            uaddr_mode as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let mip_filter: u32 = unsafe { ::core::mem::transmute(mip_filter) };
            mip_filter as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let min_filter: u32 = unsafe { ::core::mem::transmute(min_filter) };
            min_filter as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let mag_filter: u32 = unsafe { ::core::mem::transmute(mag_filter) };
            mag_filter as u64
        });
        __bindgen_bitfield_unit.set(14usize, 3u8, {
            let unk1: u32 = unsafe { ::core::mem::transmute(unk1) };
            unk1 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 4u8, {
            let mip_count: u32 = unsafe { ::core::mem::transmute(mip_count) };
            mip_count as u64
        });
        __bindgen_bitfield_unit.set(21usize, 6u8, {
            let lod_bias: u32 = unsafe { ::core::mem::transmute(lod_bias) };
            lod_bias as u64
        });
        __bindgen_bitfield_unit.set(27usize, 2u8, {
            let gamma_mode: u32 = unsafe { ::core::mem::transmute(gamma_mode) };
            gamma_mode as u64
        });
        __bindgen_bitfield_unit.set(29usize, 2u8, {
            let unk2: u32 = unsafe { ::core::mem::transmute(unk2) };
            unk2 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let format0: u32 = unsafe { ::core::mem::transmute(format0) };
            format0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmTexture__bindgen_ty_1__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl SceGxmTexture__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn unk0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unk0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stride_ext(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_stride_ext(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn vaddr_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_vaddr_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn uaddr_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_uaddr_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn stride_low(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_stride_low(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mag_filter(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_mag_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn unk1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_unk1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn stride(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_stride(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn gamma_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_gamma_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn unk2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_unk2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn format0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_format0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        unk0: u32,
        stride_ext: u32,
        vaddr_mode: u32,
        uaddr_mode: u32,
        stride_low: u32,
        mag_filter: u32,
        unk1: u32,
        stride: u32,
        gamma_mode: u32,
        unk2: u32,
        format0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let unk0: u32 = unsafe { ::core::mem::transmute(unk0) };
            unk0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let stride_ext: u32 = unsafe { ::core::mem::transmute(stride_ext) };
            stride_ext as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let vaddr_mode: u32 = unsafe { ::core::mem::transmute(vaddr_mode) };
            vaddr_mode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let uaddr_mode: u32 = unsafe { ::core::mem::transmute(uaddr_mode) };
            uaddr_mode as u64
        });
        __bindgen_bitfield_unit.set(9usize, 3u8, {
            let stride_low: u32 = unsafe { ::core::mem::transmute(stride_low) };
            stride_low as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let mag_filter: u32 = unsafe { ::core::mem::transmute(mag_filter) };
            mag_filter as u64
        });
        __bindgen_bitfield_unit.set(14usize, 3u8, {
            let unk1: u32 = unsafe { ::core::mem::transmute(unk1) };
            unk1 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 10u8, {
            let stride: u32 = unsafe { ::core::mem::transmute(stride) };
            stride as u64
        });
        __bindgen_bitfield_unit.set(27usize, 2u8, {
            let gamma_mode: u32 = unsafe { ::core::mem::transmute(gamma_mode) };
            gamma_mode as u64
        });
        __bindgen_bitfield_unit.set(29usize, 2u8, {
            let unk2: u32 = unsafe { ::core::mem::transmute(unk2) };
            unk2 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let format0: u32 = unsafe { ::core::mem::transmute(format0) };
            format0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SceGxmTexture__bindgen_ty_2 {
    pub generic2: SceGxmTexture__bindgen_ty_2__bindgen_ty_1,
    pub swizzled_cube: SceGxmTexture__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmTexture__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl SceGxmTexture__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn height(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_height(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn width(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_width(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn base_format(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_base_format(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        height: u32,
        width: u32,
        base_format: u32,
        type_: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let height: u32 = unsafe { ::core::mem::transmute(height) };
            height as u64
        });
        __bindgen_bitfield_unit.set(12usize, 12u8, {
            let width: u32 = unsafe { ::core::mem::transmute(width) };
            width as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let base_format: u32 = unsafe { ::core::mem::transmute(base_format) };
            base_format as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let type_: u32 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmTexture__bindgen_ty_2__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl SceGxmTexture__bindgen_ty_2__bindgen_ty_2 {
    #[inline]
    pub fn height_pot(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_height_pot(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn width_pot(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_width_pot(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn base_format(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_base_format(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        height_pot: u32,
        reserved0: u32,
        width_pot: u32,
        reserved1: u32,
        base_format: u32,
        type_: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let height_pot: u32 = unsafe { ::core::mem::transmute(height_pot) };
            height_pot as u64
        });
        __bindgen_bitfield_unit.set(4usize, 12u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let width_pot: u32 = unsafe { ::core::mem::transmute(width_pot) };
            width_pot as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let reserved1: u32 = unsafe { ::core::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let base_format: u32 = unsafe { ::core::mem::transmute(base_format) };
            base_format as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let type_: u32 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
impl SceGxmTexture {
    #[inline]
    pub fn lod_min0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lod_min0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn data_addr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_data_addr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn palette_addr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_palette_addr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn lod_min1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(58usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lod_min1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(58usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn swizzle_format(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(60usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_swizzle_format(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(60usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn normalize_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_normalize_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lod_min0: u32,
        data_addr: u32,
        palette_addr: u32,
        lod_min1: u32,
        swizzle_format: u32,
        normalize_mode: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let lod_min0: u32 = unsafe { ::core::mem::transmute(lod_min0) };
            lod_min0 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let data_addr: u32 = unsafe { ::core::mem::transmute(data_addr) };
            data_addr as u64
        });
        __bindgen_bitfield_unit.set(32usize, 26u8, {
            let palette_addr: u32 = unsafe { ::core::mem::transmute(palette_addr) };
            palette_addr as u64
        });
        __bindgen_bitfield_unit.set(58usize, 2u8, {
            let lod_min1: u32 = unsafe { ::core::mem::transmute(lod_min1) };
            lod_min1 as u64
        });
        __bindgen_bitfield_unit.set(60usize, 3u8, {
            let swizzle_format: u32 = unsafe { ::core::mem::transmute(swizzle_format) };
            swizzle_format as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let normalize_mode: u32 = unsafe { ::core::mem::transmute(normalize_mode) };
            normalize_mode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmCommandList {
    pub words: [u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmColorSurface {
    pub pbeSidebandWord: crate::ctypes::c_uint,
    pub pbeEmitWords: [crate::ctypes::c_uint; 6usize],
    pub outputRegisterSize: crate::ctypes::c_uint,
    pub backgroundTex: SceGxmTexture,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmDepthStencilSurface {
    pub zlsControl: crate::ctypes::c_uint,
    pub depthData: *mut crate::ctypes::c_void,
    pub stencilData: *mut crate::ctypes::c_void,
    pub backgroundDepth: f32,
    pub backgroundControl: crate::ctypes::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmAuxiliarySurface {
    pub colorFormat: u32,
    pub type_: u32,
    pub width: u32,
    pub height: u32,
    pub stride: u32,
    pub data: *mut crate::ctypes::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmNotification {
    pub address: *mut crate::ctypes::c_uint,
    pub value: crate::ctypes::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmValidRegion {
    pub xMax: u32,
    pub yMax: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmContext {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct SceGxmContextParams {
    pub hostMem: *mut crate::ctypes::c_void,
    pub hostMemSize: SceSize,
    pub vdmRingBufferMem: *mut crate::ctypes::c_void,
    pub vdmRingBufferMemSize: SceSize,
    pub vertexRingBufferMem: *mut crate::ctypes::c_void,
    pub vertexRingBufferMemSize: SceSize,
    pub fragmentRingBufferMem: *mut crate::ctypes::c_void,
    pub fragmentRingBufferMemSize: SceSize,
    pub fragmentUsseRingBufferMem: *mut crate::ctypes::c_void,
    pub fragmentUsseRingBufferMemSize: SceSize,
    pub fragmentUsseRingBufferOffset: crate::ctypes::c_uint,
}
#[repr(C)]
pub struct SceGxmDeferredContextParams {
    pub hostMem: *mut crate::ctypes::c_void,
    pub hostMemSize: SceSize,
    pub vdmCallback: ::core::option::Option<
        unsafe extern "C" fn(
            args: *mut crate::ctypes::c_void,
            requestedSize: SceSize,
            size: *mut SceSize,
        ) -> *mut crate::ctypes::c_void,
    >,
    pub vertexCallback: ::core::option::Option<
        unsafe extern "C" fn(
            args: *mut crate::ctypes::c_void,
            requestedSize: SceSize,
            size: *mut SceSize,
        ) -> *mut crate::ctypes::c_void,
    >,
    pub fragmentCallback: ::core::option::Option<
        unsafe extern "C" fn(
            args: *mut crate::ctypes::c_void,
            requestedSize: SceSize,
            size: *mut SceSize,
        ) -> *mut crate::ctypes::c_void,
    >,
    pub callbackData: *mut crate::ctypes::c_void,
    pub vdmRingBufferMem: *mut crate::ctypes::c_void,
    pub vdmRingBufferMemSize: SceSize,
    pub vertexRingBufferMem: *mut crate::ctypes::c_void,
    pub vertexRingBufferMemSize: SceSize,
    pub fragmentRingBufferMem: *mut crate::ctypes::c_void,
    pub fragmentRingBufferMemSize: SceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmVertexProgram {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmFragmentProgram {
    _unused: [u8; 0],
}
pub mod SceGxmPrecomputedWordCount {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_PRECOMPUTED_VERTEX_STATE_WORD_COUNT: Type = 7;
    pub const SCE_GXM_PRECOMPUTED_FRAGMENT_STATE_WORD_COUNT: Type = 9;
    pub const SCE_GXM_PRECOMPUTED_DRAW_WORD_COUNT: Type = 11;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmPrecomputedVertexState {
    pub data: [crate::ctypes::c_uint; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmPrecomputedFragmentState {
    pub data: [crate::ctypes::c_uint; 9usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmPrecomputedDraw {
    pub data: [crate::ctypes::c_uint; 11usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmProgram {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmProgramParameter {
    _unused: [u8; 0],
}
pub mod SceGxmProgramType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_VERTEX_PROGRAM: Type = 0;
    pub const SCE_GXM_FRAGMENT_PROGRAM: Type = 1;
}
pub mod SceGxmParameterCategory {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_PARAMETER_CATEGORY_ATTRIBUTE: Type = 0;
    pub const SCE_GXM_PARAMETER_CATEGORY_UNIFORM: Type = 1;
    pub const SCE_GXM_PARAMETER_CATEGORY_SAMPLER: Type = 2;
    pub const SCE_GXM_PARAMETER_CATEGORY_AUXILIARY_SURFACE: Type = 3;
    pub const SCE_GXM_PARAMETER_CATEGORY_UNIFORM_BUFFER: Type = 4;
}
pub mod SceGxmParameterType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_PARAMETER_TYPE_F32: Type = 0;
    pub const SCE_GXM_PARAMETER_TYPE_F16: Type = 1;
    pub const SCE_GXM_PARAMETER_TYPE_C10: Type = 2;
    pub const SCE_GXM_PARAMETER_TYPE_U32: Type = 3;
    pub const SCE_GXM_PARAMETER_TYPE_S32: Type = 4;
    pub const SCE_GXM_PARAMETER_TYPE_U16: Type = 5;
    pub const SCE_GXM_PARAMETER_TYPE_S16: Type = 6;
    pub const SCE_GXM_PARAMETER_TYPE_U8: Type = 7;
    pub const SCE_GXM_PARAMETER_TYPE_S8: Type = 8;
    pub const SCE_GXM_PARAMETER_TYPE_AGGREGATE: Type = 9;
}
pub mod SceGxmParameterSemantic {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_PARAMETER_SEMANTIC_NONE: Type = 0;
    pub const SCE_GXM_PARAMETER_SEMANTIC_ATTR: Type = 1;
    pub const SCE_GXM_PARAMETER_SEMANTIC_BCOL: Type = 2;
    pub const SCE_GXM_PARAMETER_SEMANTIC_BINORMAL: Type = 3;
    pub const SCE_GXM_PARAMETER_SEMANTIC_BLENDINDICES: Type = 4;
    pub const SCE_GXM_PARAMETER_SEMANTIC_BLENDWEIGHT: Type = 5;
    pub const SCE_GXM_PARAMETER_SEMANTIC_COLOR: Type = 6;
    pub const SCE_GXM_PARAMETER_SEMANTIC_DIFFUSE: Type = 7;
    pub const SCE_GXM_PARAMETER_SEMANTIC_FOGCOORD: Type = 8;
    pub const SCE_GXM_PARAMETER_SEMANTIC_NORMAL: Type = 9;
    pub const SCE_GXM_PARAMETER_SEMANTIC_POINTSIZE: Type = 10;
    pub const SCE_GXM_PARAMETER_SEMANTIC_POSITION: Type = 11;
    pub const SCE_GXM_PARAMETER_SEMANTIC_SPECULAR: Type = 12;
    pub const SCE_GXM_PARAMETER_SEMANTIC_TANGENT: Type = 13;
    pub const SCE_GXM_PARAMETER_SEMANTIC_TEXCOORD: Type = 14;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmShaderPatcher {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmRegisteredProgram {
    _unused: [u8; 0],
}
pub type SceGxmShaderPatcherId = *mut SceGxmRegisteredProgram;
pub type SceGxmShaderPatcherHostAllocCallback = ::core::option::Option<
    unsafe extern "C" fn(
        userData: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> *mut crate::ctypes::c_void,
>;
pub type SceGxmShaderPatcherHostFreeCallback = ::core::option::Option<
    unsafe extern "C" fn(userData: *mut crate::ctypes::c_void, mem: *mut crate::ctypes::c_void),
>;
pub type SceGxmShaderPatcherBufferAllocCallback = ::core::option::Option<
    unsafe extern "C" fn(
        userData: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> *mut crate::ctypes::c_void,
>;
pub type SceGxmShaderPatcherBufferFreeCallback = ::core::option::Option<
    unsafe extern "C" fn(userData: *mut crate::ctypes::c_void, mem: *mut crate::ctypes::c_void),
>;
pub type SceGxmShaderPatcherUsseAllocCallback = ::core::option::Option<
    unsafe extern "C" fn(
        userData: *mut crate::ctypes::c_void,
        size: SceSize,
        usseOffset: *mut crate::ctypes::c_uint,
    ) -> *mut crate::ctypes::c_void,
>;
pub type SceGxmShaderPatcherUsseFreeCallback = ::core::option::Option<
    unsafe extern "C" fn(userData: *mut crate::ctypes::c_void, mem: *mut crate::ctypes::c_void),
>;
#[repr(C)]
pub struct SceGxmShaderPatcherParams {
    pub userData: *mut crate::ctypes::c_void,
    pub hostAllocCallback: SceGxmShaderPatcherHostAllocCallback,
    pub hostFreeCallback: SceGxmShaderPatcherHostFreeCallback,
    pub bufferAllocCallback: SceGxmShaderPatcherBufferAllocCallback,
    pub bufferFreeCallback: SceGxmShaderPatcherBufferFreeCallback,
    pub bufferMem: *mut crate::ctypes::c_void,
    pub bufferMemSize: SceSize,
    pub vertexUsseAllocCallback: SceGxmShaderPatcherUsseAllocCallback,
    pub vertexUsseFreeCallback: SceGxmShaderPatcherUsseFreeCallback,
    pub vertexUsseMem: *mut crate::ctypes::c_void,
    pub vertexUsseMemSize: SceSize,
    pub vertexUsseOffset: crate::ctypes::c_uint,
    pub fragmentUsseAllocCallback: SceGxmShaderPatcherUsseAllocCallback,
    pub fragmentUsseFreeCallback: SceGxmShaderPatcherUsseFreeCallback,
    pub fragmentUsseMem: *mut crate::ctypes::c_void,
    pub fragmentUsseMemSize: SceSize,
    pub fragmentUsseOffset: crate::ctypes::c_uint,
}
pub mod SceGxmRenderTargetFlags {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_GXM_RENDER_TARGET_CUSTOM_MULTISAMPLE_LOCATIONS: Type = 1;
}
#[repr(C)]
pub struct SceGxmRenderTargetParams {
    pub flags: u32,
    pub width: u16,
    pub height: u16,
    pub scenesPerFrame: u16,
    pub multisampleMode: u16,
    pub multisampleLocations: u32,
    pub driverMemBlock: SceUID,
}
extern "C" {
    pub fn sceGxmInitialize(params: *const SceGxmInitializeParams) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmVshInitialize(params: *const SceGxmInitializeParams) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTerminate() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmGetNotificationRegion() -> *mut crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmNotificationWait(notification: *const SceGxmNotification) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmMapMemory(
        base: *mut crate::ctypes::c_void,
        size: SceSize,
        attr: SceGxmMemoryAttribFlags::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmUnmapMemory(base: *mut crate::ctypes::c_void) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmMapVertexUsseMemory(
        base: *mut crate::ctypes::c_void,
        size: SceSize,
        offset: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmUnmapVertexUsseMemory(base: *mut crate::ctypes::c_void) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmMapFragmentUsseMemory(
        base: *mut crate::ctypes::c_void,
        size: SceSize,
        offset: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmUnmapFragmentUsseMemory(base: *mut crate::ctypes::c_void) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmDisplayQueueAddEntry(
        oldBuffer: *mut SceGxmSyncObject,
        newBuffer: *mut SceGxmSyncObject,
        callbackData: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmDisplayQueueFinish() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSyncObjectCreate(syncObject: *mut *mut SceGxmSyncObject) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSyncObjectDestroy(syncObject: *mut SceGxmSyncObject) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmCreateContext(
        params: *const SceGxmContextParams,
        context: *mut *mut SceGxmContext,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmDestroyContext(context: *mut SceGxmContext) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmCreateDeferredContext(
        params: *const SceGxmDeferredContextParams,
        context: *mut *mut SceGxmContext,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmDestroyDeferredContext(context: *mut SceGxmContext) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetValidationEnable(context: *mut SceGxmContext, enable: SceBool);
}
extern "C" {
    pub fn sceGxmSetVertexProgram(
        context: *mut SceGxmContext,
        vertexProgram: *const SceGxmVertexProgram,
    );
}
extern "C" {
    pub fn sceGxmSetFragmentProgram(
        context: *mut SceGxmContext,
        fragmentProgram: *const SceGxmFragmentProgram,
    );
}
extern "C" {
    pub fn sceGxmReserveVertexDefaultUniformBuffer(
        context: *mut SceGxmContext,
        uniformBuffer: *mut *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmReserveFragmentDefaultUniformBuffer(
        context: *mut SceGxmContext,
        uniformBuffer: *mut *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetVertexDefaultUniformBuffer(
        context: *mut SceGxmContext,
        uniformBuffer: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetFragmentDefaultUniformBuffer(
        context: *mut SceGxmContext,
        uniformBuffer: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetVertexStream(
        context: *mut SceGxmContext,
        streamIndex: crate::ctypes::c_uint,
        streamData: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetVertexTexture(
        context: *mut SceGxmContext,
        textureIndex: crate::ctypes::c_uint,
        texture: *const SceGxmTexture,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetFragmentTexture(
        context: *mut SceGxmContext,
        textureIndex: crate::ctypes::c_uint,
        texture: *const SceGxmTexture,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetVertexUniformBuffer(
        context: *mut SceGxmContext,
        bufferIndex: crate::ctypes::c_uint,
        bufferData: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetFragmentUniformBuffer(
        context: *mut SceGxmContext,
        bufferIndex: crate::ctypes::c_uint,
        bufferData: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetAuxiliarySurface(
        context: *mut SceGxmContext,
        surfaceIndex: crate::ctypes::c_uint,
        surface: *const SceGxmAuxiliarySurface,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetPrecomputedFragmentState(
        context: *mut SceGxmContext,
        precomputedState: *const SceGxmPrecomputedFragmentState,
    );
}
extern "C" {
    pub fn sceGxmSetPrecomputedVertexState(
        context: *mut SceGxmContext,
        precomputedState: *const SceGxmPrecomputedVertexState,
    );
}
extern "C" {
    pub fn sceGxmDrawPrecomputed(
        context: *mut SceGxmContext,
        precomputedDraw: *const SceGxmPrecomputedDraw,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmDraw(
        context: *mut SceGxmContext,
        primType: SceGxmPrimitiveType::Type,
        indexType: SceGxmIndexFormat::Type,
        indexData: *const crate::ctypes::c_void,
        indexCount: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmDrawInstanced(
        context: *mut SceGxmContext,
        primType: SceGxmPrimitiveType::Type,
        indexType: SceGxmIndexFormat::Type,
        indexData: *const crate::ctypes::c_void,
        indexCount: crate::ctypes::c_uint,
        indexWrap: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetVisibilityBuffer(
        context: *mut SceGxmContext,
        bufferBase: *mut crate::ctypes::c_void,
        stridePerCore: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmBeginScene(
        context: *mut SceGxmContext,
        flags: crate::ctypes::c_uint,
        renderTarget: *const SceGxmRenderTarget,
        validRegion: *const SceGxmValidRegion,
        vertexSyncObject: *mut SceGxmSyncObject,
        fragmentSyncObject: *mut SceGxmSyncObject,
        colorSurface: *const SceGxmColorSurface,
        depthStencil: *const SceGxmDepthStencilSurface,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmMidSceneFlush(
        context: *mut SceGxmContext,
        flags: crate::ctypes::c_uint,
        vertexSyncObject: *mut SceGxmSyncObject,
        vertexNotification: *const SceGxmNotification,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmEndScene(
        context: *mut SceGxmContext,
        vertexNotification: *const SceGxmNotification,
        fragmentNotification: *const SceGxmNotification,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmBeginCommandList(context: *mut SceGxmContext) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmExecuteCommandList(
        context: *mut SceGxmContext,
        list: *mut SceGxmCommandList,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmEndCommandList(
        context: *mut SceGxmContext,
        list: *mut SceGxmCommandList,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetFrontDepthFunc(context: *mut SceGxmContext, depthFunc: SceGxmDepthFunc::Type);
}
extern "C" {
    pub fn sceGxmSetBackDepthFunc(context: *mut SceGxmContext, depthFunc: SceGxmDepthFunc::Type);
}
extern "C" {
    pub fn sceGxmSetFrontFragmentProgramEnable(
        context: *mut SceGxmContext,
        enable: SceGxmFragmentProgramMode::Type,
    );
}
extern "C" {
    pub fn sceGxmSetBackFragmentProgramEnable(
        context: *mut SceGxmContext,
        enable: SceGxmFragmentProgramMode::Type,
    );
}
extern "C" {
    pub fn sceGxmSetFrontDepthWriteEnable(
        context: *mut SceGxmContext,
        enable: SceGxmDepthWriteMode::Type,
    );
}
extern "C" {
    pub fn sceGxmSetBackDepthWriteEnable(
        context: *mut SceGxmContext,
        enable: SceGxmDepthWriteMode::Type,
    );
}
extern "C" {
    pub fn sceGxmSetFrontLineFillLastPixelEnable(
        context: *mut SceGxmContext,
        enable: SceGxmLineFillLastPixelMode::Type,
    );
}
extern "C" {
    pub fn sceGxmSetBackLineFillLastPixelEnable(
        context: *mut SceGxmContext,
        enable: SceGxmLineFillLastPixelMode::Type,
    );
}
extern "C" {
    pub fn sceGxmSetFrontStencilRef(context: *mut SceGxmContext, sref: crate::ctypes::c_uint);
}
extern "C" {
    pub fn sceGxmSetBackStencilRef(context: *mut SceGxmContext, sref: crate::ctypes::c_uint);
}
extern "C" {
    pub fn sceGxmSetFrontPointLineWidth(context: *mut SceGxmContext, width: crate::ctypes::c_uint);
}
extern "C" {
    pub fn sceGxmSetBackPointLineWidth(context: *mut SceGxmContext, width: crate::ctypes::c_uint);
}
extern "C" {
    pub fn sceGxmSetFrontPolygonMode(context: *mut SceGxmContext, mode: SceGxmPolygonMode::Type);
}
extern "C" {
    pub fn sceGxmSetBackPolygonMode(context: *mut SceGxmContext, mode: SceGxmPolygonMode::Type);
}
extern "C" {
    pub fn sceGxmSetFrontStencilFunc(
        context: *mut SceGxmContext,
        func: SceGxmStencilFunc::Type,
        stencilFail: SceGxmStencilOp::Type,
        depthFail: SceGxmStencilOp::Type,
        depthPass: SceGxmStencilOp::Type,
        compareMask: crate::ctypes::c_uchar,
        writeMask: crate::ctypes::c_uchar,
    );
}
extern "C" {
    pub fn sceGxmSetBackStencilFunc(
        context: *mut SceGxmContext,
        func: SceGxmStencilFunc::Type,
        stencilFail: SceGxmStencilOp::Type,
        depthFail: SceGxmStencilOp::Type,
        depthPass: SceGxmStencilOp::Type,
        compareMask: crate::ctypes::c_uchar,
        writeMask: crate::ctypes::c_uchar,
    );
}
extern "C" {
    pub fn sceGxmSetFrontDepthBias(
        context: *mut SceGxmContext,
        factor: crate::ctypes::c_int,
        units: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn sceGxmSetBackDepthBias(
        context: *mut SceGxmContext,
        factor: crate::ctypes::c_int,
        units: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn sceGxmSetTwoSidedEnable(context: *mut SceGxmContext, enable: SceGxmTwoSidedMode::Type);
}
extern "C" {
    pub fn sceGxmSetViewport(
        context: *mut SceGxmContext,
        xOffset: f32,
        xScale: f32,
        yOffset: f32,
        yScale: f32,
        zOffset: f32,
        zScale: f32,
    );
}
extern "C" {
    pub fn sceGxmSetWClampValue(context: *mut SceGxmContext, clampValue: f32);
}
extern "C" {
    pub fn sceGxmSetWClampEnable(context: *mut SceGxmContext, enable: SceGxmWClampMode::Type);
}
extern "C" {
    pub fn sceGxmSetRegionClip(
        context: *mut SceGxmContext,
        mode: SceGxmRegionClipMode::Type,
        xMin: crate::ctypes::c_uint,
        yMin: crate::ctypes::c_uint,
        xMax: crate::ctypes::c_uint,
        yMax: crate::ctypes::c_uint,
    );
}
extern "C" {
    pub fn sceGxmSetDefaultRegionClipAndViewport(
        context: *mut SceGxmContext,
        xMax: crate::ctypes::c_uint,
        yMax: crate::ctypes::c_uint,
    );
}
extern "C" {
    pub fn sceGxmSetCullMode(context: *mut SceGxmContext, mode: SceGxmCullMode::Type);
}
extern "C" {
    pub fn sceGxmSetViewportEnable(context: *mut SceGxmContext, enable: SceGxmViewportMode::Type);
}
extern "C" {
    pub fn sceGxmSetWBufferEnable(context: *mut SceGxmContext, enable: SceGxmWBufferMode::Type);
}
extern "C" {
    pub fn sceGxmSetFrontVisibilityTestIndex(
        context: *mut SceGxmContext,
        index: crate::ctypes::c_uint,
    );
}
extern "C" {
    pub fn sceGxmSetBackVisibilityTestIndex(
        context: *mut SceGxmContext,
        index: crate::ctypes::c_uint,
    );
}
extern "C" {
    pub fn sceGxmSetFrontVisibilityTestOp(
        context: *mut SceGxmContext,
        op: SceGxmVisibilityTestOp::Type,
    );
}
extern "C" {
    pub fn sceGxmSetBackVisibilityTestOp(
        context: *mut SceGxmContext,
        op: SceGxmVisibilityTestOp::Type,
    );
}
extern "C" {
    pub fn sceGxmSetFrontVisibilityTestEnable(
        context: *mut SceGxmContext,
        enable: SceGxmVisibilityTestMode::Type,
    );
}
extern "C" {
    pub fn sceGxmSetBackVisibilityTestEnable(
        context: *mut SceGxmContext,
        enable: SceGxmVisibilityTestMode::Type,
    );
}
extern "C" {
    pub fn sceGxmSetYuvProfile(
        context: *mut SceGxmContext,
        index: crate::ctypes::c_uint,
        profile: SceGxmYuvProfile::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmFinish(context: *mut SceGxmContext);
}
extern "C" {
    pub fn sceGxmPushUserMarker(
        context: *mut SceGxmContext,
        tag: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPopUserMarker(context: *mut SceGxmContext) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetUserMarker(
        context: *mut SceGxmContext,
        tag: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPadHeartbeat(
        displaySurface: *const SceGxmColorSurface,
        displaySyncObject: *mut SceGxmSyncObject,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPadTriggerGpuPaTrace() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceInit(
        surface: *mut SceGxmColorSurface,
        colorFormat: SceGxmColorFormat::Type,
        surfaceType: SceGxmColorSurfaceType::Type,
        scaleMode: SceGxmColorSurfaceScaleMode::Type,
        outputRegisterSize: SceGxmOutputRegisterSize::Type,
        width: crate::ctypes::c_uint,
        height: crate::ctypes::c_uint,
        strideInPixels: crate::ctypes::c_uint,
        data: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceInitDisabled(surface: *mut SceGxmColorSurface)
        -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceIsEnabled(surface: *const SceGxmColorSurface) -> SceBool;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetClip(
        surface: *const SceGxmColorSurface,
        xMin: *mut crate::ctypes::c_uint,
        yMin: *mut crate::ctypes::c_uint,
        xMax: *mut crate::ctypes::c_uint,
        yMax: *mut crate::ctypes::c_uint,
    );
}
extern "C" {
    pub fn sceGxmColorSurfaceSetClip(
        surface: *mut SceGxmColorSurface,
        xMin: crate::ctypes::c_uint,
        yMin: crate::ctypes::c_uint,
        xMax: crate::ctypes::c_uint,
        yMax: crate::ctypes::c_uint,
    );
}
extern "C" {
    pub fn sceGxmColorSurfaceGetScaleMode(
        surface: *const SceGxmColorSurface,
    ) -> SceGxmColorSurfaceScaleMode::Type;
}
extern "C" {
    pub fn sceGxmColorSurfaceSetScaleMode(
        surface: *mut SceGxmColorSurface,
        scaleMode: SceGxmColorSurfaceScaleMode::Type,
    );
}
extern "C" {
    pub fn sceGxmColorSurfaceGetData(
        surface: *const SceGxmColorSurface,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceGxmColorSurfaceSetData(
        surface: *mut SceGxmColorSurface,
        data: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetFormat(
        surface: *const SceGxmColorSurface,
    ) -> SceGxmColorFormat::Type;
}
extern "C" {
    pub fn sceGxmColorSurfaceSetFormat(
        surface: *mut SceGxmColorSurface,
        format: SceGxmColorFormat::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetType(
        surface: *const SceGxmColorSurface,
    ) -> SceGxmColorSurfaceType::Type;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetStrideInPixels(
        surface: *const SceGxmColorSurface,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceInit(
        surface: *mut SceGxmDepthStencilSurface,
        depthStencilFormat: SceGxmDepthStencilFormat::Type,
        surfaceType: SceGxmDepthStencilSurfaceType::Type,
        strideInSamples: crate::ctypes::c_uint,
        depthData: *mut crate::ctypes::c_void,
        stencilData: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceInitDisabled(
        surface: *mut SceGxmDepthStencilSurface,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetBackgroundDepth(
        surface: *const SceGxmDepthStencilSurface,
    ) -> f32;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceSetBackgroundDepth(
        surface: *mut SceGxmDepthStencilSurface,
        backgroundDepth: f32,
    );
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetBackgroundStencil(
        surface: *const SceGxmDepthStencilSurface,
    ) -> crate::ctypes::c_uchar;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceSetBackgroundStencil(
        surface: *mut SceGxmDepthStencilSurface,
        backgroundStencil: crate::ctypes::c_uchar,
    );
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceIsEnabled(surface: *const SceGxmDepthStencilSurface)
        -> SceBool;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceSetForceLoadMode(
        surface: *mut SceGxmDepthStencilSurface,
        forceLoad: SceGxmDepthStencilForceLoadMode::Type,
    );
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetForceLoadMode(
        surface: *const SceGxmDepthStencilSurface,
    ) -> SceGxmDepthStencilForceLoadMode::Type;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceSetForceStoreMode(
        surface: *mut SceGxmDepthStencilSurface,
        forceStore: SceGxmDepthStencilForceStoreMode::Type,
    );
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetForceStoreMode(
        surface: *const SceGxmDepthStencilSurface,
    ) -> SceGxmDepthStencilForceStoreMode::Type;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetGammaMode(
        surface: *const SceGxmColorSurface,
    ) -> SceGxmColorSurfaceGammaMode::Type;
}
extern "C" {
    pub fn sceGxmColorSurfaceSetGammaMode(
        surface: *mut SceGxmColorSurface,
        gammaMode: SceGxmColorSurfaceGammaMode::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetDitherMode(
        surface: *const SceGxmColorSurface,
    ) -> SceGxmColorSurfaceDitherMode::Type;
}
extern "C" {
    pub fn sceGxmColorSurfaceSetDitherMode(
        surface: *mut SceGxmColorSurface,
        ditherMode: SceGxmColorSurfaceDitherMode::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetFormat(
        surface: *const SceGxmDepthStencilSurface,
    ) -> SceGxmDepthStencilFormat::Type;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetStrideInSamples(
        surface: *const SceGxmDepthStencilSurface,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmProgramCheck(program: *const SceGxmProgram) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmProgramGetSize(program: *const SceGxmProgram) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmProgramGetType(program: *const SceGxmProgram) -> SceGxmProgramType::Type;
}
extern "C" {
    pub fn sceGxmProgramIsDiscardUsed(program: *const SceGxmProgram) -> SceBool;
}
extern "C" {
    pub fn sceGxmProgramIsDepthReplaceUsed(program: *const SceGxmProgram) -> SceBool;
}
extern "C" {
    pub fn sceGxmProgramIsSpriteCoordUsed(program: *const SceGxmProgram) -> SceBool;
}
extern "C" {
    pub fn sceGxmProgramGetDefaultUniformBufferSize(
        program: *const SceGxmProgram,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmProgramGetParameterCount(program: *const SceGxmProgram) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmProgramGetParameter(
        program: *const SceGxmProgram,
        index: crate::ctypes::c_uint,
    ) -> *const SceGxmProgramParameter;
}
extern "C" {
    pub fn sceGxmProgramFindParameterByName(
        program: *const SceGxmProgram,
        name: *const crate::ctypes::c_char,
    ) -> *const SceGxmProgramParameter;
}
extern "C" {
    pub fn sceGxmProgramFindParameterBySemantic(
        program: *const SceGxmProgram,
        semantic: SceGxmParameterSemantic::Type,
        index: crate::ctypes::c_uint,
    ) -> *const SceGxmProgramParameter;
}
extern "C" {
    pub fn sceGxmProgramParameterGetIndex(
        program: *const SceGxmProgram,
        parameter: *const SceGxmProgramParameter,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterGetCategory(
        parameter: *const SceGxmProgramParameter,
    ) -> SceGxmParameterCategory::Type;
}
extern "C" {
    pub fn sceGxmProgramParameterGetName(
        parameter: *const SceGxmProgramParameter,
    ) -> *const crate::ctypes::c_char;
}
extern "C" {
    pub fn sceGxmProgramParameterGetSemantic(
        parameter: *const SceGxmProgramParameter,
    ) -> SceGxmParameterSemantic::Type;
}
extern "C" {
    pub fn sceGxmProgramParameterGetSemanticIndex(
        parameter: *const SceGxmProgramParameter,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterGetType(
        parameter: *const SceGxmProgramParameter,
    ) -> SceGxmParameterType::Type;
}
extern "C" {
    pub fn sceGxmProgramParameterGetComponentCount(
        parameter: *const SceGxmProgramParameter,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterGetArraySize(
        parameter: *const SceGxmProgramParameter,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterGetResourceIndex(
        parameter: *const SceGxmProgramParameter,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterGetContainerIndex(
        parameter: *const SceGxmProgramParameter,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterIsSamplerCube(parameter: *const SceGxmProgramParameter)
        -> SceBool;
}
extern "C" {
    pub fn sceGxmFragmentProgramGetProgram(
        fragmentProgram: *const SceGxmFragmentProgram,
    ) -> *const SceGxmProgram;
}
extern "C" {
    pub fn sceGxmVertexProgramGetProgram(
        vertexProgram: *const SceGxmVertexProgram,
    ) -> *const SceGxmProgram;
}
extern "C" {
    pub fn sceGxmShaderPatcherCreate(
        params: *const SceGxmShaderPatcherParams,
        shaderPatcher: *mut *mut SceGxmShaderPatcher,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherSetUserData(
        shaderPatcher: *mut SceGxmShaderPatcher,
        userData: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetUserData(
        shaderPatcher: *mut SceGxmShaderPatcher,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceGxmShaderPatcherDestroy(
        shaderPatcher: *mut SceGxmShaderPatcher,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherRegisterProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        programHeader: *const SceGxmProgram,
        programId: *mut SceGxmShaderPatcherId,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherUnregisterProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        programId: SceGxmShaderPatcherId,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherForceUnregisterProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        programId: SceGxmShaderPatcherId,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetProgramFromId(
        programId: SceGxmShaderPatcherId,
    ) -> *const SceGxmProgram;
}
extern "C" {
    pub fn sceGxmShaderPatcherSetAuxiliarySurface(
        shaderPatcher: *mut SceGxmShaderPatcher,
        auxSurfaceIndex: crate::ctypes::c_uint,
        auxSurface: *const SceGxmAuxiliarySurface,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherCreateVertexProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        programId: SceGxmShaderPatcherId,
        attributes: *const SceGxmVertexAttribute,
        attributeCount: crate::ctypes::c_uint,
        streams: *const SceGxmVertexStream,
        streamCount: crate::ctypes::c_uint,
        vertexProgram: *mut *mut SceGxmVertexProgram,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherCreateFragmentProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        programId: SceGxmShaderPatcherId,
        outputFormat: SceGxmOutputRegisterFormat::Type,
        multisampleMode: SceGxmMultisampleMode::Type,
        blendInfo: *const SceGxmBlendInfo,
        vertexProgram: *const SceGxmProgram,
        fragmentProgram: *mut *mut SceGxmFragmentProgram,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherCreateMaskUpdateFragmentProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        fragmentProgram: *mut *mut SceGxmFragmentProgram,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherAddRefVertexProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        vertexProgram: *mut SceGxmVertexProgram,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherAddRefFragmentProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        fragmentProgram: *mut SceGxmFragmentProgram,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetVertexProgramRefCount(
        shaderPatcher: *mut SceGxmShaderPatcher,
        fragmentProgram: *mut SceGxmVertexProgram,
        count: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetFragmentProgramRefCount(
        shaderPatcher: *mut SceGxmShaderPatcher,
        fragmentProgram: *mut SceGxmFragmentProgram,
        count: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherReleaseVertexProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        vertexProgram: *mut SceGxmVertexProgram,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherReleaseFragmentProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        fragmentProgram: *mut SceGxmFragmentProgram,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetHostMemAllocated(
        shaderPatcher: *const SceGxmShaderPatcher,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetBufferMemAllocated(
        shaderPatcher: *const SceGxmShaderPatcher,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetVertexUsseMemAllocated(
        shaderPatcher: *const SceGxmShaderPatcher,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetFragmentUsseMemAllocated(
        shaderPatcher: *const SceGxmShaderPatcher,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmTextureInitSwizzled(
        texture: *mut SceGxmTexture,
        data: *const crate::ctypes::c_void,
        texFormat: SceGxmTextureFormat::Type,
        width: crate::ctypes::c_uint,
        height: crate::ctypes::c_uint,
        mipCount: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureInitSwizzledArbitrary(
        texture: *mut SceGxmTexture,
        data: *const crate::ctypes::c_void,
        texFormat: SceGxmTextureFormat::Type,
        width: crate::ctypes::c_uint,
        height: crate::ctypes::c_uint,
        mipCount: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureInitLinear(
        texture: *mut SceGxmTexture,
        data: *const crate::ctypes::c_void,
        texFormat: SceGxmTextureFormat::Type,
        width: crate::ctypes::c_uint,
        height: crate::ctypes::c_uint,
        mipCount: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureInitLinearStrided(
        texture: *mut SceGxmTexture,
        data: *const crate::ctypes::c_void,
        texFormat: SceGxmTextureFormat::Type,
        width: crate::ctypes::c_uint,
        height: crate::ctypes::c_uint,
        byteStride: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureInitTiled(
        texture: *mut SceGxmTexture,
        data: *const crate::ctypes::c_void,
        texFormat: SceGxmTextureFormat::Type,
        width: crate::ctypes::c_uint,
        height: crate::ctypes::c_uint,
        mipCount: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureInitCube(
        texture: *mut SceGxmTexture,
        data: *const crate::ctypes::c_void,
        texFormat: SceGxmTextureFormat::Type,
        width: crate::ctypes::c_uint,
        height: crate::ctypes::c_uint,
        mipCount: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetType(texture: *const SceGxmTexture) -> SceGxmTextureType::Type;
}
extern "C" {
    pub fn sceGxmTextureValidate(texture: *const SceGxmTexture) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureSetMinFilter(
        texture: *mut SceGxmTexture,
        minFilter: SceGxmTextureFilter::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetMinFilter(texture: *const SceGxmTexture) -> SceGxmTextureFilter::Type;
}
extern "C" {
    pub fn sceGxmTextureSetMagFilter(
        texture: *mut SceGxmTexture,
        magFilter: SceGxmTextureFilter::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetMagFilter(texture: *const SceGxmTexture) -> SceGxmTextureFilter::Type;
}
extern "C" {
    pub fn sceGxmTextureSetMipFilter(
        texture: *mut SceGxmTexture,
        mipFilter: SceGxmTextureMipFilter::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetMipFilter(texture: *const SceGxmTexture)
        -> SceGxmTextureMipFilter::Type;
}
extern "C" {
    pub fn sceGxmTextureSetUAddrMode(
        texture: *mut SceGxmTexture,
        addrMode: SceGxmTextureAddrMode::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetUAddrMode(texture: *const SceGxmTexture) -> SceGxmTextureAddrMode::Type;
}
extern "C" {
    pub fn sceGxmTextureSetVAddrMode(
        texture: *mut SceGxmTexture,
        addrMode: SceGxmTextureAddrMode::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetVAddrMode(texture: *const SceGxmTexture) -> SceGxmTextureAddrMode::Type;
}
extern "C" {
    pub fn sceGxmTextureSetFormat(
        texture: *mut SceGxmTexture,
        texFormat: SceGxmTextureFormat::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetFormat(texture: *const SceGxmTexture) -> SceGxmTextureFormat::Type;
}
extern "C" {
    pub fn sceGxmTextureSetLodBias(
        texture: *mut SceGxmTexture,
        bias: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetLodBias(texture: *const SceGxmTexture) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmTextureSetStride(
        texture: *mut SceGxmTexture,
        byteStride: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetStride(texture: *const SceGxmTexture) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmTextureSetWidth(
        texture: *mut SceGxmTexture,
        width: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetWidth(texture: *const SceGxmTexture) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmTextureSetHeight(
        texture: *mut SceGxmTexture,
        height: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetHeight(texture: *const SceGxmTexture) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmTextureSetData(
        texture: *mut SceGxmTexture,
        data: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetData(texture: *const SceGxmTexture) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceGxmTextureSetMipmapCount(
        texture: *mut SceGxmTexture,
        mipCount: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetMipmapCount(texture: *const SceGxmTexture) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmTextureSetPalette(
        texture: *mut SceGxmTexture,
        paletteData: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetPalette(texture: *const SceGxmTexture) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceGxmTextureGetGammaMode(texture: *const SceGxmTexture)
        -> SceGxmTextureGammaMode::Type;
}
extern "C" {
    pub fn sceGxmTextureSetGammaMode(
        texture: *mut SceGxmTexture,
        gammaMode: SceGxmTextureGammaMode::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmGetPrecomputedVertexStateSize(
        vertexProgram: *const SceGxmVertexProgram,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateInit(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        vertexProgram: *const SceGxmVertexProgram,
        memBlock: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateSetDefaultUniformBuffer(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        defaultBuffer: *mut crate::ctypes::c_void,
    );
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateGetDefaultUniformBuffer(
        precomputedState: *const SceGxmPrecomputedVertexState,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateSetAllTextures(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        textures: *const SceGxmTexture,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateSetTexture(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        textureIndex: crate::ctypes::c_uint,
        texture: *const SceGxmTexture,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateSetAllUniformBuffers(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        bufferDataArray: *const *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateSetUniformBuffer(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        bufferIndex: crate::ctypes::c_uint,
        bufferData: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmGetPrecomputedFragmentStateSize(
        fragmentProgram: *const SceGxmFragmentProgram,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateInit(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        fragmentProgram: *const SceGxmFragmentProgram,
        memBlock: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetDefaultUniformBuffer(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        defaultBuffer: *mut crate::ctypes::c_void,
    );
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateGetDefaultUniformBuffer(
        precomputedState: *const SceGxmPrecomputedFragmentState,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetAllTextures(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        textureArray: *const SceGxmTexture,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetTexture(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        textureIndex: crate::ctypes::c_uint,
        texture: *const SceGxmTexture,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetAllUniformBuffers(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        bufferDataArray: *const *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetUniformBuffer(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        bufferIndex: crate::ctypes::c_uint,
        bufferData: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetAllAuxiliarySurfaces(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        auxSurfaceArray: *const SceGxmAuxiliarySurface,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmGetPrecomputedDrawSize(
        vertexProgram: *const SceGxmVertexProgram,
    ) -> crate::ctypes::c_uint;
}
extern "C" {
    pub fn sceGxmPrecomputedDrawInit(
        precomputedDraw: *mut SceGxmPrecomputedDraw,
        vertexProgram: *const SceGxmVertexProgram,
        memBlock: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedDrawSetAllVertexStreams(
        precomputedDraw: *mut SceGxmPrecomputedDraw,
        streamDataArray: *const *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedDrawSetVertexStream(
        precomputedDraw: *mut SceGxmPrecomputedDraw,
        streamIndex: crate::ctypes::c_uint,
        streamData: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedDrawSetParams(
        precomputedDraw: *mut SceGxmPrecomputedDraw,
        primType: SceGxmPrimitiveType::Type,
        indexType: SceGxmIndexFormat::Type,
        indexData: *const crate::ctypes::c_void,
        indexCount: crate::ctypes::c_uint,
    );
}
extern "C" {
    pub fn sceGxmPrecomputedDrawSetParamsInstanced(
        precomputedDraw: *mut SceGxmPrecomputedDraw,
        primType: SceGxmPrimitiveType::Type,
        indexType: SceGxmIndexFormat::Type,
        indexData: *const crate::ctypes::c_void,
        indexCount: crate::ctypes::c_uint,
        indexWrap: crate::ctypes::c_uint,
    );
}
extern "C" {
    pub fn sceGxmGetRenderTargetMemSize(
        params: *const SceGxmRenderTargetParams,
        driverMemSize: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmCreateRenderTarget(
        params: *const SceGxmRenderTargetParams,
        renderTarget: *mut *mut SceGxmRenderTarget,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmRenderTargetGetHostMem(
        renderTarget: *const SceGxmRenderTarget,
        hostMem: *mut *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmRenderTargetGetDriverMemBlock(
        renderTarget: *const SceGxmRenderTarget,
        driverMemBlock: *mut SceUID,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmDestroyRenderTarget(renderTarget: *mut SceGxmRenderTarget)
        -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmSetUniformDataF(
        uniformBuffer: *mut crate::ctypes::c_void,
        parameter: *const SceGxmProgramParameter,
        componentOffset: crate::ctypes::c_uint,
        componentCount: crate::ctypes::c_uint,
        sourceData: *const f32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTransferCopy(
        width: u32,
        height: u32,
        colorKeyValue: u32,
        colorKeyMask: u32,
        colorKeyMode: SceGxmTransferColorKeyMode::Type,
        srcFormat: SceGxmTransferFormat::Type,
        srcType: SceGxmTransferType::Type,
        srcAddress: *const crate::ctypes::c_void,
        srcX: u32,
        srcY: u32,
        srcStride: i32,
        destFormat: SceGxmTransferFormat::Type,
        destType: SceGxmTransferType::Type,
        destAddress: *mut crate::ctypes::c_void,
        destX: u32,
        destY: u32,
        destStride: i32,
        syncObject: *mut SceGxmSyncObject,
        syncFlags: u32,
        notification: *const SceGxmNotification,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTransferDownscale(
        srcFormat: SceGxmTransferFormat::Type,
        srcAddress: *const crate::ctypes::c_void,
        srcX: crate::ctypes::c_uint,
        srcY: crate::ctypes::c_uint,
        srcWidth: crate::ctypes::c_uint,
        srcHeight: crate::ctypes::c_uint,
        srcStride: crate::ctypes::c_int,
        destFormat: SceGxmTransferFormat::Type,
        destAddress: *mut crate::ctypes::c_void,
        destX: crate::ctypes::c_uint,
        destY: crate::ctypes::c_uint,
        destStride: crate::ctypes::c_int,
        syncObject: *mut SceGxmSyncObject,
        syncFlags: crate::ctypes::c_uint,
        notification: *const SceGxmNotification,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTransferFill(
        color: u32,
        destFormat: SceGxmTransferFormat::Type,
        destAddress: *mut crate::ctypes::c_void,
        destX: u32,
        destY: u32,
        destWidth: u32,
        destHeight: u32,
        destStride: i32,
        syncObject: *mut SceGxmSyncObject,
        syncFlags: u32,
        notification: *const SceGxmNotification,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceGxmTransferFinish() -> crate::ctypes::c_int;
}
