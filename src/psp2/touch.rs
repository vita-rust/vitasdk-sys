/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_TOUCH_MAX_REPORT: u32 = 8;
pub mod SceTouchErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_TOUCH_ERROR_INVALID_ARG: Type = 2150957057;
    pub const SCE_TOUCH_ERROR_PRIV_REQUIRED: Type = 2150957058;
    pub const SCE_TOUCH_ERROR_FATAL: Type = 2150957311;
}
pub mod SceTouchPortType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_TOUCH_PORT_FRONT: Type = 0;
    pub const SCE_TOUCH_PORT_BACK: Type = 1;
    pub const SCE_TOUCH_PORT_MAX_NUM: Type = 2;
}
pub mod SceTouchSamplingState {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_TOUCH_SAMPLING_STATE_STOP: Type = 0;
    pub const SCE_TOUCH_SAMPLING_STATE_START: Type = 1;
}
pub mod SceTouchReportInfo {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_TOUCH_REPORT_INFO_HIDE_UPPER_LAYER: Type = 1;
}
#[repr(C)]
pub struct SceTouchPanelInfo {
    pub minAaX: SceInt16,
    pub minAaY: SceInt16,
    pub maxAaX: SceInt16,
    pub maxAaY: SceInt16,
    pub minDispX: SceInt16,
    pub minDispY: SceInt16,
    pub maxDispX: SceInt16,
    pub maxDispY: SceInt16,
    pub minForce: SceUInt8,
    pub maxForce: SceUInt8,
    pub reserved: [SceUInt8; 30usize],
}
#[repr(C)]
pub struct SceTouchReport {
    pub id: SceUInt8,
    pub force: SceUInt8,
    pub x: SceInt16,
    pub y: SceInt16,
    pub reserved: [SceUInt8; 8usize],
    pub info: SceUInt16,
}
#[repr(C)]
pub struct SceTouchData {
    pub timeStamp: SceUInt64,
    pub status: SceUInt32,
    pub reportNum: SceUInt32,
    pub report: [SceTouchReport; 8usize],
}
extern "C" {
    pub fn sceTouchGetPanelInfo(
        port: SceUInt32,
        pPanelInfo: *mut SceTouchPanelInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceTouchRead(
        port: SceUInt32,
        pData: *mut SceTouchData,
        nBufs: SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceTouchPeek(
        port: SceUInt32,
        pData: *mut SceTouchData,
        nBufs: SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceTouchSetSamplingState(
        port: SceUInt32,
        state: SceTouchSamplingState::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceTouchGetSamplingState(
        port: SceUInt32,
        pState: *mut SceTouchSamplingState::Type,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceTouchEnableTouchForce(port: SceUInt32) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceTouchDisableTouchForce(port: SceUInt32) -> crate::ctypes::c_int;
}
