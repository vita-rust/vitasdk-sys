/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::kernel::threadmgr::*;
#[allow(unused_imports)]
use crate::psp2::types::*;
use crate::psp2common::kernel::threadmgr::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
pub struct ScePafDateTime {
    pub data: SceDateTime,
    pub data_0x10: crate::ctypes::c_int,
    pub data_0x14: crate::ctypes::c_int,
}
extern "C" {
    pub fn scePafGetCurrentClockLocalTime(data: *mut ScePafDateTime) -> crate::ctypes::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePafSha1Context {
    pub h: [u32; 5usize],
    pub unk: [crate::ctypes::c_char; 84usize],
}
extern "C" {
    pub fn scePafSha1Init(context: *mut ScePafSha1Context) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn scePafSha1Update(
        context: *mut ScePafSha1Context,
        data: *const crate::ctypes::c_void,
        length: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn scePafSha1Result(
        context: *mut ScePafSha1Context,
        dst: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
#[repr(C)]
pub struct ScePafHeapContext {
    pub vtable: *mut crate::ctypes::c_void,
    pub heap: *mut crate::ctypes::c_void,
    pub membase: *mut crate::ctypes::c_void,
    pub size: SceSize,
    pub name: [crate::ctypes::c_char; 32usize],
    pub is_import_membase: SceChar8,
    pub is_skip_debug_msg: SceChar8,
    pub data_0x32: crate::ctypes::c_char,
    pub data_0x33: crate::ctypes::c_char,
    pub data_0x34: crate::ctypes::c_int,
    pub lw_mtx: SceKernelLwMutexWork,
    pub memblk_id: SceUID,
    pub mode: SceInt32,
}
#[repr(C)]
pub struct ScePafHeapOpt {
    pub a1: crate::ctypes::c_int,
    pub a2: crate::ctypes::c_int,
    pub is_skip_debug_msg: SceChar8,
    pub a3: [crate::ctypes::c_char; 3usize],
    pub mode: SceInt32,
    pub a5: crate::ctypes::c_int,
}
extern "C" {
    pub fn scePafCreateHeap(
        context: *mut ScePafHeapContext,
        membase: *mut crate::ctypes::c_void,
        size: SceSize,
        name: *const crate::ctypes::c_char,
        opt: *mut ScePafHeapOpt,
    );
}
extern "C" {
    pub fn scePafDeleteHeap(context: *mut ScePafHeapContext);
}
extern "C" {
    pub fn scePafMallocWithContext(
        context: *mut ScePafHeapContext,
        len: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn scePafFreeWithContext(context: *mut ScePafHeapContext, ptr: *mut crate::ctypes::c_void);
}
extern "C" {
    pub fn scePafMallocAlignWithContext(
        context: *mut ScePafHeapContext,
        align: SceUInt32,
        len: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn scePafReallocWithContext(
        context: *mut ScePafHeapContext,
        ptr: *mut crate::ctypes::c_void,
        len: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
