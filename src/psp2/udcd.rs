/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub mod SceUdcdStatus {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_UDCD_STATUS_CONNECTION_NEW: Type = 1;
    pub const SCE_UDCD_STATUS_CONNECTION_ESTABLISHED: Type = 2;
    pub const SCE_UDCD_STATUS_CONNECTION_SUSPENDED: Type = 4;
    pub const SCE_UDCD_STATUS_CABLE_DISCONNECTED: Type = 16;
    pub const SCE_UDCD_STATUS_CABLE_CONNECTED: Type = 32;
    pub const SCE_UDCD_STATUS_DEACTIVATED: Type = 256;
    pub const SCE_UDCD_STATUS_ACTIVATED: Type = 512;
    pub const SCE_UDCD_STATUS_IS_CHARGING: Type = 1024;
    pub const SCE_UDCD_STATUS_USE_USB_CHARGING: Type = 2048;
    pub const SCE_UDCD_STATUS_UNKNOWN_1000: Type = 4096;
    pub const SCE_UDCD_STATUS_UNKNOWN_2000: Type = 8192;
}
pub mod SceUdcdStatusDriver {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_UDCD_STATUS_DRIVER_STARTED: Type = 1;
    pub const SCE_UDCD_STATUS_DRIVER_REGISTERED: Type = 2;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUdcdDeviceInfo {
    pub info: [u8; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUdcdWaitParam {
    pub unk_00: crate::ctypes::c_int,
    pub status: crate::ctypes::c_int,
    pub unk_08: crate::ctypes::c_int,
    pub unk_0C: crate::ctypes::c_int,
    pub unk_10: crate::ctypes::c_int,
    pub driverName: *const crate::ctypes::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUdcdDeviceState {
    pub unk_00: crate::ctypes::c_int,
    pub state: crate::ctypes::c_int,
    pub cable: crate::ctypes::c_int,
    pub connection: crate::ctypes::c_int,
    pub use_usb_charging: crate::ctypes::c_int,
    pub unk_14: crate::ctypes::c_int,
}
extern "C" {
    pub fn sceUdcdGetDeviceState(state: *mut SceUdcdDeviceState) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUdcdGetDeviceInfo(devInfo: *mut SceUdcdDeviceInfo) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUdcdGetDrvState(driverName: *const crate::ctypes::c_char) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUdcdRegisterCallback(
        cbid: SceUID,
        state: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUdcdUnregisterCallback(cbid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceUdcdWaitState(
        waitParam: *mut SceUdcdWaitParam,
        timeout: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
