/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub type va_list = u32;
pub type SceClibMspace = *mut crate::ctypes::c_void;
#[repr(C)]
pub struct SceClibMspaceStats {
    pub capacity: SceSize,
    pub unk: SceSize,
    pub peak_in_use: SceSize,
    pub current_in_use: SceSize,
}
extern "C" {
    pub fn sceClibAbort();
}
extern "C" {
    pub fn sceClibLookCtypeTable(ch: crate::ctypes::c_char) -> crate::ctypes::c_char;
}
extern "C" {
    pub fn sceClibTolower(ch: crate::ctypes::c_char) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceClibToupper(ch: crate::ctypes::c_char) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceClibPrintf(fmt: *const crate::ctypes::c_char, ...) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceClibSnprintf(
        dst: *mut crate::ctypes::c_char,
        dst_max_size: SceSize,
        fmt: *const crate::ctypes::c_char,
        ...
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceClibVsnprintf(
        dst: *mut crate::ctypes::c_char,
        dst_max_size: SceSize,
        fmt: *const crate::ctypes::c_char,
        args: va_list,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceClibStrncpy(
        dst: *mut crate::ctypes::c_char,
        src: *const crate::ctypes::c_char,
        len: SceSize,
    ) -> *mut crate::ctypes::c_char;
}
extern "C" {
    pub fn sceClibStrncat(
        dst: *mut crate::ctypes::c_char,
        src: *const crate::ctypes::c_char,
        len: SceSize,
    ) -> *mut crate::ctypes::c_char;
}
extern "C" {
    pub fn sceClibStrchr(
        s: *const crate::ctypes::c_char,
        ch: crate::ctypes::c_int,
    ) -> *mut crate::ctypes::c_char;
}
extern "C" {
    pub fn sceClibStrrchr(
        src: *const crate::ctypes::c_char,
        ch: crate::ctypes::c_int,
    ) -> *mut crate::ctypes::c_char;
}
extern "C" {
    pub fn sceClibStrstr(
        s1: *const crate::ctypes::c_char,
        s2: *const crate::ctypes::c_char,
    ) -> *mut crate::ctypes::c_char;
}
extern "C" {
    pub fn sceClibStrcmp(
        s1: *const crate::ctypes::c_char,
        s2: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceClibStrncmp(
        s1: *const crate::ctypes::c_char,
        s2: *const crate::ctypes::c_char,
        len: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceClibStrncasecmp(
        s1: *const crate::ctypes::c_char,
        s2: *const crate::ctypes::c_char,
        len: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceClibStrnlen(s1: *const crate::ctypes::c_char, max_len: SceSize) -> SceSize;
}
extern "C" {
    pub fn sceClibMemset(
        dst: *mut crate::ctypes::c_void,
        ch: crate::ctypes::c_int,
        len: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceClibMemcpy(
        dst: *mut crate::ctypes::c_void,
        src: *const crate::ctypes::c_void,
        len: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceClibMemcpy_safe(
        dst: *mut crate::ctypes::c_void,
        src: *const crate::ctypes::c_void,
        len: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceClibMemmove(
        dst: *mut crate::ctypes::c_void,
        src: *const crate::ctypes::c_void,
        len: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceClibMemcmp(
        s1: *const crate::ctypes::c_void,
        s2: *const crate::ctypes::c_void,
        len: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceClibMemchr(
        src: *const crate::ctypes::c_void,
        ch: crate::ctypes::c_int,
        len: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceClibMspaceCreate(
        memblock: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> SceClibMspace;
}
extern "C" {
    pub fn sceClibMspaceDestroy(mspace: SceClibMspace);
}
extern "C" {
    pub fn sceClibMspaceMallocUsableSize(ptr: *mut crate::ctypes::c_void) -> SceSize;
}
extern "C" {
    pub fn sceClibMspaceIsHeapEmpty(mspace: SceClibMspace) -> SceBool;
}
extern "C" {
    pub fn sceClibMspaceMallocStats(mspace: SceClibMspace, stats: *mut SceClibMspaceStats);
}
extern "C" {
    pub fn sceClibMspaceMallocStatsFast(mspace: SceClibMspace, stats: *mut SceClibMspaceStats);
}
extern "C" {
    pub fn sceClibMspaceMalloc(mspace: SceClibMspace, size: SceSize) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceClibMspaceCalloc(
        mspace: SceClibMspace,
        num: SceSize,
        size: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceClibMspaceRealloc(
        mspace: SceClibMspace,
        ptr: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceClibMspaceReallocalign(
        mspace: SceClibMspace,
        ptr: *mut crate::ctypes::c_void,
        size: SceSize,
        alignment: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceClibMspaceMemalign(
        mspace: SceClibMspace,
        alignment: SceSize,
        size: SceSize,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceClibMspaceFree(mspace: SceClibMspace, ptr: *mut crate::ctypes::c_void);
}
