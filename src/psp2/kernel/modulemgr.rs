/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::kernel::modulemgr::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

extern "C" {
    pub fn sceKernelGetModuleInfo(
        uid: SceUID,
        info: *mut SceKernelModuleInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetModuleList(
        type_: SceUInt8,
        uids: *mut SceUID,
        num: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelLoadModule(
        path: *const crate::ctypes::c_char,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelLMOption,
    ) -> SceUID;
}
extern "C" {
    pub fn sceKernelUnloadModule(
        modid: SceUID,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelULMOption,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelStartModule(
        modid: SceUID,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut crate::ctypes::c_void,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelStopModule(
        modid: SceUID,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut crate::ctypes::c_void,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelLoadStartModule(
        path: *const crate::ctypes::c_char,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelLMOption,
        status: *mut crate::ctypes::c_int,
    ) -> SceUID;
}
extern "C" {
    pub fn sceKernelStopUnloadModule(
        modid: SceUID,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelULMOption,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetSystemSwVersion(
        version: *mut SceKernelSystemSwVersion,
    ) -> crate::ctypes::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceKernelLoadModuleOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceKernelUnloadModuleOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceKernelLibraryInfo {
    _unused: [u8; 0],
}
extern "C" {
    pub fn _sceKernelLoadModule(
        module_filename: *const crate::ctypes::c_char,
        flags: SceUInt32,
        option: *const SceKernelLoadModuleOption,
    ) -> SceUID;
}
extern "C" {
    pub fn _sceKernelLoadStartModule(
        module_filename: *const crate::ctypes::c_char,
        args: SceSize,
        argp: *const crate::ctypes::c_void,
        flags: SceUInt32,
    ) -> SceUID;
}
extern "C" {
    pub fn _sceKernelUnloadModule(
        uid: SceUID,
        flags: SceUInt32,
        option: *const SceKernelUnloadModuleOption,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceKernelStopModule(
        uid: SceUID,
        args: SceSize,
        argp: *const crate::ctypes::c_void,
        flags: SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceKernelStopUnloadModule(
        uid: SceUID,
        args: SceSize,
        argp: *const crate::ctypes::c_void,
        flags: SceUInt32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn _sceKernelOpenModule(
        module_filename: *const crate::ctypes::c_char,
        args: SceSize,
        argp: *const crate::ctypes::c_void,
        flags: SceUInt32,
    ) -> SceUID;
}
extern "C" {
    pub fn _sceKernelCloseModule(
        modid: SceUID,
        args: SceSize,
        argp: *const crate::ctypes::c_void,
        flags: SceUInt32,
    ) -> SceUID;
}
extern "C" {
    pub fn sceKernelGetLibraryInfoByNID(
        modid: SceUID,
        libnid: SceNID,
        info: *mut SceKernelLibraryInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelIsCalledFromSysModule(lr: *mut crate::ctypes::c_void) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetModuleIdByAddr(addr: *mut crate::ctypes::c_void) -> SceUID;
}
extern "C" {
    pub fn sceKernelGetAllowedSdkVersionOnSystem() -> SceUInt32;
}
