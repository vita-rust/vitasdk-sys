/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::kernel::cpu::*;
#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_KERNEL_THREAD_CPU_AFFINITY_MASK_DEFAULT: u32 = 0;
pub type SceKernelThreadEntry = ::core::option::Option<
    unsafe extern "C" fn(args: SceSize, argp: *mut crate::ctypes::c_void) -> crate::ctypes::c_int,
>;
#[repr(C)]
pub struct SceKernelThreadOptParam {
    pub size: SceSize,
    pub attr: SceUInt32,
}
#[repr(C)]
pub struct SceKernelThreadInfo {
    pub size: SceSize,
    pub processId: SceUID,
    pub name: [crate::ctypes::c_char; 32usize],
    pub attr: SceUInt32,
    pub status: SceUInt32,
    pub entry: SceKernelThreadEntry,
    pub stack: *mut crate::ctypes::c_void,
    pub stackSize: SceInt32,
    pub initPriority: SceInt32,
    pub currentPriority: SceInt32,
    pub initCpuAffinityMask: SceInt32,
    pub currentCpuAffinityMask: SceInt32,
    pub currentCpuId: SceInt32,
    pub lastExecutedCpuId: SceInt32,
    pub waitType: SceUInt32,
    pub waitId: SceUID,
    pub exitStatus: SceInt32,
    pub runClocks: SceKernelSysClock,
    pub intrPreemptCount: SceUInt32,
    pub threadPreemptCount: SceUInt32,
    pub threadReleaseCount: SceUInt32,
    pub changeCpuCount: SceInt32,
    pub fNotifyCallback: SceInt32,
    pub reserved: SceInt32,
}
#[repr(C)]
pub struct SceKernelThreadRunStatus {
    pub size: SceSize,
    pub cpuInfo: [SceKernelThreadRunStatus__bindgen_ty_1; 4usize],
}
#[repr(C)]
pub struct SceKernelThreadRunStatus__bindgen_ty_1 {
    pub processId: SceUID,
    pub threadId: SceUID,
    pub priority: crate::ctypes::c_int,
}
pub mod SceThreadStatus {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_THREAD_RUNNING: Type = 1;
    pub const SCE_THREAD_READY: Type = 2;
    pub const SCE_THREAD_STANDBY: Type = 4;
    pub const SCE_THREAD_WAITING: Type = 8;
    pub const SCE_THREAD_SUSPEND: Type = 8;
    pub const SCE_THREAD_DORMANT: Type = 16;
    pub const SCE_THREAD_STOPPED: Type = 16;
    pub const SCE_THREAD_DELETED: Type = 32;
    pub const SCE_THREAD_KILLED: Type = 32;
    pub const SCE_THREAD_DEAD: Type = 64;
    pub const SCE_THREAD_STAGNANT: Type = 128;
    pub const SCE_THREAD_SUSPENDED: Type = 256;
}
extern "C" {
    pub fn sceKernelCreateThread(
        name: *const crate::ctypes::c_char,
        entry: SceKernelThreadEntry,
        initPriority: crate::ctypes::c_int,
        stackSize: SceSize,
        attr: SceUInt,
        cpuAffinityMask: crate::ctypes::c_int,
        option: *const SceKernelThreadOptParam,
    ) -> SceUID;
}
extern "C" {
    pub fn sceKernelDeleteThread(thid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelStartThread(
        thid: SceUID,
        arglen: SceSize,
        argp: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelExitThread(status: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelExitDeleteThread(status: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelWaitThreadEnd(
        thid: SceUID,
        stat: *mut crate::ctypes::c_int,
        timeout: *mut SceUInt,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelWaitThreadEndCB(
        thid: SceUID,
        stat: *mut crate::ctypes::c_int,
        timeout: *mut SceUInt,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelDelayThread(delay: SceUInt) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelDelayThreadCB(delay: SceUInt) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelChangeCurrentThreadAttr(
        clearAttr: SceUInt,
        setAttr: SceUInt,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelChangeThreadPriority(
        thid: SceUID,
        priority: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadCurrentPriority() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadExitStatus(
        thid: SceUID,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelCheckThreadStack() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadStackFreeSize(thid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadInfo(
        thid: SceUID,
        info: *mut SceKernelThreadInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadRunStatus(
        thid: SceUID,
        status: *mut SceKernelThreadRunStatus,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadCpuAffinityMask(thid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelChangeThreadCpuAffinityMask(
        thid: SceUID,
        mask: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadId() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetProcessId() -> SceUID;
}
#[repr(C)]
pub struct SceKernelSystemInfo {
    pub size: SceSize,
    pub activeCpuMask: SceUInt32,
    pub cpuInfo: [SceKernelSystemInfo__bindgen_ty_1; 4usize],
}
#[repr(C)]
pub struct SceKernelSystemInfo__bindgen_ty_1 {
    pub idleClock: SceKernelSysClock,
    pub comesOutOfIdleCount: SceUInt32,
    pub threadSwitchCount: SceUInt32,
}
extern "C" {
    pub fn sceKernelGetSystemInfo(info: *mut SceKernelSystemInfo) -> crate::ctypes::c_int;
}
pub mod SceKernelIdListType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_TMID_Thread: Type = 1;
    pub const SCE_KERNEL_TMID_Semaphore: Type = 2;
    pub const SCE_KERNEL_TMID_EventFlag: Type = 3;
    pub const SCE_KERNEL_TMID_Mbox: Type = 4;
    pub const SCE_KERNEL_TMID_Vpl: Type = 5;
    pub const SCE_KERNEL_TMID_Fpl: Type = 6;
    pub const SCE_KERNEL_TMID_Mpipe: Type = 7;
    pub const SCE_KERNEL_TMID_Callback: Type = 8;
    pub const SCE_KERNEL_TMID_ThreadEventHandler: Type = 9;
    pub const SCE_KERNEL_TMID_Alarm: Type = 10;
    pub const SCE_KERNEL_TMID_VTimer: Type = 11;
    pub const SCE_KERNEL_TMID_SleepThread: Type = 64;
    pub const SCE_KERNEL_TMID_DelayThread: Type = 65;
    pub const SCE_KERNEL_TMID_SuspendThread: Type = 66;
    pub const SCE_KERNEL_TMID_DormantThread: Type = 67;
}
extern "C" {
    pub fn sceKernelGetThreadmgrUIDClass(uid: SceUID) -> SceKernelIdListType::Type;
}
extern "C" {
    pub fn sceKernelGetThreadTLSAddr(
        thid: SceUID,
        key: crate::ctypes::c_int,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceKernelGetTLSAddr(key: crate::ctypes::c_int) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceKernelGetSystemTimeWide() -> SceInt64;
}
