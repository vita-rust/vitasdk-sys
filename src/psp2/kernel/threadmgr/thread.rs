/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::kernel::cpu::*;
#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::kernel::threadmgr::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

extern "C" {
    pub fn sceKernelCreateThread(
        name: *const crate::ctypes::c_char,
        entry: SceKernelThreadEntry,
        initPriority: crate::ctypes::c_int,
        stackSize: SceSize,
        attr: SceUInt,
        cpuAffinityMask: crate::ctypes::c_int,
        option: *const SceKernelThreadOptParam,
    ) -> SceUID;
}
extern "C" {
    pub fn sceKernelDeleteThread(thid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelStartThread(
        thid: SceUID,
        arglen: SceSize,
        argp: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelExitThread(status: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelExitDeleteThread(status: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelWaitThreadEnd(
        thid: SceUID,
        stat: *mut crate::ctypes::c_int,
        timeout: *mut SceUInt,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelWaitThreadEndCB(
        thid: SceUID,
        stat: *mut crate::ctypes::c_int,
        timeout: *mut SceUInt,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelDelayThread(delay: SceUInt) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelDelayThreadCB(delay: SceUInt) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelChangeCurrentThreadAttr(
        clearAttr: SceUInt,
        setAttr: SceUInt,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelChangeThreadPriority(
        thid: SceUID,
        priority: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadCurrentPriority() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadExitStatus(
        thid: SceUID,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelCheckThreadStack() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadStackFreeSize(thid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadInfo(
        thid: SceUID,
        info: *mut SceKernelThreadInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadRunStatus(
        thid: SceUID,
        status: *mut SceKernelThreadRunStatus,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadCpuAffinityMask(thid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelChangeThreadCpuAffinityMask(
        thid: SceUID,
        mask: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadId() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetProcessId() -> SceUID;
}
#[repr(C)]
pub struct SceKernelSystemInfo {
    pub size: SceSize,
    pub activeCpuMask: SceUInt32,
    pub cpuInfo: [SceKernelSystemInfo__bindgen_ty_1; 4usize],
}
#[repr(C)]
pub struct SceKernelSystemInfo__bindgen_ty_1 {
    pub idleClock: SceKernelSysClock,
    pub comesOutOfIdleCount: SceUInt32,
    pub threadSwitchCount: SceUInt32,
}
extern "C" {
    pub fn sceKernelGetSystemInfo(info: *mut SceKernelSystemInfo) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetThreadmgrUIDClass(uid: SceUID) -> SceKernelIdListType::Type;
}
extern "C" {
    pub fn sceKernelGetThreadTLSAddr(
        thid: SceUID,
        key: crate::ctypes::c_int,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceKernelGetTLSAddr(key: crate::ctypes::c_int) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn sceKernelGetSystemTimeWide() -> SceInt64;
}
