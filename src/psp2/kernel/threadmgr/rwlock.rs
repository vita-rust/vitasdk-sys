/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
pub struct SceKernelRWLockOptParam {
    pub size: SceSize,
}
#[repr(C)]
pub struct SceKernelRWLockInfo {
    pub size: SceSize,
    pub rwLockId: SceUID,
    pub name: [crate::ctypes::c_char; 32usize],
    pub attr: SceUInt32,
    pub lockCount: SceInt32,
    pub writeOwnerId: SceUID,
    pub numReadWaitThreads: SceUInt32,
    pub numWriteWaitThreads: SceUInt32,
}
extern "C" {
    pub fn sceKernelCreateRWLock(
        name: *const crate::ctypes::c_char,
        attr: SceUInt32,
        opt_param: *const SceKernelRWLockOptParam,
    ) -> SceUID;
}
extern "C" {
    pub fn sceKernelDeleteRWLock(rwlock_id: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelOpenRWLock(name: *const crate::ctypes::c_char) -> SceUID;
}
extern "C" {
    pub fn sceKernelCloseRWLock(rwlock_id: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelLockReadRWLock(
        rwlock_id: SceUID,
        timeout: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelLockWriteRWLock(
        rwlock_id: SceUID,
        timeout: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelLockReadRWLockCB(
        rwlock_id: SceUID,
        timeout: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelLockWriteRWLockCB(
        rwlock_id: SceUID,
        timeout: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelTryLockReadRWLock(rwlock_id: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelTryLockWriteRWLock(rwlock_id: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelUnlockReadRWLock(rwlock_id: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelUnlockWriteRWLock(rwlock_id: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetRWLockInfo(
        rwlock_id: SceUID,
        info: *mut SceKernelRWLockInfo,
    ) -> crate::ctypes::c_int;
}
