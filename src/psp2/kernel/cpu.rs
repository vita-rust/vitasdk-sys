/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;

pub const SCE_KERNEL_CPU_MASK_USER_0: u32 = 65536;
pub const SCE_KERNEL_CPU_MASK_USER_1: u32 = 131072;
pub const SCE_KERNEL_CPU_MASK_USER_2: u32 = 262144;
pub const SCE_KERNEL_CPU_MASK_SYSTEM: u32 = 524288;
pub const SCE_KERNEL_CPU_MASK_USER_ALL: u32 = 458752;
extern "C" {
    pub fn sceKernelGetCpuId() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelAtomicSet8(store: *mut SceInt8, value: SceInt8);
}
extern "C" {
    pub fn sceKernelAtomicSet16(store: *mut SceInt16, value: SceInt16);
}
extern "C" {
    pub fn sceKernelAtomicSet32(store: *mut SceInt32, value: SceInt32);
}
extern "C" {
    pub fn sceKernelAtomicSet64(store: *mut SceInt64, value: SceInt64);
}
extern "C" {
    pub fn sceKernelAtomicCompareAndSet8(
        store: *mut SceInt8,
        value: SceInt8,
        new_value: SceInt8,
    ) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicCompareAndSet16(
        store: *mut SceInt16,
        value: SceInt16,
        new_value: SceInt16,
    ) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicCompareAndSet32(
        store: *mut SceInt32,
        value: SceInt32,
        new_value: SceInt32,
    ) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicCompareAndSet64(
        store: *mut SceInt64,
        value: SceInt64,
        new_value: SceInt64,
    ) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicAddAndGet8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicAddAndGet16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicAddAndGet32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicAddAndGet64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicAddUnless8(store: *mut SceInt8, value: SceInt8, cmpv: SceInt8)
        -> SceBool;
}
extern "C" {
    pub fn sceKernelAtomicAddUnless16(
        store: *mut SceInt16,
        value: SceInt16,
        cmpv: SceInt16,
    ) -> SceBool;
}
extern "C" {
    pub fn sceKernelAtomicAddUnless32(
        store: *mut SceInt32,
        value: SceInt32,
        cmpv: SceInt32,
    ) -> SceBool;
}
extern "C" {
    pub fn sceKernelAtomicAddUnless64(
        store: *mut SceInt64,
        value: SceInt64,
        cmpv: SceInt64,
    ) -> SceBool;
}
extern "C" {
    pub fn sceKernelAtomicSubAndGet8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicSubAndGet16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicSubAndGet32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicSubAndGet64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicAndAndGet8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicAndAndGet16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicAndAndGet32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicAndAndGet64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicOrAndGet8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicOrAndGet16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicOrAndGet32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicOrAndGet64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicXorAndGet8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicXorAndGet16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicXorAndGet32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicXorAndGet64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicClearAndGet8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicClearAndGet16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicClearAndGet32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicClearAndGet64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicGetAndSet8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicGetAndSet16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicGetAndSet32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicGetAndSet64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicGetAndAdd8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicGetAndAdd16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicGetAndAdd32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicGetAndAdd64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicGetAndSub8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicGetAndSub16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicGetAndSub32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicGetAndSub64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicGetAndAnd8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicGetAndAnd16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicGetAndAnd32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicGetAndAnd64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicGetAndOr8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicGetAndOr16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicGetAndOr32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicGetAndOr64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicGetAndXor8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicGetAndXor16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicGetAndXor32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicGetAndXor64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicGetAndClear8(store: *mut SceInt8, value: SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicGetAndClear16(store: *mut SceInt16, value: SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicGetAndClear32(store: *mut SceInt32, value: SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicGetAndClear64(store: *mut SceInt64, value: SceInt64) -> SceInt64;
}
extern "C" {
    pub fn sceKernelAtomicClearMask8(store: *mut SceInt8, value: SceInt8);
}
extern "C" {
    pub fn sceKernelAtomicClearMask16(store: *mut SceInt16, value: SceInt16);
}
extern "C" {
    pub fn sceKernelAtomicClearMask32(store: *mut SceInt32, value: SceInt32);
}
extern "C" {
    pub fn sceKernelAtomicClearMask64(store: *mut SceInt64, value: SceInt64);
}
extern "C" {
    pub fn sceKernelAtomicDecIfPositive8(store: *mut SceInt8) -> SceInt8;
}
extern "C" {
    pub fn sceKernelAtomicDecIfPositive16(store: *mut SceInt16) -> SceInt16;
}
extern "C" {
    pub fn sceKernelAtomicDecIfPositive32(store: *mut SceInt32) -> SceInt32;
}
extern "C" {
    pub fn sceKernelAtomicDecIfPositive64(store: *mut SceInt64) -> SceInt64;
}
