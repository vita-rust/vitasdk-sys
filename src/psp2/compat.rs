/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::io::devctl::*;
#[allow(unused_imports)]
use crate::psp2::rtc::*;
#[allow(unused_imports)]
use crate::psp2::types::*;
use crate::psp2common::kernel::iofilemgr::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub mod SceCompatCacheMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_COMPAT_CACHE_NONE: Type = 0;
    pub const SCE_COMPAT_CACHE_INVALIDATE: Type = 1;
    pub const SCE_COMPAT_CACHE_WRITEBACK: Type = 2;
}
pub mod SceCompatPeripheralMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_COMPAT_PERIPHERAL_POWER_IS_SUSPEND_REQUIRED: Type = 1;
    pub const SCE_COMPAT_PERIPHERAL_POWER_GET_BATTERY_LIFETIME: Type = 2;
    pub const SCE_COMPAT_PERIPHERAL_POWER_GET_BATTERY_PERCENT: Type = 3;
    pub const SCE_COMPAT_PERIPHERAL_HPREMOTE_IS_HEADPHONE_EXIST: Type = 4;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceCompatCdram {
    pub cached_cdram: *mut crate::ctypes::c_void,
    pub uncached_cdram: *mut crate::ctypes::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceCtrlDataPsp {
    pub TimeStamp: crate::ctypes::c_uint,
    pub Buttons: crate::ctypes::c_uint,
    pub Lx: crate::ctypes::c_uchar,
    pub Ly: crate::ctypes::c_uchar,
    pub Rx: crate::ctypes::c_uchar,
    pub Ry: crate::ctypes::c_uchar,
    pub Rsrv: [crate::ctypes::c_uchar; 4usize],
}
extern "C" {
    pub fn sceCompatInitEx(unk: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatUninit() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatStart() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatStop() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatAllocCdramWithHole(cdram: *mut SceCompatCdram) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatFrameBufferInit(
        framebuffer: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatSetSuspendSema(semaid1: SceUID, semaid2: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatSuspendResume(unk: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatCache(
        mode: crate::ctypes::c_int,
        addr: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatWaitSpecialRequest(unk: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatInterrupt(intr_code: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatLCDCSync() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatGetPrimaryHead() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatGetPeripheralState(mode: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatGetStatus() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatGetUpdateState() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatSetUpdateState(state: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatSetDisplayConfig(
        unk0: crate::ctypes::c_int,
        unk1: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatSetRif(rif: *const crate::ctypes::c_char) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatGetPspSystemSoftwareVersion() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatAvailableColorSpaceSetting() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatCheckPocketStation() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatIsPocketStationTitle() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatWaitAndGetRequest(
        mode: crate::ctypes::c_int,
        id: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatReadShared32(
        location: crate::ctypes::c_int,
        value: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatWriteShared32(
        location: crate::ctypes::c_int,
        value: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatWriteSharedCtrl(pad_data: *mut SceCtrlDataPsp) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatGetTitleList(
        buf: *mut crate::ctypes::c_void,
        length: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatGetDevInf(info: *mut SceIoDevInfo) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCompatGetCurrentSecureTick(tick: *mut SceRtcTick) -> crate::ctypes::c_int;
}
