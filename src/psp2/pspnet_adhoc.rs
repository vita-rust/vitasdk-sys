/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2::net::net::*;
#[allow(unused_imports)]
use crate::psp2::pspnet_adhocctl::*;
#[allow(unused_imports)]
use crate::psp2::types::*;
use crate::psp2common::net::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_NET_ADHOC_PDP_MFS: u32 = 1444;
pub const SCE_NET_ADHOC_PDP_MTU: u32 = 65523;
pub const SCE_NET_ADHOC_PTP_MSS: u32 = 1444;
pub mod ScePspnetAdhocErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_ERROR_NET_ADHOC_INVALID_SOCKET_ID: Type = 2151745281;
    pub const SCE_ERROR_NET_ADHOC_INVALID_ADDR: Type = 2151745282;
    pub const SCE_ERROR_NET_ADHOC_INVALID_PORT: Type = 2151745283;
    pub const SCE_ERROR_NET_ADHOC_INVALID_BUFLEN: Type = 2151745284;
    pub const SCE_ERROR_NET_ADHOC_INVALID_DATALEN: Type = 2151745285;
    pub const SCE_ERROR_NET_ADHOC_NOT_ENOUGH_SPACE: Type = 2151745286;
    pub const SCE_ERROR_NET_ADHOC_SOCKET_DELETED: Type = 2151745287;
    pub const SCE_ERROR_NET_ADHOC_SOCKET_ALERTED: Type = 2151745288;
    pub const SCE_ERROR_NET_ADHOC_WOULD_BLOCK: Type = 2151745289;
    pub const SCE_ERROR_NET_ADHOC_PORT_IN_USE: Type = 2151745290;
    pub const SCE_ERROR_NET_ADHOC_NOT_CONNECTED: Type = 2151745291;
    pub const SCE_ERROR_NET_ADHOC_DISCONNECTED: Type = 2151745292;
    pub const SCE_ERROR_NET_ADHOC_NOT_OPENED: Type = 2151745293;
    pub const SCE_ERROR_NET_ADHOC_NOT_LISTENED: Type = 2151745294;
    pub const SCE_ERROR_NET_ADHOC_SOCKET_ID_NOT_AVAIL: Type = 2151745295;
    pub const SCE_ERROR_NET_ADHOC_PORT_NOT_AVAIL: Type = 2151745296;
    pub const SCE_ERROR_NET_ADHOC_INVALID_ARG: Type = 2151745297;
    pub const SCE_ERROR_NET_ADHOC_NOT_INITIALIZED: Type = 2151745298;
    pub const SCE_ERROR_NET_ADHOC_ALREADY_INITIALIZED: Type = 2151745299;
    pub const SCE_ERROR_NET_ADHOC_BUSY: Type = 2151745300;
    pub const SCE_ERROR_NET_ADHOC_TIMEOUT: Type = 2151745301;
    pub const SCE_ERROR_NET_ADHOC_NO_ENTRY: Type = 2151745302;
    pub const SCE_ERROR_NET_ADHOC_EXCEPTION_EVENT: Type = 2151745303;
    pub const SCE_ERROR_NET_ADHOC_CONNECTION_REFUSED: Type = 2151745304;
    pub const SCE_ERROR_NET_ADHOC_THREAD_ABORTED: Type = 2151745305;
    pub const SCE_ERROR_NET_ADHOC_ALREADY_CREATED: Type = 2151745306;
    pub const SCE_ERROR_NET_ADHOC_NOT_IN_GAMEMODE: Type = 2151745307;
    pub const SCE_ERROR_NET_ADHOC_NOT_CREATED: Type = 2151745308;
    pub const SCE_ERROR_NET_ADHOC_INVALID_ALIGNMENT: Type = 2151745309;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceNetAdhocPollSd {
    pub id: crate::ctypes::c_int,
    pub events: crate::ctypes::c_int,
    pub revents: crate::ctypes::c_int,
}
pub mod ScePspnetAdhocEvent {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_ADHOC_EV_SEND: Type = 1;
    pub const SCE_NET_ADHOC_EV_RECV: Type = 2;
    pub const SCE_NET_ADHOC_EV_CONNECT: Type = 4;
    pub const SCE_NET_ADHOC_EV_ACCEPT: Type = 8;
    pub const SCE_NET_ADHOC_EV_FLUSH: Type = 16;
    pub const SCE_NET_ADHOC_EV_INVALID: Type = 256;
    pub const SCE_NET_ADHOC_EV_DELETE: Type = 512;
    pub const SCE_NET_ADHOC_EV_ALERT: Type = 1024;
    pub const SCE_NET_ADHOC_EV_DISCONNECT: Type = 2048;
}
#[repr(C)]
pub struct SceNetAdhocPdpStat {
    pub next: *mut SceNetAdhocPdpStat,
    pub id: crate::ctypes::c_int,
    pub laddr: SceNetEtherAddr,
    pub lport: SceUShort16,
    pub rcv_sb_cc: crate::ctypes::c_uint,
}
pub mod ScePspnetAdhocPtpState {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_ADHOC_PTP_STATE_CLOSED: Type = 0;
    pub const SCE_NET_ADHOC_PTP_STATE_LISTEN: Type = 1;
    pub const SCE_NET_ADHOC_PTP_STATE_SYN_SENT: Type = 2;
    pub const SCE_NET_ADHOC_PTP_STATE_SYN_RCVD: Type = 3;
    pub const SCE_NET_ADHOC_PTP_STATE_ESTABLISHED: Type = 4;
}
#[repr(C)]
pub struct SceNetAdhocPtpStat {
    pub next: *mut SceNetAdhocPtpStat,
    pub id: crate::ctypes::c_int,
    pub laddr: SceNetEtherAddr,
    pub paddr: SceNetEtherAddr,
    pub lport: SceUShort16,
    pub pport: SceUShort16,
    pub snd_sb_cc: crate::ctypes::c_uint,
    pub rcv_sb_cc: crate::ctypes::c_uint,
    pub state: crate::ctypes::c_int,
}
pub mod ScePspnetAdhocFlags {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_NET_ADHOC_F_NONBLOCK: Type = 1;
    pub const SCE_NET_ADHOC_F_ALERTSEND: Type = 16;
    pub const SCE_NET_ADHOC_F_ALERTRECV: Type = 32;
    pub const SCE_NET_ADHOC_F_ALERTPOLL: Type = 64;
    pub const SCE_NET_ADHOC_F_ALERTCONNECT: Type = 128;
    pub const SCE_NET_ADHOC_F_ALERTACCEPT: Type = 256;
    pub const SCE_NET_ADHOC_F_ALERTFLUSH: Type = 512;
}
extern "C" {
    pub fn sceNetAdhocInit() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocTerm() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPollSocket(
        sds: *mut SceNetAdhocPollSd,
        nsds: crate::ctypes::c_int,
        timeout: crate::ctypes::c_uint,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocSetSocketAlert(
        id: crate::ctypes::c_int,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocGetSocketAlert(
        id: crate::ctypes::c_int,
        flag: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPdpCreate(
        saddr: *const SceNetEtherAddr,
        sport: SceUShort16,
        bufsize: crate::ctypes::c_uint,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPdpSend(
        id: crate::ctypes::c_int,
        daddr: *const SceNetEtherAddr,
        dport: SceUShort16,
        data: *const crate::ctypes::c_void,
        len: crate::ctypes::c_int,
        timeout: crate::ctypes::c_uint,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPdpRecv(
        id: crate::ctypes::c_int,
        saddr: *mut SceNetEtherAddr,
        sport: *mut SceUShort16,
        buf: *mut crate::ctypes::c_void,
        len: *mut crate::ctypes::c_int,
        timeout: crate::ctypes::c_uint,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPdpDelete(
        id: crate::ctypes::c_int,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocGetPdpStat(
        buflen: *mut crate::ctypes::c_int,
        buf: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPtpOpen(
        saddr: *const SceNetEtherAddr,
        sport: SceUShort16,
        daddr: *const SceNetEtherAddr,
        dport: SceUShort16,
        bufsize: crate::ctypes::c_uint,
        rexmt_int: crate::ctypes::c_uint,
        rexmt_cnt: crate::ctypes::c_int,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPtpConnect(
        id: crate::ctypes::c_int,
        timeout: crate::ctypes::c_uint,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPtpListen(
        saddr: *const SceNetEtherAddr,
        sport: SceUShort16,
        bufsize: crate::ctypes::c_uint,
        rexmt_int: crate::ctypes::c_uint,
        rexmt_cnt: crate::ctypes::c_int,
        backlog: crate::ctypes::c_int,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPtpAccept(
        id: crate::ctypes::c_int,
        addr: *mut SceNetEtherAddr,
        port: *mut SceUShort16,
        timeout: crate::ctypes::c_uint,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPtpSend(
        id: crate::ctypes::c_int,
        data: *const crate::ctypes::c_void,
        len: *mut crate::ctypes::c_int,
        timeout: crate::ctypes::c_uint,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPtpRecv(
        id: crate::ctypes::c_int,
        buf: *mut crate::ctypes::c_void,
        len: *mut crate::ctypes::c_int,
        timeout: crate::ctypes::c_uint,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPtpFlush(
        id: crate::ctypes::c_int,
        timeout: crate::ctypes::c_uint,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocPtpClose(
        id: crate::ctypes::c_int,
        flag: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceNetAdhocGetPtpStat(
        buflen: *mut crate::ctypes::c_int,
        buf: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
