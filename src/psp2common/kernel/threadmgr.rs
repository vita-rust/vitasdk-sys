/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;

pub const SCE_KERNEL_THREAD_CPU_AFFINITY_MASK_DEFAULT: u32 = 0;
pub mod SceKernelIdListType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_TMID_Thread: Type = 1;
    pub const SCE_KERNEL_TMID_Semaphore: Type = 2;
    pub const SCE_KERNEL_TMID_EventFlag: Type = 3;
    pub const SCE_KERNEL_TMID_Mbox: Type = 4;
    pub const SCE_KERNEL_TMID_Vpl: Type = 5;
    pub const SCE_KERNEL_TMID_Fpl: Type = 6;
    pub const SCE_KERNEL_TMID_Mpipe: Type = 7;
    pub const SCE_KERNEL_TMID_Callback: Type = 8;
    pub const SCE_KERNEL_TMID_ThreadEventHandler: Type = 9;
    pub const SCE_KERNEL_TMID_Alarm: Type = 10;
    pub const SCE_KERNEL_TMID_VTimer: Type = 11;
    pub const SCE_KERNEL_TMID_SleepThread: Type = 64;
    pub const SCE_KERNEL_TMID_DelayThread: Type = 65;
    pub const SCE_KERNEL_TMID_SuspendThread: Type = 66;
    pub const SCE_KERNEL_TMID_DormantThread: Type = 67;
}
pub mod SceThreadStatus {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_THREAD_RUNNING: Type = 1;
    pub const SCE_THREAD_READY: Type = 2;
    pub const SCE_THREAD_STANDBY: Type = 4;
    pub const SCE_THREAD_WAITING: Type = 8;
    pub const SCE_THREAD_SUSPEND: Type = 8;
    pub const SCE_THREAD_DORMANT: Type = 16;
    pub const SCE_THREAD_STOPPED: Type = 16;
    pub const SCE_THREAD_DELETED: Type = 32;
    pub const SCE_THREAD_KILLED: Type = 32;
    pub const SCE_THREAD_DEAD: Type = 64;
    pub const SCE_THREAD_STAGNANT: Type = 128;
    pub const SCE_THREAD_SUSPENDED: Type = 256;
}
#[repr(C)]
pub struct SceKernelThreadRunStatus {
    pub size: SceSize,
    pub cpuInfo: [SceKernelThreadRunStatus__bindgen_ty_1; 4usize],
}
#[repr(C)]
pub struct SceKernelThreadRunStatus__bindgen_ty_1 {
    pub processId: SceUID,
    pub threadId: SceUID,
    pub priority: crate::ctypes::c_int,
}
pub type SceKernelThreadEntry = ::core::option::Option<
    unsafe extern "C" fn(args: SceSize, argp: *mut crate::ctypes::c_void) -> crate::ctypes::c_int,
>;
#[repr(C)]
pub struct SceKernelThreadOptParam {
    pub size: SceSize,
    pub attr: SceUInt32,
}
#[repr(C)]
pub struct SceKernelThreadInfo {
    pub size: SceSize,
    pub processId: SceUID,
    pub name: [crate::ctypes::c_char; 32usize],
    pub attr: SceUInt32,
    pub status: SceUInt32,
    pub entry: SceKernelThreadEntry,
    pub stack: *mut crate::ctypes::c_void,
    pub stackSize: SceInt32,
    pub initPriority: SceInt32,
    pub currentPriority: SceInt32,
    pub initCpuAffinityMask: SceInt32,
    pub currentCpuAffinityMask: SceInt32,
    pub currentCpuId: SceInt32,
    pub lastExecutedCpuId: SceInt32,
    pub waitType: SceUInt32,
    pub waitId: SceUID,
    pub exitStatus: SceInt32,
    pub runClocks: SceKernelSysClock,
    pub intrPreemptCount: SceUInt32,
    pub threadPreemptCount: SceUInt32,
    pub threadReleaseCount: SceUInt32,
    pub changeCpuCount: SceInt32,
    pub fNotifyCallback: SceInt32,
    pub reserved: SceInt32,
}
pub type SceKernelCallbackFunction = ::core::option::Option<
    unsafe extern "C" fn(
        notifyId: crate::ctypes::c_int,
        notifyCount: crate::ctypes::c_int,
        notifyArg: crate::ctypes::c_int,
        userData: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int,
>;
#[repr(C)]
pub struct SceKernelCallbackInfo {
    pub size: SceSize,
    pub callbackId: SceUID,
    pub name: [crate::ctypes::c_char; 32usize],
    pub threadId: SceUID,
    pub callback: SceKernelCallbackFunction,
    pub common: *mut crate::ctypes::c_void,
    pub notifyCount: crate::ctypes::c_int,
    pub notifyArg: crate::ctypes::c_int,
}
#[repr(C)]
pub struct SceKernelSemaOptParam {
    pub size: SceSize,
}
#[repr(C)]
pub struct SceKernelSemaInfo {
    pub size: SceSize,
    pub semaId: SceUID,
    pub name: [crate::ctypes::c_char; 32usize],
    pub attr: SceUInt,
    pub initCount: crate::ctypes::c_int,
    pub currentCount: crate::ctypes::c_int,
    pub maxCount: crate::ctypes::c_int,
    pub numWaitThreads: crate::ctypes::c_int,
}
pub mod SceKernelWaitableAttribute {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_ATTR_THREAD_FIFO: Type = 0;
    pub const SCE_KERNEL_ATTR_THREAD_PRIO: Type = 8192;
    pub const SCE_KERNEL_ATTR_OPENABLE: Type = 128;
}
pub mod SceEventFlagAttributes {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_EVENT_THREAD_FIFO: Type = 0;
    pub const SCE_EVENT_THREAD_PRIO: Type = 8192;
    pub const SCE_EVENT_WAITSINGLE: Type = 0;
    pub const SCE_EVENT_WAITMULTIPLE: Type = 4096;
    pub const SCE_EVENT_OPENABLE: Type = 128;
}
#[repr(C)]
pub struct SceKernelEventFlagOptParam {
    pub size: SceSize,
}
#[repr(C)]
pub struct SceKernelEventFlagInfo {
    pub size: SceSize,
    pub evfId: SceUID,
    pub name: [crate::ctypes::c_char; 32usize],
    pub attr: SceUInt,
    pub initPattern: SceUInt,
    pub currentPattern: SceUInt,
    pub numWaitThreads: crate::ctypes::c_int,
}
pub mod SceEventFlagWaitTypes {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_EVENT_WAITAND: Type = 0;
    pub const SCE_EVENT_WAITOR: Type = 1;
    pub const SCE_EVENT_WAITCLEAR: Type = 2;
    pub const SCE_EVENT_WAITCLEAR_PAT: Type = 4;
}
#[repr(C)]
pub struct SceKernelLwCondWork {
    pub data: [SceInt32; 4usize],
}
#[repr(C)]
pub struct SceKernelLwCondOptParam {
    pub size: SceSize,
}
#[repr(C)]
pub struct SceKernelLwMutexWork {
    pub data: [SceInt64; 4usize],
}
#[repr(C)]
pub struct SceKernelLwMutexOptParam {
    pub size: SceSize,
}
pub mod SceKernelMutexAttribute {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_MUTEX_ATTR_RECURSIVE: Type = 2;
    pub const SCE_KERNEL_MUTEX_ATTR_CEILING: Type = 4;
}
#[repr(C)]
pub struct SceKernelMutexOptParam {
    pub size: SceSize,
    pub ceilingPriority: crate::ctypes::c_int,
}
#[repr(C)]
pub struct SceKernelMutexInfo {
    pub size: SceSize,
    pub mutexId: SceUID,
    pub name: [crate::ctypes::c_char; 32usize],
    pub attr: SceUInt,
    pub initCount: crate::ctypes::c_int,
    pub currentCount: crate::ctypes::c_int,
    pub currentOwnerId: SceUID,
    pub numWaitThreads: crate::ctypes::c_int,
}
#[repr(C)]
pub struct SceKernelCondOptParam {
    pub size: SceSize,
}
#[repr(C)]
pub struct SceKernelCondInfo {
    pub size: SceSize,
    pub condId: SceUID,
    pub name: [crate::ctypes::c_char; 32usize],
    pub attr: SceUInt,
    pub mutexId: SceUID,
    pub numWaitThreads: crate::ctypes::c_int,
}
