/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_KERNEL_THREAD_ID_SELF: u32 = 0;
pub const SCE_KERNEL_PROCESS_ID_SELF: u32 = 0;
pub const SCE_UID_NAMELEN: u32 = 31;
pub const SCE_OK: u32 = 0;
pub const SCE_KERNEL_1KiB: u32 = 1024;
pub const SCE_KERNEL_2KiB: u32 = 2048;
pub const SCE_KERNEL_4KiB: u32 = 4096;
pub const SCE_KERNEL_8KiB: u32 = 8192;
pub const SCE_KERNEL_16KiB: u32 = 16384;
pub const SCE_KERNEL_32KiB: u32 = 32768;
pub const SCE_KERNEL_64KiB: u32 = 65536;
pub const SCE_KERNEL_128KiB: u32 = 131072;
pub const SCE_KERNEL_256KiB: u32 = 262144;
pub const SCE_KERNEL_512KiB: u32 = 524288;
pub const SCE_KERNEL_1MiB: u32 = 1048576;
pub const SCE_KERNEL_2MiB: u32 = 2097152;
pub const SCE_KERNEL_4MiB: u32 = 4194304;
pub const SCE_KERNEL_8MiB: u32 = 8388608;
pub const SCE_KERNEL_16MiB: u32 = 16777216;
pub const SCE_KERNEL_32MiB: u32 = 33554432;
pub const SCE_KERNEL_64MiB: u32 = 67108864;
pub const SCE_KERNEL_128MiB: u32 = 134217728;
pub const SCE_KERNEL_256MiB: u32 = 268435456;
pub const SCE_KERNEL_512MiB: u32 = 536870912;
pub const SCE_KERNEL_1GiB: u32 = 1073741824;
pub const SCE_KERNEL_2GiB: u32 = 2147483648;
pub const SCE_KERNEL_4GiB: u64 = 4294967296;
pub const SCE_KERNEL_8GiB: u64 = 8589934592;
pub const SCE_KERNEL_16GiB: u64 = 17179869184;
pub const SCE_KERNEL_32GiB: u64 = 34359738368;
pub type SceChar8 = i8;
pub type SceUChar8 = u8;
pub type SceInt8 = i8;
pub type SceUInt8 = u8;
pub type SceShort16 = i16;
pub type SceUShort16 = u16;
pub type SceInt16 = i16;
pub type SceUInt16 = u16;
pub type SceInt32 = i32;
pub type SceUInt32 = u32;
pub type SceInt = i32;
pub type SceUInt = u32;
pub type SceInt64 = i64;
pub type SceUInt64 = u64;
pub type SceLong64 = i64;
pub type SceULong64 = u64;
pub type SceSize = crate::ctypes::c_uint;
pub type SceSSize = crate::ctypes::c_int;
pub type SceBool = crate::ctypes::c_int;
pub mod _bindgen_ty_1 {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_FALSE: Type = 0;
    pub const SCE_TRUE: Type = 1;
}
pub type SceFloat = f32;
pub type SceFloat32 = f32;
pub type SceDouble = f64;
pub type SceDouble64 = f64;
pub type SceSByte = crate::ctypes::c_schar;
pub type SceSByte8 = crate::ctypes::c_schar;
pub type SceByte = crate::ctypes::c_uchar;
pub type SceByte8 = crate::ctypes::c_uchar;
pub type SceWChar16 = u16;
pub type SceWChar32 = u32;
pub type SceVoid = crate::ctypes::c_void;
pub type ScePVoid = *mut crate::ctypes::c_void;
pub type SceIntPtr = crate::ctypes::c_int;
pub type SceUIntPtr = crate::ctypes::c_uint;
pub type SceUIntVAddr = SceUIntPtr;
pub type SceMode = crate::ctypes::c_int;
pub type SceOff = SceInt64;
pub type SceUID = crate::ctypes::c_int;
pub type ScePID = crate::ctypes::c_int;
pub type SceNID = crate::ctypes::c_uint;
pub type SceName = *mut crate::ctypes::c_char;
pub type SceKernelSysClock = SceUInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIVector2 {
    pub x: SceInt,
    pub y: SceInt,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFVector2 {
    pub x: SceFloat,
    pub y: SceFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIVector3 {
    pub x: SceInt,
    pub y: SceInt,
    pub z: SceInt,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFVector3 {
    pub x: SceFloat,
    pub y: SceFloat,
    pub z: SceFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIVector4 {
    pub x: SceInt,
    pub y: SceInt,
    pub z: SceInt,
    pub w: SceInt,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFVector4 {
    pub x: SceFloat,
    pub y: SceFloat,
    pub z: SceFloat,
    pub w: SceFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIMatrix2 {
    pub x: SceIVector2,
    pub y: SceIVector2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFMatrix2 {
    pub x: SceFVector2,
    pub y: SceFVector2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIMatrix3 {
    pub x: SceIVector3,
    pub y: SceIVector3,
    pub z: SceIVector3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFMatrix3 {
    pub x: SceFVector3,
    pub y: SceFVector3,
    pub z: SceFVector3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIMatrix4 {
    pub x: SceIVector4,
    pub y: SceIVector4,
    pub z: SceIVector4,
    pub w: SceIVector4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFMatrix4 {
    pub x: SceFVector4,
    pub y: SceFVector4,
    pub z: SceFVector4,
    pub w: SceFVector4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFQuaternion {
    pub x: SceFloat,
    pub y: SceFloat,
    pub z: SceFloat,
    pub w: SceFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFColor {
    pub r: SceFloat,
    pub g: SceFloat,
    pub b: SceFloat,
    pub a: SceFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFPlane {
    pub a: SceFloat,
    pub b: SceFloat,
    pub c: SceFloat,
    pub d: SceFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceDateTime {
    pub year: crate::ctypes::c_ushort,
    pub month: crate::ctypes::c_ushort,
    pub day: crate::ctypes::c_ushort,
    pub hour: crate::ctypes::c_ushort,
    pub minute: crate::ctypes::c_ushort,
    pub second: crate::ctypes::c_ushort,
    pub microsecond: crate::ctypes::c_uint,
}
