/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceSblRsaDataParam {
    pub data: *mut crate::ctypes::c_void,
    pub size: crate::ctypes::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceSblRsaPublicKeyParam {
    pub n: *const crate::ctypes::c_void,
    pub k: *const crate::ctypes::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceSblRsaPrivateKeyParam {
    pub unk_0x00: crate::ctypes::c_int,
    pub unk_0x04: crate::ctypes::c_int,
    pub unk_0x08: crate::ctypes::c_int,
    pub unk_0x0C: crate::ctypes::c_int,
    pub p: *mut crate::ctypes::c_void,
    pub q: *mut crate::ctypes::c_void,
    pub dp: *mut crate::ctypes::c_void,
    pub dq: *mut crate::ctypes::c_void,
    pub qp: *mut crate::ctypes::c_void,
}
extern "C" {
    pub fn ksceSblRSA2048CreateSignature(
        rsa_signature: *mut SceSblRsaDataParam,
        hash: *mut SceSblRsaDataParam,
        private_key: *mut SceSblRsaPrivateKeyParam,
        type_: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSblRSA2048VerifySignature(
        rsa_signature: *mut SceSblRsaDataParam,
        hash: *mut SceSblRsaDataParam,
        public_key: *mut SceSblRsaPublicKeyParam,
        type_: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
