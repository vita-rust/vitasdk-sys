/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub type SceKernelCallbackFunction = ::core::option::Option<
    unsafe extern "C" fn(
        notifyId: crate::ctypes::c_int,
        notifyCount: crate::ctypes::c_int,
        notifyArg: crate::ctypes::c_int,
        common: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int,
>;
#[repr(C)]
pub struct SceKernelCallbackInfo {
    pub size: SceSize,
    pub callbackId: SceUID,
    pub name: [crate::ctypes::c_char; 32usize],
    pub threadId: SceUID,
    pub callback: SceKernelCallbackFunction,
    pub common: *mut crate::ctypes::c_void,
    pub notifyCount: crate::ctypes::c_int,
    pub notifyArg: crate::ctypes::c_int,
}
extern "C" {
    pub fn ksceKernelCreateCallback(
        name: *const crate::ctypes::c_char,
        attr: crate::ctypes::c_uint,
        func: SceKernelCallbackFunction,
        arg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelDeleteCallback(cb: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelNotifyCallback(cb: SceUID, arg2: crate::ctypes::c_int)
        -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCancelCallback(cb: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetCallbackCount(cb: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCheckCallback() -> crate::ctypes::c_int;
}
