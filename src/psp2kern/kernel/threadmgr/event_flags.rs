/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
pub struct SceKernelEventFlagOptParam {
    pub size: SceSize,
}
#[repr(C)]
pub struct SceKernelEventFlagInfo {
    pub size: SceSize,
    pub evfId: SceUID,
    pub name: [crate::ctypes::c_char; 32usize],
    pub attr: SceUInt,
    pub initPattern: SceUInt,
    pub currentPattern: SceUInt,
    pub numWaitThreads: crate::ctypes::c_int,
}
pub mod SceEventFlagAttributes {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_EVENT_WAITMULTIPLE: Type = 4096;
}
pub mod SceEventFlagWaitTypes {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_EVENT_WAITAND: Type = 0;
    pub const SCE_EVENT_WAITOR: Type = 1;
    pub const SCE_EVENT_WAITCLEAR: Type = 2;
    pub const SCE_EVENT_WAITCLEAR_PAT: Type = 4;
}
extern "C" {
    pub fn ksceKernelGetEventFlagInfo(
        evfid: SceUID,
        info: *mut SceKernelEventFlagInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCreateEventFlag(
        name: *const crate::ctypes::c_char,
        attr: crate::ctypes::c_int,
        bits: crate::ctypes::c_int,
        opt: *mut SceKernelEventFlagOptParam,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelSetEventFlag(
        evfid: SceUID,
        bits: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelClearEventFlag(
        evfid: SceUID,
        bits: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelPollEventFlag(
        evfid: SceUID,
        bits: crate::ctypes::c_uint,
        wait: crate::ctypes::c_uint,
        outBits: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelWaitEventFlag(
        evfid: SceUID,
        bits: crate::ctypes::c_uint,
        wait: crate::ctypes::c_uint,
        outBits: *mut crate::ctypes::c_uint,
        timeout: *mut SceUInt,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelWaitEventFlagCB(
        evfid: SceUID,
        bits: crate::ctypes::c_uint,
        wait: crate::ctypes::c_uint,
        outBits: *mut crate::ctypes::c_uint,
        timeout: *mut SceUInt,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelDeleteEventFlag(evfid: SceUID) -> crate::ctypes::c_int;
}
