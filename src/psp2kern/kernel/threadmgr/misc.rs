/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;

pub mod SceKernelIdListType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_TMID_Thread: Type = 1;
    pub const SCE_KERNEL_TMID_Semaphore: Type = 2;
    pub const SCE_KERNEL_TMID_EventFlag: Type = 3;
    pub const SCE_KERNEL_TMID_Mbox: Type = 4;
    pub const SCE_KERNEL_TMID_Vpl: Type = 5;
    pub const SCE_KERNEL_TMID_Fpl: Type = 6;
    pub const SCE_KERNEL_TMID_Mpipe: Type = 7;
    pub const SCE_KERNEL_TMID_Callback: Type = 8;
    pub const SCE_KERNEL_TMID_ThreadEventHandler: Type = 9;
    pub const SCE_KERNEL_TMID_Alarm: Type = 10;
    pub const SCE_KERNEL_TMID_VTimer: Type = 11;
    pub const SCE_KERNEL_TMID_SleepThread: Type = 64;
    pub const SCE_KERNEL_TMID_DelayThread: Type = 65;
    pub const SCE_KERNEL_TMID_SuspendThread: Type = 66;
    pub const SCE_KERNEL_TMID_DormantThread: Type = 67;
}
extern "C" {
    pub fn ksceKernelGetThreadmgrUIDClass(uid: SceUID) -> SceKernelIdListType::Type;
}
extern "C" {
    pub fn ksceKernelGetSystemTimeLow() -> SceUInt32;
}
extern "C" {
    pub fn ksceKernelGetSystemTimeWide() -> SceInt64;
}
extern "C" {
    pub fn ksceKernelGetThreadTLSAddr(
        thid: SceUID,
        key: crate::ctypes::c_int,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceKernelGetTLSAddr(key: crate::ctypes::c_int) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceKernelSetPermission(value: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetProcessId() -> SceUID;
}
extern "C" {
    pub fn ksceKernelGetProcessIdFromTLS() -> SceUID;
}
extern "C" {
    pub fn ksceKernelSetProcessIdToTLS(pid: SceUID) -> SceUID;
}
extern "C" {
    pub fn ksceKernelRunWithStack(
        stack_size: SceSize,
        to_call: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut crate::ctypes::c_void) -> crate::ctypes::c_int,
        >,
        args: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
