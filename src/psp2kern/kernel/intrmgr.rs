/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub type SceKernelIntrHandler = ::core::option::Option<
    unsafe extern "C" fn(
        unk: crate::ctypes::c_int,
        userCtx: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int,
>;
pub type SceKernelSubIntrHandler = ::core::option::Option<
    unsafe extern "C" fn(
        subintr_arg: *mut crate::ctypes::c_void,
        register_arg: *mut crate::ctypes::c_void,
        intr_priority: crate::ctypes::c_uchar,
    ) -> crate::ctypes::c_int,
>;
pub type SceKernelIntrOptHandlersCb1 = ::core::option::Option<
    unsafe extern "C" fn(
        intr_code: crate::ctypes::c_int,
        subintr_code: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int,
>;
pub type SceKernelIntrOptHandlersCb2 = ::core::option::Option<
    unsafe extern "C" fn(
        intr_code: crate::ctypes::c_int,
        subintr_code: crate::ctypes::c_int,
        arg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int,
>;
pub type SceKernelIntrOptHandlersCb3 = ::core::option::Option<
    unsafe extern "C" fn(
        intr_code: crate::ctypes::c_int,
        subintr_code: crate::ctypes::c_int,
        handler: SceKernelSubIntrHandler,
        register_arg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceKernelIntrOptHandlers {
    pub size: u32,
    pub pre_register_subintr_cb: *mut SceKernelIntrOptHandlersCb3,
    pub post_register_subintr_cb: *mut SceKernelIntrOptHandlersCb3,
    pub release_subintr_cb: *mut SceKernelIntrOptHandlersCb1,
    pub fptr0: *mut SceKernelIntrOptHandlersCb1,
    pub enable_subintr_cb: *mut SceKernelIntrOptHandlersCb1,
    pub disable_subintr_cb: *mut SceKernelIntrOptHandlersCb1,
    pub fptr3: *mut SceKernelIntrOptHandlersCb2,
    pub fptr4: *mut SceKernelIntrOptHandlersCb1,
    pub fptr5: *mut SceKernelIntrOptHandlersCb1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceKernelIntrOptParam {
    pub size: u32,
    pub num: u32,
    pub handlers: *mut SceKernelIntrOptHandlers,
    pub unk_C: u32,
    pub unk_10: u32,
}
extern "C" {
    pub fn ksceKernelRegisterIntrHandler(
        intr_code: crate::ctypes::c_int,
        name: *const crate::ctypes::c_char,
        interrupt_type: crate::ctypes::c_int,
        handler: SceKernelIntrHandler,
        user_ctx: *mut crate::ctypes::c_void,
        priority: crate::ctypes::c_int,
        target_cpu: crate::ctypes::c_int,
        opt: *mut SceKernelIntrOptParam,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelReleaseIntrHandler(intr_code: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelEnableIntr(intr_code: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelDisableIntr(intr_code: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelResumeIntr(
        intr_code: crate::ctypes::c_int,
        enabled: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSuspendIntr(
        intr_code: crate::ctypes::c_int,
        enabled: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelIsIntrPending(intr_code: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelClearIntrPending(intr_code: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSetIntrPriority(
        intr_code: crate::ctypes::c_int,
        priority: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetIntrPriority(
        intr_code: crate::ctypes::c_int,
        priority: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSetIntrTarget(
        intr_code: crate::ctypes::c_int,
        cpu_target_list: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetIntrTarget(
        intr_code: crate::ctypes::c_int,
        cpu_target_list: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelTriggerSGI(
        intr_code: crate::ctypes::c_int,
        target_list_filter: crate::ctypes::c_uint,
        cpu_target_list: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelIsIntrAllowedInCurrentContext(
        intr_code: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelRegisterSubIntrHandler(
        intr_code: crate::ctypes::c_int,
        subintr_code: crate::ctypes::c_int,
        name: *const crate::ctypes::c_char,
        handler: SceKernelSubIntrHandler,
        register_arg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelReleaseSubIntrHandler(
        intr_code: crate::ctypes::c_int,
        subintr_code: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelTriggerSubIntr(
        intr_code: crate::ctypes::c_int,
        subintr_code: crate::ctypes::c_int,
        subintr_arg: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelEnableSubIntr(
        intr_code: crate::ctypes::c_int,
        subintr_code: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelDisableSubIntr(
        intr_code: crate::ctypes::c_int,
        subintr_code: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
