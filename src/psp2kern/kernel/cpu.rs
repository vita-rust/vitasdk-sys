/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysclib::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysmem::mmu::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

extern "C" {
    pub fn ksceKernelCpuDcacheWritebackRange(ptr: *const crate::ctypes::c_void, len: SceSize);
}
extern "C" {
    pub fn ksceKernelProcessGetContext(
        pid: SceUID,
        ctx: *mut *mut SceKernelProcessContext,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelProcessSwitchContext(
        new_context: *const SceKernelProcessContext,
        prev_context: *mut SceKernelProcessContext,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuGetCpuId() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuDisableInterrupts() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuEnableInterrupts(flags: crate::ctypes::c_int);
}
extern "C" {
    pub fn ksceKernelCpuDcacheInvalidateRange(ptr: *const crate::ctypes::c_void, len: SceSize);
}
extern "C" {
    pub fn ksceKernelCpuDcacheWritebackInvalidateRange(
        ptr: *const crate::ctypes::c_void,
        len: SceSize,
    );
}
extern "C" {
    pub fn ksceKernelCpuDcacheInvalidateAll();
}
extern "C" {
    pub fn ksceKernelCpuDcacheWritebackAll();
}
extern "C" {
    pub fn ksceKernelCpuDcacheWritebackInvalidateAll();
}
extern "C" {
    pub fn ksceKernelCpuDcacheAndL2WritebackRange(ptr: *const crate::ctypes::c_void, len: SceSize);
}
extern "C" {
    pub fn ksceKernelCpuDcacheAndL2InvalidateRange(ptr: *const crate::ctypes::c_void, len: SceSize);
}
extern "C" {
    pub fn ksceKernelCpuDcacheAndL2WritebackInvalidateRange(
        ptr: *const crate::ctypes::c_void,
        len: SceSize,
    );
}
extern "C" {
    pub fn ksceKernelCpuIcacheInvalidateRange(ptr: *const crate::ctypes::c_void, len: SceSize);
}
extern "C" {
    pub fn ksceKernelCpuIcacheInvalidateAll() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuIcacheAndL2WritebackInvalidateRange(
        ptr: *const crate::ctypes::c_void,
        len: SceSize,
    );
}
extern "C" {
    pub fn ksceKernelSpinlockLowLock(lock: *mut SceKernelSpinlock);
}
extern "C" {
    pub fn ksceKernelSpinlockLowTryLock(lock: *mut SceKernelSpinlock) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSpinlockLowUnlock(lock: *mut SceKernelSpinlock);
}
extern "C" {
    pub fn ksceKernelSpinlockLowLockCpuSuspendIntr(
        lock: *mut SceKernelSpinlock,
    ) -> SceKernelIntrStatus;
}
extern "C" {
    pub fn ksceKernelSpinlockLowTryLockCpuSuspendIntr(
        lock: *mut SceKernelSpinlock,
    ) -> SceKernelIntrStatus;
}
extern "C" {
    pub fn ksceKernelSpinlockLowUnlockCpuResumeIntr(
        lock: *mut SceKernelSpinlock,
        intr_status: SceKernelIntrStatus,
    );
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowReadLock(lock: *mut SceKernelRWSpinlock);
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowTryReadLock(
        lock: *mut SceKernelRWSpinlock,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowReadUnlock(lock: *mut SceKernelRWSpinlock);
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowReadLockCpuSuspendIntr(
        lock: *mut SceKernelRWSpinlock,
    ) -> SceKernelIntrStatus;
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowTryReadLockCpuSuspendIntr(
        lock: *mut SceKernelRWSpinlock,
    ) -> SceKernelIntrStatus;
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowReadUnlockCpuResumeIntr(
        lock: *mut SceKernelRWSpinlock,
        intr_status: SceKernelIntrStatus,
    );
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowWriteLock(lock: *mut SceKernelRWSpinlock);
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowTryWriteLock(
        lock: *mut SceKernelRWSpinlock,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowWriteUnlock(lock: *mut SceKernelRWSpinlock);
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowWriteLockCpuSuspendIntr(
        lock: *mut SceKernelRWSpinlock,
    ) -> SceKernelIntrStatus;
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowTryWriteLockCpuSuspendIntr(
        lock: *mut SceKernelRWSpinlock,
    ) -> SceKernelIntrStatus;
}
extern "C" {
    pub fn ksceKernelRWSpinlockLowWriteUnlockCpuResumeIntr(
        lock: *mut SceKernelRWSpinlock,
        intr_status: SceKernelIntrStatus,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceCorelockContext {
    pub lock: crate::ctypes::c_int,
    pub core_count: i16,
    pub last_wait_core: i16,
}
extern "C" {
    pub fn ksceKernelCorelockInitialize(ctx: *mut SceCorelockContext);
}
extern "C" {
    pub fn ksceKernelCorelockLock(ctx: *mut SceCorelockContext, core: SceUInt32);
}
extern "C" {
    pub fn ksceKernelCorelockUnlock(ctx: *mut SceCorelockContext);
}
