/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysmem::uid_class::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
pub struct SceGUIDKernelCreateOpt {
    pub __bindgen_anon_1: SceGUIDKernelCreateOpt__bindgen_ty_1,
    pub field_4: SceUInt32,
    pub field_8: SceUInt32,
    pub pid: SceUInt32,
    pub field_10: SceUInt32,
    pub field_14: SceUInt32,
    pub field_18: SceUInt32,
    pub field_1C: SceUInt32,
}
#[repr(C)]
pub struct SceGUIDKernelCreateOpt__bindgen_ty_1 {
    pub flags: __BindgenUnionField<SceUInt32>,
    pub attr: __BindgenUnionField<SceUInt32>,
    pub bindgen_union_field: u32,
}
extern "C" {
    pub fn ksceGUIDKernelCreateWithOpt(
        sce_class: *mut SceClass,
        name: *const crate::ctypes::c_char,
        opt: *mut SceGUIDKernelCreateOpt,
        obj: *mut *mut SceObjectBase,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceGUIDClose(guid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceGUIDReferObject(
        guid: SceUID,
        object: *mut *mut SceObjectBase,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceGUIDReferObjectWithClass(
        guid: SceUID,
        sce_class: *mut SceClass,
        object: *mut *mut SceObjectBase,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceGUIDReferObjectWithClassLevel(
        guid: SceUID,
        pClass: *mut SceClass,
        level: SceUInt32,
        entry: *mut *mut SceObjectBase,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceGUIDReleaseObject(guid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceGUIDGetUIDVectorByClass(
        cls: *mut SceClass,
        vis_level: crate::ctypes::c_int,
        vector: *mut SceUID,
        num: SceSize,
        ret_num: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
pub type SceCreateUidObjOpt = SceGUIDKernelCreateOpt;
