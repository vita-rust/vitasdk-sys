/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub mod SceKernelHeapAttr {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_HEAP_ATTR_HAS_AUTO_EXTEND: Type = 1;
    pub const SCE_KERNEL_HEAP_ATTR_HAS_MEMORY_TYPE: Type = 1024;
}
#[repr(C)]
pub struct SceKernelHeapCreateOpt {
    pub size: SceSize,
    pub __bindgen_anon_1: SceKernelHeapCreateOpt__bindgen_ty_1,
    pub field_8: SceUInt32,
    pub field_C: SceUInt32,
    pub memtype: SceUInt32,
    pub field_14: SceUInt32,
    pub field_18: SceUInt32,
}
#[repr(C)]
pub struct SceKernelHeapCreateOpt__bindgen_ty_1 {
    pub attr: __BindgenUnionField<SceUInt32>,
    pub uselock: __BindgenUnionField<SceUInt32>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct SceAllocOpt {
    pub size: SceSize,
    pub data04: SceSize,
    pub align: SceSize,
    pub data0C: crate::ctypes::c_int,
    pub data10: crate::ctypes::c_int,
}
extern "C" {
    pub fn ksceKernelCreateHeap(
        name: *const crate::ctypes::c_char,
        size: SceSize,
        opt: *mut SceKernelHeapCreateOpt,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelDeleteHeap(uid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelAllocHeapMemory(uid: SceUID, size: SceSize) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceKernelAllocHeapMemoryWithOption(
        heapid: SceUID,
        len: SceSize,
        opt: *mut SceAllocOpt,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceKernelFreeHeapMemory(
        uid: SceUID,
        ptr: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelAlloc(size: crate::ctypes::c_uint) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceKernelFree(ptr: *mut crate::ctypes::c_void) -> crate::ctypes::c_int;
}
