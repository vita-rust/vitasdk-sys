pub mod data_transfers;
pub mod heap;
pub mod memtype;
pub mod mmu;
pub mod uid_class;
pub mod uid_guid;
pub mod uid_puid;
/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::kernel::sysmem::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::debug::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysmem::data_transfers::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysmem::heap::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysmem::memtype::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysmem::mmu::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysmem::uid_class::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysmem::uid_guid::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysmem::uid_puid::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::sysroot::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub mod SceKernelMemoryRefPerm {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_MEMORY_REF_PERM_ANY: Type = 0;
    pub const SCE_KERNEL_MEMORY_REF_PERM_USER_R: Type = 1;
    pub const SCE_KERNEL_MEMORY_REF_PERM_USER_W: Type = 2;
    pub const SCE_KERNEL_MEMORY_REF_PERM_USER_X: Type = 4;
    pub const SCE_KERNEL_MEMORY_REF_PERM_KERN_R: Type = 16;
    pub const SCE_KERNEL_MEMORY_REF_PERM_KERN_W: Type = 32;
    pub const SCE_KERNEL_MEMORY_REF_PERM_KERN_X: Type = 64;
}
#[repr(C)]
pub struct SceKernelAllocMemBlockKernelOpt {
    pub size: SceSize,
    pub field_4: SceUInt32,
    pub attr: SceUInt32,
    pub field_C: SceUInt32,
    pub paddr: SceUInt32,
    pub alignment: SceSize,
    pub extraLow: SceUInt32,
    pub extraHigh: SceUInt32,
    pub mirror_blockid: SceUInt32,
    pub pid: SceUID,
    pub paddr_list: *mut SceKernelPaddrList,
    pub field_2C: SceUInt32,
    pub field_30: SceUInt32,
    pub field_34: SceUInt32,
    pub field_38: SceUInt32,
    pub field_3C: SceUInt32,
    pub field_40: SceUInt32,
    pub field_44: SceUInt32,
    pub field_48: SceUInt32,
    pub field_4C: SceUInt32,
    pub field_50: SceUInt32,
    pub field_54: SceUInt32,
}
extern "C" {
    pub fn ksceKernelAllocMemBlock(
        name: *const crate::ctypes::c_char,
        type_: SceKernelMemBlockType,
        size: SceSize,
        opt: *mut SceKernelAllocMemBlockKernelOpt,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelFreeMemBlock(uid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetMemBlockBase(
        uid: SceUID,
        base: *mut *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetMemBlockType(
        uid: SceUID,
        type_: *mut crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelFindMemBlockByAddr(
        addr: *const crate::ctypes::c_void,
        size: SceSize,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelFindMemBlockByAddrForPid(
        pid: SceUID,
        addr: *const crate::ctypes::c_void,
        size: SceSize,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelGetMemBlockAllocMapSize(
        memid: SceUID,
        alloc_map_size: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelRemapBlock(uid: SceUID, type_: SceKernelMemBlockType) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelMapBlockUserVisible(uid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelMapUserBlock(
        name: *const crate::ctypes::c_char,
        permission: crate::ctypes::c_int,
        type_: crate::ctypes::c_int,
        user_buf: *const crate::ctypes::c_void,
        size: SceSize,
        kernel_page: *mut *mut crate::ctypes::c_void,
        kernel_size: *mut SceSize,
        kernel_offset: *mut crate::ctypes::c_uint,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelUserMap(
        name: *const crate::ctypes::c_char,
        permission: crate::ctypes::c_int,
        user_buf: *const crate::ctypes::c_void,
        size: SceSize,
        kernel_page: *mut *mut crate::ctypes::c_void,
        kernel_size: *mut SceSize,
        kernel_offset: *mut SceUInt32,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelProcUserMap(
        pid: SceUID,
        name: *const crate::ctypes::c_char,
        permission: crate::ctypes::c_int,
        user_buf: *const crate::ctypes::c_void,
        size: SceSize,
        kernel_page: *mut *mut crate::ctypes::c_void,
        kernel_size: *mut SceSize,
        kernel_offset: *mut SceUInt32,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelMemBlockRelease(uid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelMemRangeRetain(
        addr: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelMemRangeRetainForPid(
        pid: SceUID,
        addr: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelMemRangeRetainWithPerm(
        perm: SceKernelMemoryRefPerm::Type,
        addr: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelMemRangeRelease(
        addr: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelMemRangeReleaseForPid(
        pid: SceUID,
        addr: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelMemRangeReleaseWithPerm(
        perm: SceKernelMemoryRefPerm::Type,
        addr: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
