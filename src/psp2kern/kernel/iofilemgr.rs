/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::io::devctl::*;
#[allow(unused_imports)]
use crate::psp2kern::io::dirent::*;
#[allow(unused_imports)]
use crate::psp2kern::io::fcntl::*;
#[allow(unused_imports)]
use crate::psp2kern::io::stat::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
pub struct SceIoFdInfo {
    pub fd: SceUID,
    pub pid: SceUID,
}
extern "C" {
    pub fn ksceIoGetGUIDFdListForDebugger(
        vis_level: crate::ctypes::c_int,
        dst: *mut SceIoFdInfo,
        max_size: SceSize,
        res_size: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoGetPUIDFdListForDebugger(
        vis_level: crate::ctypes::c_int,
        dst: *mut SceIoFdInfo,
        max_size: SceSize,
        res_size: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
#[repr(C)]
pub struct SceIofileInfo {
    pub path: [crate::ctypes::c_char; 1024usize],
    pub path2: [crate::ctypes::c_char; 1024usize],
    pub pid: SceUID,
    pub data_0x804: crate::ctypes::c_int,
    pub data_0x808: crate::ctypes::c_int,
    pub data_0x80C: crate::ctypes::c_int,
    pub data_0x810: crate::ctypes::c_int,
    pub data_0x814: crate::ctypes::c_int,
    pub data_0x818: crate::ctypes::c_int,
    pub data_0x81C: crate::ctypes::c_int,
    pub data_0x820: crate::ctypes::c_int,
    pub data_0x824: crate::ctypes::c_int,
}
extern "C" {
    pub fn ksceIoGetFileInfo(
        fd: SceUID,
        pid: SceUID,
        info: *mut SceIofileInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoMount(
        id: crate::ctypes::c_int,
        path: *const crate::ctypes::c_char,
        permission: crate::ctypes::c_int,
        a4: crate::ctypes::c_int,
        a5: crate::ctypes::c_int,
        a6: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoUmount(
        id: crate::ctypes::c_int,
        a2: crate::ctypes::c_int,
        a3: crate::ctypes::c_int,
        a4: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoGetRemoteKPLSData(
        pid: SceUID,
        dst: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
