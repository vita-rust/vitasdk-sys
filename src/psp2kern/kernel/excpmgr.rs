/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub mod SceExcpKind {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_EXCP_RESET: Type = 0;
    pub const SCE_EXCP_UNDEF_INSTRUCTION: Type = 1;
    pub const SCE_EXCP_SVC: Type = 2;
    pub const SCE_EXCP_PABT: Type = 3;
    pub const SCE_EXCP_DABT: Type = 4;
    pub const SCE_EXCP_UNUSED: Type = 5;
    pub const SCE_EXCP_IRQ: Type = 6;
    pub const SCE_EXCP_FIQ: Type = 7;
}
pub mod SceExcpHandlingCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_EXCPMGR_EXCEPTION_HANDLED: Type = 0;
    pub const SCE_EXCPMGR_EXCEPTION_NOT_HANDLED: Type = 1;
    pub const SCE_EXCPMGR_EXCEPTION_HANDLING_CODE_2: Type = 2;
    pub const SCE_EXCPMGR_EXCEPTION_NOT_HANDLED_FATAL: Type = 3;
    pub const SCE_EXCPMGR_EXCEPTION_HANDLING_CODE_4: Type = 4;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceExcpmgrData {
    pub nestedExceptionCount: [crate::ctypes::c_int; 4usize],
    pub unused: [crate::ctypes::c_int; 4usize],
    pub ExcpStackTop: [*mut crate::ctypes::c_void; 4usize],
    pub ExcpStackBottom: [*mut crate::ctypes::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceExcpmgrExceptionContext {
    pub r0: u32,
    pub r1: u32,
    pub r2: u32,
    pub r3: u32,
    pub r4: u32,
    pub r5: u32,
    pub r6: u32,
    pub r7: u32,
    pub r8: u32,
    pub r9: u32,
    pub r10: u32,
    pub r11: u32,
    pub r12: u32,
    pub sp: u32,
    pub lr: u32,
    pub address_of_faulting_instruction: u32,
    pub ExceptionKind: SceExcpKind::Type,
    pub SPSR: u32,
    pub CPACR: u32,
    pub FPSCR: u32,
    pub FPEXC: u32,
    pub CONTEXTIDR: u32,
    pub TPIDRURW: u32,
    pub TPIDRURO: u32,
    pub TPIDRPRW: u32,
    pub TTBR1: u32,
    pub unused68: u32,
    pub DACR: u32,
    pub DFSR: u32,
    pub IFSR: u32,
    pub DFAR: u32,
    pub IFAR: u32,
    pub PAR: u32,
    pub TEEHBR: u32,
    pub PMCR: u32,
    pub PMCNTENSET: u32,
    pub PMCNTENSET_2: u32,
    pub PMSELR: u32,
    pub PMCCNTR: u32,
    pub PMUSERENR: u32,
    pub PMXEVTYPER0: u32,
    pub PMXEVCNTR0: u32,
    pub PMXEVTYPER1: u32,
    pub PMXEVCNTR1: u32,
    pub PMXEVTYPER2: u32,
    pub PMXEVCNTR2: u32,
    pub PMXEVTYPER3: u32,
    pub PMXEVCNTR3: u32,
    pub PMXEVTYPER4: u32,
    pub PMXEVCNTR4: u32,
    pub PMXEVTYPER5: u32,
    pub PMXEVCNTR5: u32,
    pub unusedD0: u32,
    pub unkD4: u32,
    pub DBGSCRext: u32,
    pub unusedDC: [u32; 9usize],
    pub VFP_registers: [u64; 32usize],
    pub unk200: [u32; 128usize],
}
pub type SceExcpmgrExceptionHandler = ::core::option::Option<
    unsafe extern "C" fn(context: *mut SceExcpmgrExceptionContext, code: SceExcpHandlingCode::Type),
>;
extern "C" {
    pub fn ksceExcpmgrGetData() -> *mut SceExcpmgrData;
}
extern "C" {
    pub fn ksceExcpmgrRegisterHandler(
        kind: SceExcpKind::Type,
        priority: crate::ctypes::c_int,
        handler: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
