/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::kernel::modulemgr::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceKernelModuleName {
    pub s: [crate::ctypes::c_char; 28usize],
}
#[repr(C)]
pub struct SceKernelSegmentInfo2 {
    pub size: SceSize,
    pub perm: crate::ctypes::c_int,
    pub vaddr: *mut crate::ctypes::c_void,
    pub memsz: u32,
    pub unk_10: crate::ctypes::c_int,
}
#[repr(C)]
pub struct SceKernelModuleListInfo {
    pub size: SceSize,
    pub modid: SceUID,
    pub version: u32,
    pub module_version: u32,
    pub unk10: u32,
    pub unk14: *mut crate::ctypes::c_void,
    pub unk18: u32,
    pub unk1C: *mut crate::ctypes::c_void,
    pub unk20: *mut crate::ctypes::c_void,
    pub module_name: [crate::ctypes::c_char; 28usize],
    pub unk40: u32,
    pub unk44: u32,
    pub nid: u32,
    pub segments_num: SceSize,
    pub __bindgen_anon_1: SceKernelModuleListInfo__bindgen_ty_1,
}
#[repr(C)]
pub struct SceKernelModuleListInfo__bindgen_ty_1 {
    pub seg1: __BindgenUnionField<SceKernelModuleListInfo__bindgen_ty_1__bindgen_ty_1>,
    pub seg2: __BindgenUnionField<SceKernelModuleListInfo__bindgen_ty_1__bindgen_ty_2>,
    pub seg3: __BindgenUnionField<SceKernelModuleListInfo__bindgen_ty_1__bindgen_ty_3>,
    pub seg4: __BindgenUnionField<SceKernelModuleListInfo__bindgen_ty_1__bindgen_ty_4>,
    pub bindgen_union_field: [u32; 24usize],
}
#[repr(C)]
pub struct SceKernelModuleListInfo__bindgen_ty_1__bindgen_ty_1 {
    pub SegmentInfo: [SceKernelSegmentInfo2; 1usize],
    pub addr: [u32; 4usize],
}
#[repr(C)]
pub struct SceKernelModuleListInfo__bindgen_ty_1__bindgen_ty_2 {
    pub SegmentInfo: [SceKernelSegmentInfo2; 2usize],
    pub addr: [u32; 4usize],
}
#[repr(C)]
pub struct SceKernelModuleListInfo__bindgen_ty_1__bindgen_ty_3 {
    pub SegmentInfo: [SceKernelSegmentInfo2; 3usize],
    pub addr: [u32; 4usize],
}
#[repr(C)]
pub struct SceKernelModuleListInfo__bindgen_ty_1__bindgen_ty_4 {
    pub SegmentInfo: [SceKernelSegmentInfo2; 4usize],
    pub addr: [u32; 4usize],
}
extern "C" {
    pub fn ksceKernelRegisterSyscall(syscall_id: SceSize, func: *const crate::ctypes::c_void);
}
extern "C" {
    pub fn ksceKernelRegisterModulesAfterBoot();
}
extern "C" {
    pub fn ksceKernelGetModuleList(
        pid: SceUID,
        flags1: crate::ctypes::c_int,
        flags2: crate::ctypes::c_int,
        modids: *mut SceUID,
        num: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetModuleInfoForDebugger(
        pid: SceUID,
        infolists: *mut SceKernelModuleListInfo,
        num: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetModuleInfo(
        pid: SceUID,
        modid: SceUID,
        info: *mut SceKernelModuleInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetModuleInfoMinByAddr(
        pid: SceUID,
        module_addr: *const crate::ctypes::c_void,
        module_nid: *mut u32,
        program_text_addr: *mut *const crate::ctypes::c_void,
        module_name: *mut SceKernelModuleName,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetModuleCB(
        modid: SceUID,
        info: *mut *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetModuleCBByAddr(
        pid: SceUID,
        module_addr: *const crate::ctypes::c_void,
        info: *mut *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetModuleIdByAddrForDebugger(
        pid: SceUID,
        module_addr: *const crate::ctypes::c_void,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelSearchModuleByName(module_name: *const crate::ctypes::c_char) -> SceUID;
}
extern "C" {
    pub fn ksceKernelGetSystemSwVersion(data: *mut SceKernelFwInfo) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelLoadModule(
        path: *const crate::ctypes::c_char,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelLMOption,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelStartModule(
        modid: SceUID,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelLMOption,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelLoadStartModule(
        path: *const crate::ctypes::c_char,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelLMOption,
        status: *mut crate::ctypes::c_int,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelStopModule(
        modid: SceUID,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelULMOption,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelUnloadModule(
        modid: SceUID,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelULMOption,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelStopUnloadModule(
        modid: SceUID,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelULMOption,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelLoadModuleForPid(
        pid: SceUID,
        path: *const crate::ctypes::c_char,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelLMOption,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelStartModuleForPid(
        pid: SceUID,
        modid: SceUID,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelLMOption,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelLoadStartModuleForPid(
        pid: SceUID,
        path: *const crate::ctypes::c_char,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelLMOption,
        status: *mut crate::ctypes::c_int,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelStopModuleForPid(
        pid: SceUID,
        modid: SceUID,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelULMOption,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelUnloadModuleForPid(
        pid: SceUID,
        modid: SceUID,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelULMOption,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelStopUnloadModuleForPid(
        pid: SceUID,
        modid: SceUID,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelULMOption,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelLoadStartSharedModuleForPid(
        pid: SceUID,
        path: *const crate::ctypes::c_char,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelLMOption,
        status: *mut crate::ctypes::c_int,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelStopUnloadSharedModuleForPid(
        pid: SceUID,
        modid: SceUID,
        args: SceSize,
        argp: *mut crate::ctypes::c_void,
        flags: crate::ctypes::c_int,
        option: *mut SceKernelULMOption,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelMountBootfs(
        bootImagePath: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelUmountBootfs() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetModuleIdByPid(pid: SceUID) -> SceUID;
}
extern "C" {
    pub fn ksceKernelGetModulePath(
        modid: SceUID,
        path: *mut crate::ctypes::c_char,
        pathlen: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetLibraryInfoForDebugger(
        pid: SceUID,
        library_id: SceUID,
        info: *mut SceKernelModuleLibraryInfo,
    ) -> crate::ctypes::c_int;
}
