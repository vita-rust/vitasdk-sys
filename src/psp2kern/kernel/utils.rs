/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub const SCE_SHA1_BLOCK_SIZE: u32 = 64;
pub const SCE_SHA1_DIGEST_SIZE: u32 = 20;
pub const SCE_SHA224_BLOCK_SIZE: u32 = 64;
pub const SCE_SHA224_DIGEST_SIZE: u32 = 28;
pub const SCE_SHA256_BLOCK_SIZE: u32 = 64;
pub const SCE_SHA256_DIGEST_SIZE: u32 = 32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceSha1Context {
    pub h: [u32; 5usize],
    pub usRemains: u16,
    pub usComputed: u16,
    pub ullTotalLen: u64,
    pub buf: [crate::ctypes::c_char; 64usize],
    pub result: [crate::ctypes::c_char; 20usize],
    pub pad: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceSha224Context {
    pub h: [u32; 8usize],
    pub pad: u32,
    pub usRemains: u16,
    pub usComputed: u16,
    pub ullTotalLen: u64,
    pub buf: [crate::ctypes::c_char; 64usize],
    pub result: [crate::ctypes::c_char; 28usize],
    pub pad2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceSha256Context {
    pub h: [u32; 8usize],
    pub pad: u32,
    pub usRemains: u16,
    pub usComputed: u16,
    pub ullTotalLen: u64,
    pub buf: [crate::ctypes::c_char; 64usize],
    pub result: [crate::ctypes::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceDeflatePartialInputParam {
    pub size: u32,
    pub pBufEnd: *const crate::ctypes::c_void,
    pub cookie: *mut crate::ctypes::c_void,
    pub SceDeflateDecompressPartialInputCallback: ::core::option::Option<
        unsafe extern "C" fn(
            param: *mut SceDeflatePartialInputParam,
            outputsize: u32,
        ) -> *const crate::ctypes::c_void,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceAesContext {
    pub data: [u8; 976usize],
}
extern "C" {
    pub fn ksceSha1BlockInit(ctx: *mut SceSha1Context) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha1BlockUpdate(
        ctx: *mut SceSha1Context,
        plain: *const crate::ctypes::c_void,
        len: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha1BlockResult(
        ctx: *mut SceSha1Context,
        result: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha1Digest(
        plain: *const crate::ctypes::c_void,
        len: SceSize,
        digest: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha224BlockInit(ctx: *mut SceSha224Context) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha224BlockUpdate(
        ctx: *mut SceSha224Context,
        plain: *const crate::ctypes::c_void,
        len: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha224BlockResult(
        ctx: *mut SceSha224Context,
        result: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha224Digest(
        plain: *const crate::ctypes::c_void,
        len: SceSize,
        digest: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha256BlockInit(ctx: *mut SceSha256Context) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha256BlockUpdate(
        ctx: *mut SceSha256Context,
        plain: *const crate::ctypes::c_void,
        len: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha256BlockResult(
        ctx: *mut SceSha256Context,
        result: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSha256Digest(
        plain: *const crate::ctypes::c_void,
        len: SceSize,
        digest: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceHmacSha1Digest(
        key: *const crate::ctypes::c_void,
        key_len: SceSize,
        plain: *const crate::ctypes::c_void,
        len: SceSize,
        digest: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceHmacSha224Digest(
        key: *const crate::ctypes::c_void,
        key_len: SceSize,
        plain: *const crate::ctypes::c_void,
        len: SceSize,
        digest: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceHmacSha256Digest(
        key: *const crate::ctypes::c_void,
        key_len: SceSize,
        plain: *const crate::ctypes::c_void,
        len: SceSize,
        digest: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceGzipDecompress(
        dst: *mut crate::ctypes::c_void,
        dst_size: SceSize,
        src: *const crate::ctypes::c_void,
        crc32: *mut u32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceGzipIsValid(src: *const crate::ctypes::c_void) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceGzipGetInfo(
        src: *const crate::ctypes::c_void,
        extra: *mut *const crate::ctypes::c_void,
        name: *mut *const crate::ctypes::c_char,
        comment: *mut *const crate::ctypes::c_char,
        crc: *mut crate::ctypes::c_ushort,
        data: *mut *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceGzipGetName(src: *const crate::ctypes::c_void) -> *const crate::ctypes::c_char;
}
extern "C" {
    pub fn ksceGzipGetComment(src: *const crate::ctypes::c_void) -> *const crate::ctypes::c_char;
}
extern "C" {
    pub fn ksceGzipGetCompressedData(
        src: *const crate::ctypes::c_void,
    ) -> *const crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceZlibGetInfo(
        src: *const crate::ctypes::c_void,
        cmf: *mut crate::ctypes::c_uchar,
        flg: *mut crate::ctypes::c_uchar,
        dictid: *mut crate::ctypes::c_uint,
        data: *mut *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceZlibGetCompressedData(
        src: *const crate::ctypes::c_void,
    ) -> *const crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceZlibDecompress(
        dst: *mut crate::ctypes::c_void,
        dst_size: SceSize,
        src: *const crate::ctypes::c_void,
        adler32: *mut u32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceDeflateDecompress(
        dst: *mut crate::ctypes::c_void,
        dst_size: SceSize,
        src: *const crate::ctypes::c_void,
        next: *mut *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceDeflateDecompressPartial(
        dst: *mut crate::ctypes::c_void,
        dst_size: SceSize,
        src: *const crate::ctypes::c_void,
        next: *mut *const crate::ctypes::c_void,
        cbInfo: *mut SceDeflatePartialInputParam,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceAesInit1(
        ctx: *mut SceAesContext,
        blocksize: SceSize,
        keysize: SceSize,
        key: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceAesInit2(
        ctx: *mut SceAesContext,
        blocksize: SceSize,
        keysize: SceSize,
        key: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceAesInit3(
        ctx: *mut SceAesContext,
        blocksize: SceSize,
        keysize: SceSize,
        key: *const crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceAesDecrypt1(
        ctx: *mut SceAesContext,
        src: *const crate::ctypes::c_void,
        dst: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceAesDecrypt2(
        ctx: *mut SceAesContext,
        src: *const crate::ctypes::c_void,
        dst: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceAesEncrypt1(
        ctx: *mut SceAesContext,
        src: *const crate::ctypes::c_void,
        dst: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceAesEncrypt2(
        ctx: *mut SceAesContext,
        src: *const crate::ctypes::c_void,
        dst: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
