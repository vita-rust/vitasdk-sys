/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
pub struct SceKernelProcessInfo {
    pub size: SceSize,
    pub pid: SceUID,
    pub unk1: crate::ctypes::c_int,
    pub unk2: crate::ctypes::c_int,
    pub unk3: crate::ctypes::c_int,
    pub ppid: SceUID,
    pub unk: [crate::ctypes::c_int; 52usize],
}
extern "C" {
    pub fn ksceKernelGetProcessKernelBuf(pid: SceUID) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceKernelGetProcessInfo(
        pid: SceUID,
        info: *mut SceKernelProcessInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCreateProcessLocalStorage(
        name: *const crate::ctypes::c_char,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetProcessLocalStorageAddr(
        key: crate::ctypes::c_int,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceKernelGetProcessLocalStorageAddrForPid(
        pid: SceUID,
        key: crate::ctypes::c_int,
        out_addr: *mut *mut crate::ctypes::c_void,
        create_if_doesnt_exist: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
pub type SceKernelProcessType = SceUInt32;
extern "C" {
    pub fn ksceKernelCreateProcess(
        titleid: *const crate::ctypes::c_char,
        type_: SceKernelProcessType,
        path: *const crate::ctypes::c_char,
        opt: *mut crate::ctypes::c_void,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceKernelResumeProcess(pid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSuspendProcess(
        pid: SceUID,
        status: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetProcessStatus(
        pid: SceUID,
        status: *mut crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetProcessMainThread(pid: SceUID) -> SceUID;
}
extern "C" {
    pub fn ksceKernelGetProcessModuleInfo(pid: SceUID) -> ScePVoid;
}
extern "C" {
    pub fn ksceKernelGetProcessSelfAuthInfo(
        pid: SceUID,
        self_auth_info: *mut SceSelfAuthInfo,
    ) -> crate::ctypes::c_int;
}
