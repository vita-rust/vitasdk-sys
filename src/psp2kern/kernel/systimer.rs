/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

pub type SceSysTimerId = SceInt32;
pub type SceSysTimerCallback = ::core::option::Option<
    unsafe extern "C" fn(timer: SceSysTimerId, pUserData: *mut crate::ctypes::c_void),
>;
pub mod SceSysTimerType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_SYSTIMER_TYPE_LONG: Type = 1;
    pub const SCE_SYSTIMER_TYPE_WORD: Type = 2;
}
pub mod SceSysTimerClockSource {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_SYSTIMER_CLOCK_SOURCE_SYS: Type = 0;
    pub const SCE_SYSTIMER_CLOCK_SOURCE_48MHZ: Type = 3;
}
extern "C" {
    pub fn ksceKernelSysTimerAlloc(timerType: SceSysTimerType::Type) -> SceSysTimerId;
}
extern "C" {
    pub fn ksceKernelSysTimerFree(timerId: SceSysTimerId) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSysTimerStartCount(timerId: SceSysTimerId) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSysTimerStopCount(timerId: SceSysTimerId) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSysTimerSetClockSource(
        timerId: SceSysTimerId,
        clockSource: SceSysTimerClockSource::Type,
        prescaleFactor: SceUInt8,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSysTimerSetInterval(
        timerId: SceSysTimerId,
        interval: SceKernelSysClock,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSysTimerSetHandler(
        timerId: SceSysTimerId,
        callback: SceSysTimerCallback,
        targetCPU: SceUInt32,
        pUserData: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSysTimerGetCount(
        timerId: SceSysTimerId,
        pCount: *mut SceKernelSysClock,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSysTimerSetCount(
        timerId: SceSysTimerId,
        count: SceKernelSysClock,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSysTimerResetCount(timerId: SceSysTimerId) -> crate::ctypes::c_int;
}
