/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const __PSP2FILEHASH__: u32 = 0;
pub type va_list = u32;
#[repr(C)]
pub struct SceKernelDebugInfo {
    pub __bindgen_anon_1: SceKernelDebugInfo__bindgen_ty_1,
    pub func: *const crate::ctypes::c_char,
    pub line: SceUInt32,
    pub file: *const crate::ctypes::c_char,
}
#[repr(C)]
pub struct SceKernelDebugInfo__bindgen_ty_1 {
    pub __bindgen_anon_1: __BindgenUnionField<SceKernelDebugInfo__bindgen_ty_1__bindgen_ty_1>,
    pub __bindgen_anon_2: __BindgenUnionField<SceKernelDebugInfo__bindgen_ty_1__bindgen_ty_2>,
    pub bindgen_union_field: [u32; 3usize],
}
#[repr(C)]
pub struct SceKernelDebugInfo__bindgen_ty_1__bindgen_ty_1 {
    pub fileHash: SceUInt32,
    pub lineHash: SceUInt32,
    pub funcHash: SceUInt32,
}
#[repr(C)]
pub struct SceKernelDebugInfo__bindgen_ty_1__bindgen_ty_2 {
    pub hex_value0_hi: SceUInt32,
    pub hex_value0_lo: SceUInt32,
    pub hex_value1: SceUInt32,
}
pub type SceKernelDebugMessageContext = SceKernelDebugInfo;
pub mod SceKernelDebugInfoFlags {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_DEBUG_INFO_FLAG_NONE: Type = 0;
    pub const SCE_KERNEL_DEBUG_INFO_FLAG_CORE: Type = 1;
    pub const SCE_KERNEL_DEBUG_INFO_FLAG_FUNC: Type = 2;
    pub const SCE_KERNEL_DEBUG_INFO_FLAG_LINE: Type = 4;
    pub const SCE_KERNEL_DEBUG_INFO_FLAG_FILE: Type = 8;
}
pub mod SceKernelDebugLevel {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_DEBUG_LEVEL_ALWAYS: Type = 0;
    pub const SCE_KERNEL_DEBUG_LEVEL_DEBUG: Type = 1;
    pub const SCE_KERNEL_DEBUG_LEVEL_TRACE: Type = 2;
}
pub mod SceKernelAssertLevel {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_ASSERT_LEVEL_0: Type = 0;
    pub const SCE_KERNEL_ASSERT_LEVEL_1: Type = 1;
    pub const SCE_KERNEL_ASSERT_LEVEL_2: Type = 2;
}
extern "C" {
    pub fn ksceDebugPutchar(character: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelPrintf(fmt: *const crate::ctypes::c_char, ...) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelPrintfLevel(
        level: SceUInt32,
        fmt: *const crate::ctypes::c_char,
        ...
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelPrintfLevelWithInfo(
        level: SceUInt32,
        flags: SceUInt32,
        dbginfo: *const SceKernelDebugInfo,
        fmt: *const crate::ctypes::c_char,
        ...
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelPrintfWithInfo(
        flags: SceUInt32,
        dbginfo: *const SceKernelDebugInfo,
        fmt: *const crate::ctypes::c_char,
        ...
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelVprintf(
        fmt: *const crate::ctypes::c_char,
        arg: va_list,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelVprintfLevel(
        level: SceUInt32,
        fmt: *const crate::ctypes::c_char,
        arg: va_list,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelPanic(
        dbginfo: *const SceKernelDebugInfo,
        lr: *const crate::ctypes::c_void,
    ) -> !;
}
extern "C" {
    pub fn ksceKernelPrintfPanic(
        dbginfo: *const SceKernelDebugInfo,
        lr: *const crate::ctypes::c_void,
        fmt: *const crate::ctypes::c_char,
        ...
    ) -> !;
}
extern "C" {
    pub fn ksceKernelAssert(
        condition: SceBool,
        dbginfo: *const SceKernelDebugInfo,
        lr: *const crate::ctypes::c_void,
    );
}
extern "C" {
    pub fn ksceKernelAssertLevel(
        level: SceUInt32,
        condition: SceBool,
        dbginfo: *const SceKernelDebugInfo,
        lr: *const crate::ctypes::c_void,
    );
}
extern "C" {
    pub fn ksceKernelPrintfAssertLevel(
        level: SceUInt32,
        condition: SceBool,
        dbginfo: *const SceKernelDebugInfo,
        lr: *const crate::ctypes::c_void,
        fmt: *const crate::ctypes::c_char,
        ...
    );
}
extern "C" {
    pub fn ksceDebugSetHandlers(
        func: ::core::option::Option<
            unsafe extern "C" fn(
                unk: crate::ctypes::c_int,
                format: *const crate::ctypes::c_char,
                args: va_list,
            ) -> crate::ctypes::c_int,
        >,
        args: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceDebugRegisterPutcharHandler(
        func: ::core::option::Option<
            unsafe extern "C" fn(
                args: *mut crate::ctypes::c_void,
                c: crate::ctypes::c_char,
            ) -> crate::ctypes::c_int,
        >,
        args: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceDebugGetPutcharHandler() -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceDebugDisableInfoDump(flag: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetAssertLevel() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelSetMinimumAssertionLevel(level: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
#[repr(C, packed)]
pub struct SceKernelDebugEventLog1 {
    pub data_0x40: crate::ctypes::c_int,
    pub pid: SceUID,
    pub budget_type: crate::ctypes::c_int,
    pub data_0x4C: crate::ctypes::c_int,
    pub titleid: [crate::ctypes::c_char; 12usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SceKernelDebugEventLog2 {
    pub data_0x40: crate::ctypes::c_int,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SceKernelDebugEventLog3 {
    pub data_0x40: crate::ctypes::c_int,
    pub ip1: [crate::ctypes::c_char; 16usize],
    pub ip2: [crate::ctypes::c_char; 16usize],
    pub ip3: [crate::ctypes::c_char; 16usize],
    pub ip4: [crate::ctypes::c_char; 16usize],
    pub ip5: [crate::ctypes::c_char; 16usize],
}
#[repr(C, packed)]
pub struct SceKernelDebugEventLog {
    pub size: SceSize,
    pub data_0x04: crate::ctypes::c_int,
    pub titleid: [crate::ctypes::c_char; 12usize],
    pub flags: crate::ctypes::c_int,
    pub ppid: SceUID,
    pub data_0x1C: SceUID,
    pub rsvd: [crate::ctypes::c_int; 4usize],
    pub time: SceUInt64,
    pub data_0x38: crate::ctypes::c_int,
    pub item_size: SceSize,
    pub __bindgen_anon_1: SceKernelDebugEventLog__bindgen_ty_1,
}
#[repr(C)]
pub struct SceKernelDebugEventLog__bindgen_ty_1 {
    pub type1: __BindgenUnionField<SceKernelDebugEventLog1>,
    pub type2: __BindgenUnionField<SceKernelDebugEventLog2>,
    pub type3: __BindgenUnionField<SceKernelDebugEventLog3>,
    pub bindgen_union_field: [u8; 84usize],
}
extern "C" {
    pub fn ksceEventLogGetInfo(
        buf: *mut crate::ctypes::c_void,
        buf_size: SceSize,
        read_blocks: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelGetTtyInfo(
        buf: *mut crate::ctypes::c_char,
        buf_size: SceSize,
    ) -> crate::ctypes::c_int;
}
