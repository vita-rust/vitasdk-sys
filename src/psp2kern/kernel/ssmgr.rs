/* automatically generated by rust-bindgen 0.68.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceConsoleId {
    pub unk: u16,
    pub company_code: u16,
    pub product_code: u16,
    pub product_sub_code: u16,
    pub __bindgen_anon_1: SceConsoleId__bindgen_ty_1,
    pub unk3: [u8; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SceConsoleId__bindgen_ty_1 {
    pub __bindgen_anon_1: SceConsoleId__bindgen_ty_1__bindgen_ty_1,
    pub chassis_check: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SceConsoleId__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl SceConsoleId__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn unk2(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_unk2(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn factory_code(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_factory_code(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(unk2: u8, factory_code: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let unk2: u8 = unsafe { ::core::mem::transmute(unk2) };
            unk2 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let factory_code: u8 = unsafe { ::core::mem::transmute(factory_code) };
            factory_code as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceOpenPsId {
    pub open_psid: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScePsCode {
    pub company_code: u16,
    pub product_code: u16,
    pub product_sub_code: u16,
    pub factory_code: u16,
}
extern "C" {
    pub fn ksceSblAimgrGetConsoleId(cid: *mut SceConsoleId) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSblAimgrGetOpenPsId(open_psid: *mut SceOpenPsId) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSblAimgrGetPscode(pscode: *mut ScePsCode) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSblRngPseudoRandomNumber(
        result: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSblDmac5AesCbcDec(
        src: *const crate::ctypes::c_void,
        dst: *mut crate::ctypes::c_void,
        size: crate::ctypes::c_int,
        key: *const crate::ctypes::c_void,
        key_size: crate::ctypes::c_int,
        iv: *mut crate::ctypes::c_void,
        mask_enable: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSblDmac5AesCbcEnc(
        src: *const crate::ctypes::c_void,
        dst: *mut crate::ctypes::c_void,
        size: crate::ctypes::c_int,
        key: *const crate::ctypes::c_void,
        key_size: crate::ctypes::c_int,
        iv: *mut crate::ctypes::c_void,
        mask_enable: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceSblDmac5AesCtrDec(
        src: *const crate::ctypes::c_void,
        dst: *mut crate::ctypes::c_void,
        size: crate::ctypes::c_int,
        key: *const crate::ctypes::c_void,
        key_size: crate::ctypes::c_int,
        iv: *mut crate::ctypes::c_void,
        mask_enable: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
#[repr(C)]
pub struct ScePortabilityData {
    pub msg_size: SceSize,
    pub msg: [u8; 32usize],
}
extern "C" {
    pub fn ksceSblSsDecryptWithPortability(
        key_type: SceUInt32,
        iv: *mut crate::ctypes::c_void,
        src: *mut ScePortabilityData,
        dst: *mut ScePortabilityData,
    ) -> crate::ctypes::c_int;
}
