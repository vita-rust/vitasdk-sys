/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::ctrl::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;
#[allow(unused_imports)]
use crate::vitasdk::build_utils::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceCtrlVirtualControllerDriver {
    pub readButtons: ::core::option::Option<
        unsafe extern "C" fn(
            port: crate::ctypes::c_int,
            pad_data: *mut SceCtrlData,
            count: crate::ctypes::c_int,
        ) -> crate::ctypes::c_int,
    >,
    pub setActuator: ::core::option::Option<
        unsafe extern "C" fn(
            port: crate::ctypes::c_int,
            pState: *const SceCtrlActuator,
        ) -> crate::ctypes::c_int,
    >,
    pub getBatteryInfo: ::core::option::Option<
        unsafe extern "C" fn(
            port: crate::ctypes::c_int,
            batt: *mut SceUInt8,
        ) -> crate::ctypes::c_int,
    >,
    pub disconnect: ::core::option::Option<
        unsafe extern "C" fn(port: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
    pub setTurnOffInterval: ::core::option::Option<
        unsafe extern "C" fn(port: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
    pub getActiveControllerPort:
        ::core::option::Option<unsafe extern "C" fn() -> crate::ctypes::c_int>,
    pub changePortAssign: ::core::option::Option<
        unsafe extern "C" fn(
            port1: crate::ctypes::c_int,
            port2: crate::ctypes::c_int,
        ) -> crate::ctypes::c_int,
    >,
    pub unk0: ::core::option::Option<unsafe extern "C" fn() -> crate::ctypes::c_int>,
    pub getControllerPortInfo: ::core::option::Option<
        unsafe extern "C" fn(info: *mut SceCtrlPortInfo) -> crate::ctypes::c_int,
    >,
    pub setLightBar: ::core::option::Option<
        unsafe extern "C" fn(
            port: crate::ctypes::c_int,
            r: SceUInt8,
            g: SceUInt8,
            b: SceUInt8,
        ) -> crate::ctypes::c_int,
    >,
    pub resetLightBar: ::core::option::Option<
        unsafe extern "C" fn(port: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
    pub unk1: ::core::option::Option<
        unsafe extern "C" fn(port: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
    pub singleControllerMode: ::core::option::Option<
        unsafe extern "C" fn(port: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
}
extern "C" {
    pub fn ksceCtrlSetSamplingMode(mode: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlGetSamplingMode(pMode: *mut crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlPeekBufferPositive(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlPeekBufferNegative(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlReadBufferPositive(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlReadBufferNegative(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlSetRapidFire(
        port: crate::ctypes::c_int,
        idx: crate::ctypes::c_int,
        pRule: *const SceCtrlRapidFireRule,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlClearRapidFire(
        port: crate::ctypes::c_int,
        idx: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlGetControllerPortInfo(info: *mut SceCtrlPortInfo) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlSetButtonIntercept(intercept: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlGetButtonIntercept(intercept: *mut crate::ctypes::c_int)
        -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlSetButtonEmulation(
        port: crate::ctypes::c_uint,
        slot: crate::ctypes::c_uchar,
        userButtons: crate::ctypes::c_uint,
        kernelButtons: crate::ctypes::c_uint,
        uiMake: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlSetAnalogEmulation(
        port: crate::ctypes::c_uint,
        slot: crate::ctypes::c_uchar,
        user_lX: crate::ctypes::c_uchar,
        user_lY: crate::ctypes::c_uchar,
        user_rX: crate::ctypes::c_uchar,
        user_rY: crate::ctypes::c_uchar,
        kernel_lX: crate::ctypes::c_uchar,
        kernel_lY: crate::ctypes::c_uchar,
        kernel_rX: crate::ctypes::c_uchar,
        kernel_rY: crate::ctypes::c_uchar,
        uiMake: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlRegisterVirtualControllerDriver(
        driver: *mut SceCtrlVirtualControllerDriver,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlUpdateMaskForNonShell(
        clear_mask: crate::ctypes::c_int,
        set_mask: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlUpdateMaskForAll(
        clear_mask: crate::ctypes::c_int,
        set_mask: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlGetMaskForNonShell(mask: *mut u32) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlGetMaskForAll(mask: *mut u32) -> crate::ctypes::c_int;
}
